
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Operator
 * 
 */
export type Operator = $Result.DefaultSelection<Prisma.$OperatorPayload>
/**
 * Model Sample
 * 
 */
export type Sample = $Result.DefaultSelection<Prisma.$SamplePayload>
/**
 * Model Mineral
 * 
 */
export type Mineral = $Result.DefaultSelection<Prisma.$MineralPayload>
/**
 * Model SampleMineral
 * 
 */
export type SampleMineral = $Result.DefaultSelection<Prisma.$SampleMineralPayload>
/**
 * Model FormExt
 * 
 */
export type FormExt = $Result.DefaultSelection<Prisma.$FormExtPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.operator`: Exposes CRUD operations for the **Operator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Operators
    * const operators = await prisma.operator.findMany()
    * ```
    */
  get operator(): Prisma.OperatorDelegate<ExtArgs>;

  /**
   * `prisma.sample`: Exposes CRUD operations for the **Sample** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Samples
    * const samples = await prisma.sample.findMany()
    * ```
    */
  get sample(): Prisma.SampleDelegate<ExtArgs>;

  /**
   * `prisma.mineral`: Exposes CRUD operations for the **Mineral** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Minerals
    * const minerals = await prisma.mineral.findMany()
    * ```
    */
  get mineral(): Prisma.MineralDelegate<ExtArgs>;

  /**
   * `prisma.sampleMineral`: Exposes CRUD operations for the **SampleMineral** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SampleMinerals
    * const sampleMinerals = await prisma.sampleMineral.findMany()
    * ```
    */
  get sampleMineral(): Prisma.SampleMineralDelegate<ExtArgs>;

  /**
   * `prisma.formExt`: Exposes CRUD operations for the **FormExt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FormExts
    * const formExts = await prisma.formExt.findMany()
    * ```
    */
  get formExt(): Prisma.FormExtDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.2
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Operator: 'Operator',
    Sample: 'Sample',
    Mineral: 'Mineral',
    SampleMineral: 'SampleMineral',
    FormExt: 'FormExt'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "operator" | "sample" | "mineral" | "sampleMineral" | "formExt"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Operator: {
        payload: Prisma.$OperatorPayload<ExtArgs>
        fields: Prisma.OperatorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OperatorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OperatorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          findFirst: {
            args: Prisma.OperatorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OperatorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          findMany: {
            args: Prisma.OperatorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>[]
          }
          create: {
            args: Prisma.OperatorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          createMany: {
            args: Prisma.OperatorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OperatorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>[]
          }
          delete: {
            args: Prisma.OperatorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          update: {
            args: Prisma.OperatorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          deleteMany: {
            args: Prisma.OperatorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OperatorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OperatorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatorPayload>
          }
          aggregate: {
            args: Prisma.OperatorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOperator>
          }
          groupBy: {
            args: Prisma.OperatorGroupByArgs<ExtArgs>
            result: $Utils.Optional<OperatorGroupByOutputType>[]
          }
          count: {
            args: Prisma.OperatorCountArgs<ExtArgs>
            result: $Utils.Optional<OperatorCountAggregateOutputType> | number
          }
        }
      }
      Sample: {
        payload: Prisma.$SamplePayload<ExtArgs>
        fields: Prisma.SampleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SampleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SampleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          findFirst: {
            args: Prisma.SampleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SampleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          findMany: {
            args: Prisma.SampleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>[]
          }
          create: {
            args: Prisma.SampleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          createMany: {
            args: Prisma.SampleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SampleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>[]
          }
          delete: {
            args: Prisma.SampleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          update: {
            args: Prisma.SampleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          deleteMany: {
            args: Prisma.SampleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SampleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SampleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SamplePayload>
          }
          aggregate: {
            args: Prisma.SampleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSample>
          }
          groupBy: {
            args: Prisma.SampleGroupByArgs<ExtArgs>
            result: $Utils.Optional<SampleGroupByOutputType>[]
          }
          count: {
            args: Prisma.SampleCountArgs<ExtArgs>
            result: $Utils.Optional<SampleCountAggregateOutputType> | number
          }
        }
      }
      Mineral: {
        payload: Prisma.$MineralPayload<ExtArgs>
        fields: Prisma.MineralFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MineralFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MineralPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MineralFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MineralPayload>
          }
          findFirst: {
            args: Prisma.MineralFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MineralPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MineralFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MineralPayload>
          }
          findMany: {
            args: Prisma.MineralFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MineralPayload>[]
          }
          create: {
            args: Prisma.MineralCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MineralPayload>
          }
          createMany: {
            args: Prisma.MineralCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MineralCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MineralPayload>[]
          }
          delete: {
            args: Prisma.MineralDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MineralPayload>
          }
          update: {
            args: Prisma.MineralUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MineralPayload>
          }
          deleteMany: {
            args: Prisma.MineralDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MineralUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MineralUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MineralPayload>
          }
          aggregate: {
            args: Prisma.MineralAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMineral>
          }
          groupBy: {
            args: Prisma.MineralGroupByArgs<ExtArgs>
            result: $Utils.Optional<MineralGroupByOutputType>[]
          }
          count: {
            args: Prisma.MineralCountArgs<ExtArgs>
            result: $Utils.Optional<MineralCountAggregateOutputType> | number
          }
        }
      }
      SampleMineral: {
        payload: Prisma.$SampleMineralPayload<ExtArgs>
        fields: Prisma.SampleMineralFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SampleMineralFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleMineralPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SampleMineralFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleMineralPayload>
          }
          findFirst: {
            args: Prisma.SampleMineralFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleMineralPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SampleMineralFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleMineralPayload>
          }
          findMany: {
            args: Prisma.SampleMineralFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleMineralPayload>[]
          }
          create: {
            args: Prisma.SampleMineralCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleMineralPayload>
          }
          createMany: {
            args: Prisma.SampleMineralCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SampleMineralCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleMineralPayload>[]
          }
          delete: {
            args: Prisma.SampleMineralDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleMineralPayload>
          }
          update: {
            args: Prisma.SampleMineralUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleMineralPayload>
          }
          deleteMany: {
            args: Prisma.SampleMineralDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SampleMineralUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SampleMineralUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SampleMineralPayload>
          }
          aggregate: {
            args: Prisma.SampleMineralAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSampleMineral>
          }
          groupBy: {
            args: Prisma.SampleMineralGroupByArgs<ExtArgs>
            result: $Utils.Optional<SampleMineralGroupByOutputType>[]
          }
          count: {
            args: Prisma.SampleMineralCountArgs<ExtArgs>
            result: $Utils.Optional<SampleMineralCountAggregateOutputType> | number
          }
        }
      }
      FormExt: {
        payload: Prisma.$FormExtPayload<ExtArgs>
        fields: Prisma.FormExtFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FormExtFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormExtPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FormExtFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormExtPayload>
          }
          findFirst: {
            args: Prisma.FormExtFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormExtPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FormExtFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormExtPayload>
          }
          findMany: {
            args: Prisma.FormExtFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormExtPayload>[]
          }
          create: {
            args: Prisma.FormExtCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormExtPayload>
          }
          createMany: {
            args: Prisma.FormExtCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FormExtCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormExtPayload>[]
          }
          delete: {
            args: Prisma.FormExtDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormExtPayload>
          }
          update: {
            args: Prisma.FormExtUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormExtPayload>
          }
          deleteMany: {
            args: Prisma.FormExtDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FormExtUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FormExtUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormExtPayload>
          }
          aggregate: {
            args: Prisma.FormExtAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFormExt>
          }
          groupBy: {
            args: Prisma.FormExtGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormExtGroupByOutputType>[]
          }
          count: {
            args: Prisma.FormExtCountArgs<ExtArgs>
            result: $Utils.Optional<FormExtCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OperatorCountOutputType
   */

  export type OperatorCountOutputType = {
    samples: number
  }

  export type OperatorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    samples?: boolean | OperatorCountOutputTypeCountSamplesArgs
  }

  // Custom InputTypes
  /**
   * OperatorCountOutputType without action
   */
  export type OperatorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatorCountOutputType
     */
    select?: OperatorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OperatorCountOutputType without action
   */
  export type OperatorCountOutputTypeCountSamplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleWhereInput
  }


  /**
   * Count Type SampleCountOutputType
   */

  export type SampleCountOutputType = {
    minerales: number
  }

  export type SampleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    minerales?: boolean | SampleCountOutputTypeCountMineralesArgs
  }

  // Custom InputTypes
  /**
   * SampleCountOutputType without action
   */
  export type SampleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleCountOutputType
     */
    select?: SampleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SampleCountOutputType without action
   */
  export type SampleCountOutputTypeCountMineralesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleMineralWhereInput
  }


  /**
   * Count Type MineralCountOutputType
   */

  export type MineralCountOutputType = {
    sample: number
  }

  export type MineralCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | MineralCountOutputTypeCountSampleArgs
  }

  // Custom InputTypes
  /**
   * MineralCountOutputType without action
   */
  export type MineralCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MineralCountOutputType
     */
    select?: MineralCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MineralCountOutputType without action
   */
  export type MineralCountOutputTypeCountSampleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleMineralWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    id_operador: number | null
    celular: number | null
    rol: number | null
    estado: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    id_operador: number | null
    celular: number | null
    rol: number | null
    estado: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    id_operador: number | null
    nombre: string | null
    apellidos: string | null
    ci: string | null
    celular: number | null
    rol: number | null
    estado: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    id_operador: number | null
    nombre: string | null
    apellidos: string | null
    ci: string | null
    celular: number | null
    rol: number | null
    estado: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    id_operador: number
    nombre: number
    apellidos: number
    ci: number
    celular: number
    rol: number
    estado: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    id_operador?: true
    celular?: true
    rol?: true
    estado?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    id_operador?: true
    celular?: true
    rol?: true
    estado?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    id_operador?: true
    nombre?: true
    apellidos?: true
    ci?: true
    celular?: true
    rol?: true
    estado?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    id_operador?: true
    nombre?: true
    apellidos?: true
    ci?: true
    celular?: true
    rol?: true
    estado?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    id_operador?: true
    nombre?: true
    apellidos?: true
    ci?: true
    celular?: true
    rol?: true
    estado?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string | null
    id_operador: number | null
    nombre: string
    apellidos: string
    ci: string
    celular: number
    rol: number
    estado: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    id_operador?: boolean
    nombre?: boolean
    apellidos?: boolean
    ci?: boolean
    celular?: boolean
    rol?: boolean
    estado?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    id_operador?: boolean
    nombre?: boolean
    apellidos?: boolean
    ci?: boolean
    celular?: boolean
    rol?: boolean
    estado?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    id_operador?: boolean
    nombre?: boolean
    apellidos?: boolean
    ci?: boolean
    celular?: boolean
    rol?: boolean
    estado?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string | null
      id_operador: number | null
      nombre: string
      apellidos: string
      ci: string
      celular: number
      rol: number
      estado: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly id_operador: FieldRef<"User", 'Int'>
    readonly nombre: FieldRef<"User", 'String'>
    readonly apellidos: FieldRef<"User", 'String'>
    readonly ci: FieldRef<"User", 'String'>
    readonly celular: FieldRef<"User", 'Int'>
    readonly rol: FieldRef<"User", 'Int'>
    readonly estado: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }


  /**
   * Model Operator
   */

  export type AggregateOperator = {
    _count: OperatorCountAggregateOutputType | null
    _avg: OperatorAvgAggregateOutputType | null
    _sum: OperatorSumAggregateOutputType | null
    _min: OperatorMinAggregateOutputType | null
    _max: OperatorMaxAggregateOutputType | null
  }

  export type OperatorAvgAggregateOutputType = {
    id: number | null
    nit: number | null
    nim_niar: number | null
    tipo_operador: number | null
    tipo_doc_creacion: number | null
    dl_departamento: number | null
    dl_municipio: number | null
    celular: number | null
    celular_2: number | null
    act_exploracion: number | null
    act_comer_interna: number | null
    act_comer_externa: number | null
    act_industrializacion: number | null
    act_tras_colas: number | null
    act_explotacion: number | null
    act_ben_concentracion: number | null
    act_refinacion: number | null
    act_fundicion: number | null
    tipo_explotacion: number | null
    verif_cert_liberacion: number | null
    nro_res_ministerial: number | null
    celular_resp_for101: number | null
    celular_resp_tmuestra: number | null
  }

  export type OperatorSumAggregateOutputType = {
    id: number | null
    nit: number | null
    nim_niar: number | null
    tipo_operador: number | null
    tipo_doc_creacion: number | null
    dl_departamento: number | null
    dl_municipio: number | null
    celular: number | null
    celular_2: number | null
    act_exploracion: number | null
    act_comer_interna: number | null
    act_comer_externa: number | null
    act_industrializacion: number | null
    act_tras_colas: number | null
    act_explotacion: number | null
    act_ben_concentracion: number | null
    act_refinacion: number | null
    act_fundicion: number | null
    tipo_explotacion: number | null
    verif_cert_liberacion: number | null
    nro_res_ministerial: number | null
    celular_resp_for101: number | null
    celular_resp_tmuestra: number | null
  }

  export type OperatorMinAggregateOutputType = {
    id: number | null
    razon_social: string | null
    nit: number | null
    nim_niar: number | null
    nro_nim: string | null
    fecha_exp_nim: Date | null
    tipo_operador: number | null
    nro_personeria: string | null
    nro_matricula_seprec: string | null
    fecha_exp_seprec: Date | null
    tipo_doc_creacion: number | null
    doc_creacion: string | null
    dl_departamento: number | null
    dl_municipio: number | null
    dl_direccion: string | null
    dl_ubicacion: string | null
    correo_inst: string | null
    tel_fijo: string | null
    celular: number | null
    celular_2: number | null
    act_exploracion: number | null
    act_comer_interna: number | null
    act_comer_externa: number | null
    act_industrializacion: number | null
    act_tras_colas: number | null
    act_explotacion: number | null
    act_ben_concentracion: number | null
    act_refinacion: number | null
    act_fundicion: number | null
    tipo_explotacion: number | null
    denominacion_area: string | null
    nro_codigo_unico: string | null
    nro_cuadricula: string | null
    municipio_origen: string | null
    nro_ruex: string | null
    verif_cert_liberacion: number | null
    nro_res_ministerial: number | null
    nombre_resp_for101: string | null
    ci_resp_for101: string | null
    celular_resp_for101: number | null
    correo_resp_for101: string | null
    nombre_resp_tmuestra: string | null
    ci_resp_tmuestra: string | null
    celular_resp_tmuestra: number | null
    correo_resp_tmuestra: string | null
  }

  export type OperatorMaxAggregateOutputType = {
    id: number | null
    razon_social: string | null
    nit: number | null
    nim_niar: number | null
    nro_nim: string | null
    fecha_exp_nim: Date | null
    tipo_operador: number | null
    nro_personeria: string | null
    nro_matricula_seprec: string | null
    fecha_exp_seprec: Date | null
    tipo_doc_creacion: number | null
    doc_creacion: string | null
    dl_departamento: number | null
    dl_municipio: number | null
    dl_direccion: string | null
    dl_ubicacion: string | null
    correo_inst: string | null
    tel_fijo: string | null
    celular: number | null
    celular_2: number | null
    act_exploracion: number | null
    act_comer_interna: number | null
    act_comer_externa: number | null
    act_industrializacion: number | null
    act_tras_colas: number | null
    act_explotacion: number | null
    act_ben_concentracion: number | null
    act_refinacion: number | null
    act_fundicion: number | null
    tipo_explotacion: number | null
    denominacion_area: string | null
    nro_codigo_unico: string | null
    nro_cuadricula: string | null
    municipio_origen: string | null
    nro_ruex: string | null
    verif_cert_liberacion: number | null
    nro_res_ministerial: number | null
    nombre_resp_for101: string | null
    ci_resp_for101: string | null
    celular_resp_for101: number | null
    correo_resp_for101: string | null
    nombre_resp_tmuestra: string | null
    ci_resp_tmuestra: string | null
    celular_resp_tmuestra: number | null
    correo_resp_tmuestra: string | null
  }

  export type OperatorCountAggregateOutputType = {
    id: number
    razon_social: number
    nit: number
    nim_niar: number
    nro_nim: number
    fecha_exp_nim: number
    tipo_operador: number
    nro_personeria: number
    nro_matricula_seprec: number
    fecha_exp_seprec: number
    tipo_doc_creacion: number
    doc_creacion: number
    dl_departamento: number
    dl_municipio: number
    dl_direccion: number
    dl_ubicacion: number
    correo_inst: number
    tel_fijo: number
    celular: number
    celular_2: number
    act_exploracion: number
    act_comer_interna: number
    act_comer_externa: number
    act_industrializacion: number
    act_tras_colas: number
    act_explotacion: number
    act_ben_concentracion: number
    act_refinacion: number
    act_fundicion: number
    tipo_explotacion: number
    denominacion_area: number
    nro_codigo_unico: number
    nro_cuadricula: number
    municipio_origen: number
    nro_ruex: number
    verif_cert_liberacion: number
    nro_res_ministerial: number
    nombre_resp_for101: number
    ci_resp_for101: number
    celular_resp_for101: number
    correo_resp_for101: number
    nombre_resp_tmuestra: number
    ci_resp_tmuestra: number
    celular_resp_tmuestra: number
    correo_resp_tmuestra: number
    _all: number
  }


  export type OperatorAvgAggregateInputType = {
    id?: true
    nit?: true
    nim_niar?: true
    tipo_operador?: true
    tipo_doc_creacion?: true
    dl_departamento?: true
    dl_municipio?: true
    celular?: true
    celular_2?: true
    act_exploracion?: true
    act_comer_interna?: true
    act_comer_externa?: true
    act_industrializacion?: true
    act_tras_colas?: true
    act_explotacion?: true
    act_ben_concentracion?: true
    act_refinacion?: true
    act_fundicion?: true
    tipo_explotacion?: true
    verif_cert_liberacion?: true
    nro_res_ministerial?: true
    celular_resp_for101?: true
    celular_resp_tmuestra?: true
  }

  export type OperatorSumAggregateInputType = {
    id?: true
    nit?: true
    nim_niar?: true
    tipo_operador?: true
    tipo_doc_creacion?: true
    dl_departamento?: true
    dl_municipio?: true
    celular?: true
    celular_2?: true
    act_exploracion?: true
    act_comer_interna?: true
    act_comer_externa?: true
    act_industrializacion?: true
    act_tras_colas?: true
    act_explotacion?: true
    act_ben_concentracion?: true
    act_refinacion?: true
    act_fundicion?: true
    tipo_explotacion?: true
    verif_cert_liberacion?: true
    nro_res_ministerial?: true
    celular_resp_for101?: true
    celular_resp_tmuestra?: true
  }

  export type OperatorMinAggregateInputType = {
    id?: true
    razon_social?: true
    nit?: true
    nim_niar?: true
    nro_nim?: true
    fecha_exp_nim?: true
    tipo_operador?: true
    nro_personeria?: true
    nro_matricula_seprec?: true
    fecha_exp_seprec?: true
    tipo_doc_creacion?: true
    doc_creacion?: true
    dl_departamento?: true
    dl_municipio?: true
    dl_direccion?: true
    dl_ubicacion?: true
    correo_inst?: true
    tel_fijo?: true
    celular?: true
    celular_2?: true
    act_exploracion?: true
    act_comer_interna?: true
    act_comer_externa?: true
    act_industrializacion?: true
    act_tras_colas?: true
    act_explotacion?: true
    act_ben_concentracion?: true
    act_refinacion?: true
    act_fundicion?: true
    tipo_explotacion?: true
    denominacion_area?: true
    nro_codigo_unico?: true
    nro_cuadricula?: true
    municipio_origen?: true
    nro_ruex?: true
    verif_cert_liberacion?: true
    nro_res_ministerial?: true
    nombre_resp_for101?: true
    ci_resp_for101?: true
    celular_resp_for101?: true
    correo_resp_for101?: true
    nombre_resp_tmuestra?: true
    ci_resp_tmuestra?: true
    celular_resp_tmuestra?: true
    correo_resp_tmuestra?: true
  }

  export type OperatorMaxAggregateInputType = {
    id?: true
    razon_social?: true
    nit?: true
    nim_niar?: true
    nro_nim?: true
    fecha_exp_nim?: true
    tipo_operador?: true
    nro_personeria?: true
    nro_matricula_seprec?: true
    fecha_exp_seprec?: true
    tipo_doc_creacion?: true
    doc_creacion?: true
    dl_departamento?: true
    dl_municipio?: true
    dl_direccion?: true
    dl_ubicacion?: true
    correo_inst?: true
    tel_fijo?: true
    celular?: true
    celular_2?: true
    act_exploracion?: true
    act_comer_interna?: true
    act_comer_externa?: true
    act_industrializacion?: true
    act_tras_colas?: true
    act_explotacion?: true
    act_ben_concentracion?: true
    act_refinacion?: true
    act_fundicion?: true
    tipo_explotacion?: true
    denominacion_area?: true
    nro_codigo_unico?: true
    nro_cuadricula?: true
    municipio_origen?: true
    nro_ruex?: true
    verif_cert_liberacion?: true
    nro_res_ministerial?: true
    nombre_resp_for101?: true
    ci_resp_for101?: true
    celular_resp_for101?: true
    correo_resp_for101?: true
    nombre_resp_tmuestra?: true
    ci_resp_tmuestra?: true
    celular_resp_tmuestra?: true
    correo_resp_tmuestra?: true
  }

  export type OperatorCountAggregateInputType = {
    id?: true
    razon_social?: true
    nit?: true
    nim_niar?: true
    nro_nim?: true
    fecha_exp_nim?: true
    tipo_operador?: true
    nro_personeria?: true
    nro_matricula_seprec?: true
    fecha_exp_seprec?: true
    tipo_doc_creacion?: true
    doc_creacion?: true
    dl_departamento?: true
    dl_municipio?: true
    dl_direccion?: true
    dl_ubicacion?: true
    correo_inst?: true
    tel_fijo?: true
    celular?: true
    celular_2?: true
    act_exploracion?: true
    act_comer_interna?: true
    act_comer_externa?: true
    act_industrializacion?: true
    act_tras_colas?: true
    act_explotacion?: true
    act_ben_concentracion?: true
    act_refinacion?: true
    act_fundicion?: true
    tipo_explotacion?: true
    denominacion_area?: true
    nro_codigo_unico?: true
    nro_cuadricula?: true
    municipio_origen?: true
    nro_ruex?: true
    verif_cert_liberacion?: true
    nro_res_ministerial?: true
    nombre_resp_for101?: true
    ci_resp_for101?: true
    celular_resp_for101?: true
    correo_resp_for101?: true
    nombre_resp_tmuestra?: true
    ci_resp_tmuestra?: true
    celular_resp_tmuestra?: true
    correo_resp_tmuestra?: true
    _all?: true
  }

  export type OperatorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operator to aggregate.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Operators
    **/
    _count?: true | OperatorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OperatorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OperatorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OperatorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OperatorMaxAggregateInputType
  }

  export type GetOperatorAggregateType<T extends OperatorAggregateArgs> = {
        [P in keyof T & keyof AggregateOperator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOperator[P]>
      : GetScalarType<T[P], AggregateOperator[P]>
  }




  export type OperatorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperatorWhereInput
    orderBy?: OperatorOrderByWithAggregationInput | OperatorOrderByWithAggregationInput[]
    by: OperatorScalarFieldEnum[] | OperatorScalarFieldEnum
    having?: OperatorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OperatorCountAggregateInputType | true
    _avg?: OperatorAvgAggregateInputType
    _sum?: OperatorSumAggregateInputType
    _min?: OperatorMinAggregateInputType
    _max?: OperatorMaxAggregateInputType
  }

  export type OperatorGroupByOutputType = {
    id: number
    razon_social: string
    nit: number
    nim_niar: number
    nro_nim: string
    fecha_exp_nim: Date
    tipo_operador: number
    nro_personeria: string | null
    nro_matricula_seprec: string | null
    fecha_exp_seprec: Date | null
    tipo_doc_creacion: number | null
    doc_creacion: string | null
    dl_departamento: number
    dl_municipio: number
    dl_direccion: string
    dl_ubicacion: string
    correo_inst: string | null
    tel_fijo: string | null
    celular: number
    celular_2: number | null
    act_exploracion: number | null
    act_comer_interna: number | null
    act_comer_externa: number | null
    act_industrializacion: number | null
    act_tras_colas: number | null
    act_explotacion: number | null
    act_ben_concentracion: number | null
    act_refinacion: number | null
    act_fundicion: number | null
    tipo_explotacion: number | null
    denominacion_area: string | null
    nro_codigo_unico: string | null
    nro_cuadricula: string | null
    municipio_origen: string | null
    nro_ruex: string | null
    verif_cert_liberacion: number | null
    nro_res_ministerial: number | null
    nombre_resp_for101: string | null
    ci_resp_for101: string | null
    celular_resp_for101: number | null
    correo_resp_for101: string | null
    nombre_resp_tmuestra: string | null
    ci_resp_tmuestra: string | null
    celular_resp_tmuestra: number | null
    correo_resp_tmuestra: string | null
    _count: OperatorCountAggregateOutputType | null
    _avg: OperatorAvgAggregateOutputType | null
    _sum: OperatorSumAggregateOutputType | null
    _min: OperatorMinAggregateOutputType | null
    _max: OperatorMaxAggregateOutputType | null
  }

  type GetOperatorGroupByPayload<T extends OperatorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OperatorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OperatorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OperatorGroupByOutputType[P]>
            : GetScalarType<T[P], OperatorGroupByOutputType[P]>
        }
      >
    >


  export type OperatorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    razon_social?: boolean
    nit?: boolean
    nim_niar?: boolean
    nro_nim?: boolean
    fecha_exp_nim?: boolean
    tipo_operador?: boolean
    nro_personeria?: boolean
    nro_matricula_seprec?: boolean
    fecha_exp_seprec?: boolean
    tipo_doc_creacion?: boolean
    doc_creacion?: boolean
    dl_departamento?: boolean
    dl_municipio?: boolean
    dl_direccion?: boolean
    dl_ubicacion?: boolean
    correo_inst?: boolean
    tel_fijo?: boolean
    celular?: boolean
    celular_2?: boolean
    act_exploracion?: boolean
    act_comer_interna?: boolean
    act_comer_externa?: boolean
    act_industrializacion?: boolean
    act_tras_colas?: boolean
    act_explotacion?: boolean
    act_ben_concentracion?: boolean
    act_refinacion?: boolean
    act_fundicion?: boolean
    tipo_explotacion?: boolean
    denominacion_area?: boolean
    nro_codigo_unico?: boolean
    nro_cuadricula?: boolean
    municipio_origen?: boolean
    nro_ruex?: boolean
    verif_cert_liberacion?: boolean
    nro_res_ministerial?: boolean
    nombre_resp_for101?: boolean
    ci_resp_for101?: boolean
    celular_resp_for101?: boolean
    correo_resp_for101?: boolean
    nombre_resp_tmuestra?: boolean
    ci_resp_tmuestra?: boolean
    celular_resp_tmuestra?: boolean
    correo_resp_tmuestra?: boolean
    samples?: boolean | Operator$samplesArgs<ExtArgs>
    _count?: boolean | OperatorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operator"]>

  export type OperatorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    razon_social?: boolean
    nit?: boolean
    nim_niar?: boolean
    nro_nim?: boolean
    fecha_exp_nim?: boolean
    tipo_operador?: boolean
    nro_personeria?: boolean
    nro_matricula_seprec?: boolean
    fecha_exp_seprec?: boolean
    tipo_doc_creacion?: boolean
    doc_creacion?: boolean
    dl_departamento?: boolean
    dl_municipio?: boolean
    dl_direccion?: boolean
    dl_ubicacion?: boolean
    correo_inst?: boolean
    tel_fijo?: boolean
    celular?: boolean
    celular_2?: boolean
    act_exploracion?: boolean
    act_comer_interna?: boolean
    act_comer_externa?: boolean
    act_industrializacion?: boolean
    act_tras_colas?: boolean
    act_explotacion?: boolean
    act_ben_concentracion?: boolean
    act_refinacion?: boolean
    act_fundicion?: boolean
    tipo_explotacion?: boolean
    denominacion_area?: boolean
    nro_codigo_unico?: boolean
    nro_cuadricula?: boolean
    municipio_origen?: boolean
    nro_ruex?: boolean
    verif_cert_liberacion?: boolean
    nro_res_ministerial?: boolean
    nombre_resp_for101?: boolean
    ci_resp_for101?: boolean
    celular_resp_for101?: boolean
    correo_resp_for101?: boolean
    nombre_resp_tmuestra?: boolean
    ci_resp_tmuestra?: boolean
    celular_resp_tmuestra?: boolean
    correo_resp_tmuestra?: boolean
  }, ExtArgs["result"]["operator"]>

  export type OperatorSelectScalar = {
    id?: boolean
    razon_social?: boolean
    nit?: boolean
    nim_niar?: boolean
    nro_nim?: boolean
    fecha_exp_nim?: boolean
    tipo_operador?: boolean
    nro_personeria?: boolean
    nro_matricula_seprec?: boolean
    fecha_exp_seprec?: boolean
    tipo_doc_creacion?: boolean
    doc_creacion?: boolean
    dl_departamento?: boolean
    dl_municipio?: boolean
    dl_direccion?: boolean
    dl_ubicacion?: boolean
    correo_inst?: boolean
    tel_fijo?: boolean
    celular?: boolean
    celular_2?: boolean
    act_exploracion?: boolean
    act_comer_interna?: boolean
    act_comer_externa?: boolean
    act_industrializacion?: boolean
    act_tras_colas?: boolean
    act_explotacion?: boolean
    act_ben_concentracion?: boolean
    act_refinacion?: boolean
    act_fundicion?: boolean
    tipo_explotacion?: boolean
    denominacion_area?: boolean
    nro_codigo_unico?: boolean
    nro_cuadricula?: boolean
    municipio_origen?: boolean
    nro_ruex?: boolean
    verif_cert_liberacion?: boolean
    nro_res_ministerial?: boolean
    nombre_resp_for101?: boolean
    ci_resp_for101?: boolean
    celular_resp_for101?: boolean
    correo_resp_for101?: boolean
    nombre_resp_tmuestra?: boolean
    ci_resp_tmuestra?: boolean
    celular_resp_tmuestra?: boolean
    correo_resp_tmuestra?: boolean
  }

  export type OperatorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    samples?: boolean | Operator$samplesArgs<ExtArgs>
    _count?: boolean | OperatorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OperatorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OperatorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Operator"
    objects: {
      samples: Prisma.$SamplePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      razon_social: string
      nit: number
      nim_niar: number
      nro_nim: string
      fecha_exp_nim: Date
      tipo_operador: number
      nro_personeria: string | null
      nro_matricula_seprec: string | null
      fecha_exp_seprec: Date | null
      tipo_doc_creacion: number | null
      doc_creacion: string | null
      dl_departamento: number
      dl_municipio: number
      dl_direccion: string
      dl_ubicacion: string
      correo_inst: string | null
      tel_fijo: string | null
      celular: number
      celular_2: number | null
      act_exploracion: number | null
      act_comer_interna: number | null
      act_comer_externa: number | null
      act_industrializacion: number | null
      act_tras_colas: number | null
      act_explotacion: number | null
      act_ben_concentracion: number | null
      act_refinacion: number | null
      act_fundicion: number | null
      tipo_explotacion: number | null
      denominacion_area: string | null
      nro_codigo_unico: string | null
      nro_cuadricula: string | null
      municipio_origen: string | null
      nro_ruex: string | null
      verif_cert_liberacion: number | null
      nro_res_ministerial: number | null
      nombre_resp_for101: string | null
      ci_resp_for101: string | null
      celular_resp_for101: number | null
      correo_resp_for101: string | null
      nombre_resp_tmuestra: string | null
      ci_resp_tmuestra: string | null
      celular_resp_tmuestra: number | null
      correo_resp_tmuestra: string | null
    }, ExtArgs["result"]["operator"]>
    composites: {}
  }

  type OperatorGetPayload<S extends boolean | null | undefined | OperatorDefaultArgs> = $Result.GetResult<Prisma.$OperatorPayload, S>

  type OperatorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OperatorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OperatorCountAggregateInputType | true
    }

  export interface OperatorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Operator'], meta: { name: 'Operator' } }
    /**
     * Find zero or one Operator that matches the filter.
     * @param {OperatorFindUniqueArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OperatorFindUniqueArgs>(args: SelectSubset<T, OperatorFindUniqueArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Operator that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OperatorFindUniqueOrThrowArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OperatorFindUniqueOrThrowArgs>(args: SelectSubset<T, OperatorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Operator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorFindFirstArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OperatorFindFirstArgs>(args?: SelectSubset<T, OperatorFindFirstArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Operator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorFindFirstOrThrowArgs} args - Arguments to find a Operator
     * @example
     * // Get one Operator
     * const operator = await prisma.operator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OperatorFindFirstOrThrowArgs>(args?: SelectSubset<T, OperatorFindFirstOrThrowArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Operators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Operators
     * const operators = await prisma.operator.findMany()
     * 
     * // Get first 10 Operators
     * const operators = await prisma.operator.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const operatorWithIdOnly = await prisma.operator.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OperatorFindManyArgs>(args?: SelectSubset<T, OperatorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Operator.
     * @param {OperatorCreateArgs} args - Arguments to create a Operator.
     * @example
     * // Create one Operator
     * const Operator = await prisma.operator.create({
     *   data: {
     *     // ... data to create a Operator
     *   }
     * })
     * 
     */
    create<T extends OperatorCreateArgs>(args: SelectSubset<T, OperatorCreateArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Operators.
     * @param {OperatorCreateManyArgs} args - Arguments to create many Operators.
     * @example
     * // Create many Operators
     * const operator = await prisma.operator.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OperatorCreateManyArgs>(args?: SelectSubset<T, OperatorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Operators and returns the data saved in the database.
     * @param {OperatorCreateManyAndReturnArgs} args - Arguments to create many Operators.
     * @example
     * // Create many Operators
     * const operator = await prisma.operator.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Operators and only return the `id`
     * const operatorWithIdOnly = await prisma.operator.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OperatorCreateManyAndReturnArgs>(args?: SelectSubset<T, OperatorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Operator.
     * @param {OperatorDeleteArgs} args - Arguments to delete one Operator.
     * @example
     * // Delete one Operator
     * const Operator = await prisma.operator.delete({
     *   where: {
     *     // ... filter to delete one Operator
     *   }
     * })
     * 
     */
    delete<T extends OperatorDeleteArgs>(args: SelectSubset<T, OperatorDeleteArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Operator.
     * @param {OperatorUpdateArgs} args - Arguments to update one Operator.
     * @example
     * // Update one Operator
     * const operator = await prisma.operator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OperatorUpdateArgs>(args: SelectSubset<T, OperatorUpdateArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Operators.
     * @param {OperatorDeleteManyArgs} args - Arguments to filter Operators to delete.
     * @example
     * // Delete a few Operators
     * const { count } = await prisma.operator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OperatorDeleteManyArgs>(args?: SelectSubset<T, OperatorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Operators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Operators
     * const operator = await prisma.operator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OperatorUpdateManyArgs>(args: SelectSubset<T, OperatorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Operator.
     * @param {OperatorUpsertArgs} args - Arguments to update or create a Operator.
     * @example
     * // Update or create a Operator
     * const operator = await prisma.operator.upsert({
     *   create: {
     *     // ... data to create a Operator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Operator we want to update
     *   }
     * })
     */
    upsert<T extends OperatorUpsertArgs>(args: SelectSubset<T, OperatorUpsertArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Operators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorCountArgs} args - Arguments to filter Operators to count.
     * @example
     * // Count the number of Operators
     * const count = await prisma.operator.count({
     *   where: {
     *     // ... the filter for the Operators we want to count
     *   }
     * })
    **/
    count<T extends OperatorCountArgs>(
      args?: Subset<T, OperatorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OperatorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Operator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OperatorAggregateArgs>(args: Subset<T, OperatorAggregateArgs>): Prisma.PrismaPromise<GetOperatorAggregateType<T>>

    /**
     * Group by Operator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OperatorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OperatorGroupByArgs['orderBy'] }
        : { orderBy?: OperatorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OperatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Operator model
   */
  readonly fields: OperatorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Operator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OperatorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    samples<T extends Operator$samplesArgs<ExtArgs> = {}>(args?: Subset<T, Operator$samplesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Operator model
   */ 
  interface OperatorFieldRefs {
    readonly id: FieldRef<"Operator", 'Int'>
    readonly razon_social: FieldRef<"Operator", 'String'>
    readonly nit: FieldRef<"Operator", 'Int'>
    readonly nim_niar: FieldRef<"Operator", 'Int'>
    readonly nro_nim: FieldRef<"Operator", 'String'>
    readonly fecha_exp_nim: FieldRef<"Operator", 'DateTime'>
    readonly tipo_operador: FieldRef<"Operator", 'Int'>
    readonly nro_personeria: FieldRef<"Operator", 'String'>
    readonly nro_matricula_seprec: FieldRef<"Operator", 'String'>
    readonly fecha_exp_seprec: FieldRef<"Operator", 'DateTime'>
    readonly tipo_doc_creacion: FieldRef<"Operator", 'Int'>
    readonly doc_creacion: FieldRef<"Operator", 'String'>
    readonly dl_departamento: FieldRef<"Operator", 'Int'>
    readonly dl_municipio: FieldRef<"Operator", 'Int'>
    readonly dl_direccion: FieldRef<"Operator", 'String'>
    readonly dl_ubicacion: FieldRef<"Operator", 'String'>
    readonly correo_inst: FieldRef<"Operator", 'String'>
    readonly tel_fijo: FieldRef<"Operator", 'String'>
    readonly celular: FieldRef<"Operator", 'Int'>
    readonly celular_2: FieldRef<"Operator", 'Int'>
    readonly act_exploracion: FieldRef<"Operator", 'Int'>
    readonly act_comer_interna: FieldRef<"Operator", 'Int'>
    readonly act_comer_externa: FieldRef<"Operator", 'Int'>
    readonly act_industrializacion: FieldRef<"Operator", 'Int'>
    readonly act_tras_colas: FieldRef<"Operator", 'Int'>
    readonly act_explotacion: FieldRef<"Operator", 'Int'>
    readonly act_ben_concentracion: FieldRef<"Operator", 'Int'>
    readonly act_refinacion: FieldRef<"Operator", 'Int'>
    readonly act_fundicion: FieldRef<"Operator", 'Int'>
    readonly tipo_explotacion: FieldRef<"Operator", 'Int'>
    readonly denominacion_area: FieldRef<"Operator", 'String'>
    readonly nro_codigo_unico: FieldRef<"Operator", 'String'>
    readonly nro_cuadricula: FieldRef<"Operator", 'String'>
    readonly municipio_origen: FieldRef<"Operator", 'String'>
    readonly nro_ruex: FieldRef<"Operator", 'String'>
    readonly verif_cert_liberacion: FieldRef<"Operator", 'Int'>
    readonly nro_res_ministerial: FieldRef<"Operator", 'Int'>
    readonly nombre_resp_for101: FieldRef<"Operator", 'String'>
    readonly ci_resp_for101: FieldRef<"Operator", 'String'>
    readonly celular_resp_for101: FieldRef<"Operator", 'Int'>
    readonly correo_resp_for101: FieldRef<"Operator", 'String'>
    readonly nombre_resp_tmuestra: FieldRef<"Operator", 'String'>
    readonly ci_resp_tmuestra: FieldRef<"Operator", 'String'>
    readonly celular_resp_tmuestra: FieldRef<"Operator", 'Int'>
    readonly correo_resp_tmuestra: FieldRef<"Operator", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Operator findUnique
   */
  export type OperatorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator findUniqueOrThrow
   */
  export type OperatorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator findFirst
   */
  export type OperatorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operators.
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operators.
     */
    distinct?: OperatorScalarFieldEnum | OperatorScalarFieldEnum[]
  }

  /**
   * Operator findFirstOrThrow
   */
  export type OperatorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operator to fetch.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Operators.
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Operators.
     */
    distinct?: OperatorScalarFieldEnum | OperatorScalarFieldEnum[]
  }

  /**
   * Operator findMany
   */
  export type OperatorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter, which Operators to fetch.
     */
    where?: OperatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Operators to fetch.
     */
    orderBy?: OperatorOrderByWithRelationInput | OperatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Operators.
     */
    cursor?: OperatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Operators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Operators.
     */
    skip?: number
    distinct?: OperatorScalarFieldEnum | OperatorScalarFieldEnum[]
  }

  /**
   * Operator create
   */
  export type OperatorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * The data needed to create a Operator.
     */
    data: XOR<OperatorCreateInput, OperatorUncheckedCreateInput>
  }

  /**
   * Operator createMany
   */
  export type OperatorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Operators.
     */
    data: OperatorCreateManyInput | OperatorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Operator createManyAndReturn
   */
  export type OperatorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Operators.
     */
    data: OperatorCreateManyInput | OperatorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Operator update
   */
  export type OperatorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * The data needed to update a Operator.
     */
    data: XOR<OperatorUpdateInput, OperatorUncheckedUpdateInput>
    /**
     * Choose, which Operator to update.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator updateMany
   */
  export type OperatorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Operators.
     */
    data: XOR<OperatorUpdateManyMutationInput, OperatorUncheckedUpdateManyInput>
    /**
     * Filter which Operators to update
     */
    where?: OperatorWhereInput
  }

  /**
   * Operator upsert
   */
  export type OperatorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * The filter to search for the Operator to update in case it exists.
     */
    where: OperatorWhereUniqueInput
    /**
     * In case the Operator found by the `where` argument doesn't exist, create a new Operator with this data.
     */
    create: XOR<OperatorCreateInput, OperatorUncheckedCreateInput>
    /**
     * In case the Operator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OperatorUpdateInput, OperatorUncheckedUpdateInput>
  }

  /**
   * Operator delete
   */
  export type OperatorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
    /**
     * Filter which Operator to delete.
     */
    where: OperatorWhereUniqueInput
  }

  /**
   * Operator deleteMany
   */
  export type OperatorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Operators to delete
     */
    where?: OperatorWhereInput
  }

  /**
   * Operator.samples
   */
  export type Operator$samplesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    where?: SampleWhereInput
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    cursor?: SampleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }

  /**
   * Operator without action
   */
  export type OperatorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Operator
     */
    select?: OperatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatorInclude<ExtArgs> | null
  }


  /**
   * Model Sample
   */

  export type AggregateSample = {
    _count: SampleCountAggregateOutputType | null
    _avg: SampleAvgAggregateOutputType | null
    _sum: SampleSumAggregateOutputType | null
    _min: SampleMinAggregateOutputType | null
    _max: SampleMaxAggregateOutputType | null
  }

  export type SampleAvgAggregateOutputType = {
    id: number | null
    id_operador: number | null
    tipo_muestra: number | null
    presentacion: number | null
    sacos: number | null
    camiones: number | null
    peso_neto: Decimal | null
    peso_parcial: Decimal | null
    id_municipio: number | null
    tipo_agranel: number | null
    tipo_emsacado: number | null
    tipo_lingotes: number | null
    tipo_sal: number | null
    tipo_otr: number | null
    estado: number | null
    formExtId: number | null
  }

  export type SampleSumAggregateOutputType = {
    id: number | null
    id_operador: number | null
    tipo_muestra: number | null
    presentacion: number | null
    sacos: number | null
    camiones: number | null
    peso_neto: Decimal | null
    peso_parcial: Decimal | null
    id_municipio: number | null
    tipo_agranel: number | null
    tipo_emsacado: number | null
    tipo_lingotes: number | null
    tipo_sal: number | null
    tipo_otr: number | null
    estado: number | null
    formExtId: number | null
  }

  export type SampleMinAggregateOutputType = {
    id: number | null
    fecha_emision: Date | null
    ubi_geografica: string | null
    lugar_verificacion: string | null
    id_operador: number | null
    responsable: string | null
    lotes: string | null
    tipo_muestra: number | null
    presentacion: number | null
    sacos: number | null
    camiones: number | null
    peso_neto: Decimal | null
    peso_parcial: Decimal | null
    id_municipio: number | null
    senerecom: string | null
    tipo_agranel: number | null
    tipo_emsacado: number | null
    tipo_lingotes: number | null
    tipo_sal: number | null
    tipo_otr: number | null
    observaciones: string | null
    estado: number | null
    formExtId: number | null
  }

  export type SampleMaxAggregateOutputType = {
    id: number | null
    fecha_emision: Date | null
    ubi_geografica: string | null
    lugar_verificacion: string | null
    id_operador: number | null
    responsable: string | null
    lotes: string | null
    tipo_muestra: number | null
    presentacion: number | null
    sacos: number | null
    camiones: number | null
    peso_neto: Decimal | null
    peso_parcial: Decimal | null
    id_municipio: number | null
    senerecom: string | null
    tipo_agranel: number | null
    tipo_emsacado: number | null
    tipo_lingotes: number | null
    tipo_sal: number | null
    tipo_otr: number | null
    observaciones: string | null
    estado: number | null
    formExtId: number | null
  }

  export type SampleCountAggregateOutputType = {
    id: number
    fecha_emision: number
    ubi_geografica: number
    lugar_verificacion: number
    id_operador: number
    responsable: number
    lotes: number
    tipo_muestra: number
    presentacion: number
    sacos: number
    camiones: number
    peso_neto: number
    peso_parcial: number
    id_municipio: number
    senerecom: number
    tipo_agranel: number
    tipo_emsacado: number
    tipo_lingotes: number
    tipo_sal: number
    tipo_otr: number
    observaciones: number
    estado: number
    formExtId: number
    _all: number
  }


  export type SampleAvgAggregateInputType = {
    id?: true
    id_operador?: true
    tipo_muestra?: true
    presentacion?: true
    sacos?: true
    camiones?: true
    peso_neto?: true
    peso_parcial?: true
    id_municipio?: true
    tipo_agranel?: true
    tipo_emsacado?: true
    tipo_lingotes?: true
    tipo_sal?: true
    tipo_otr?: true
    estado?: true
    formExtId?: true
  }

  export type SampleSumAggregateInputType = {
    id?: true
    id_operador?: true
    tipo_muestra?: true
    presentacion?: true
    sacos?: true
    camiones?: true
    peso_neto?: true
    peso_parcial?: true
    id_municipio?: true
    tipo_agranel?: true
    tipo_emsacado?: true
    tipo_lingotes?: true
    tipo_sal?: true
    tipo_otr?: true
    estado?: true
    formExtId?: true
  }

  export type SampleMinAggregateInputType = {
    id?: true
    fecha_emision?: true
    ubi_geografica?: true
    lugar_verificacion?: true
    id_operador?: true
    responsable?: true
    lotes?: true
    tipo_muestra?: true
    presentacion?: true
    sacos?: true
    camiones?: true
    peso_neto?: true
    peso_parcial?: true
    id_municipio?: true
    senerecom?: true
    tipo_agranel?: true
    tipo_emsacado?: true
    tipo_lingotes?: true
    tipo_sal?: true
    tipo_otr?: true
    observaciones?: true
    estado?: true
    formExtId?: true
  }

  export type SampleMaxAggregateInputType = {
    id?: true
    fecha_emision?: true
    ubi_geografica?: true
    lugar_verificacion?: true
    id_operador?: true
    responsable?: true
    lotes?: true
    tipo_muestra?: true
    presentacion?: true
    sacos?: true
    camiones?: true
    peso_neto?: true
    peso_parcial?: true
    id_municipio?: true
    senerecom?: true
    tipo_agranel?: true
    tipo_emsacado?: true
    tipo_lingotes?: true
    tipo_sal?: true
    tipo_otr?: true
    observaciones?: true
    estado?: true
    formExtId?: true
  }

  export type SampleCountAggregateInputType = {
    id?: true
    fecha_emision?: true
    ubi_geografica?: true
    lugar_verificacion?: true
    id_operador?: true
    responsable?: true
    lotes?: true
    tipo_muestra?: true
    presentacion?: true
    sacos?: true
    camiones?: true
    peso_neto?: true
    peso_parcial?: true
    id_municipio?: true
    senerecom?: true
    tipo_agranel?: true
    tipo_emsacado?: true
    tipo_lingotes?: true
    tipo_sal?: true
    tipo_otr?: true
    observaciones?: true
    estado?: true
    formExtId?: true
    _all?: true
  }

  export type SampleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sample to aggregate.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Samples
    **/
    _count?: true | SampleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SampleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SampleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SampleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SampleMaxAggregateInputType
  }

  export type GetSampleAggregateType<T extends SampleAggregateArgs> = {
        [P in keyof T & keyof AggregateSample]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSample[P]>
      : GetScalarType<T[P], AggregateSample[P]>
  }




  export type SampleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleWhereInput
    orderBy?: SampleOrderByWithAggregationInput | SampleOrderByWithAggregationInput[]
    by: SampleScalarFieldEnum[] | SampleScalarFieldEnum
    having?: SampleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SampleCountAggregateInputType | true
    _avg?: SampleAvgAggregateInputType
    _sum?: SampleSumAggregateInputType
    _min?: SampleMinAggregateInputType
    _max?: SampleMaxAggregateInputType
  }

  export type SampleGroupByOutputType = {
    id: number
    fecha_emision: Date
    ubi_geografica: string
    lugar_verificacion: string
    id_operador: number
    responsable: string
    lotes: string
    tipo_muestra: number
    presentacion: number
    sacos: number
    camiones: number
    peso_neto: Decimal
    peso_parcial: Decimal
    id_municipio: number
    senerecom: string
    tipo_agranel: number | null
    tipo_emsacado: number | null
    tipo_lingotes: number | null
    tipo_sal: number | null
    tipo_otr: number | null
    observaciones: string | null
    estado: number
    formExtId: number | null
    _count: SampleCountAggregateOutputType | null
    _avg: SampleAvgAggregateOutputType | null
    _sum: SampleSumAggregateOutputType | null
    _min: SampleMinAggregateOutputType | null
    _max: SampleMaxAggregateOutputType | null
  }

  type GetSampleGroupByPayload<T extends SampleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SampleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SampleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SampleGroupByOutputType[P]>
            : GetScalarType<T[P], SampleGroupByOutputType[P]>
        }
      >
    >


  export type SampleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha_emision?: boolean
    ubi_geografica?: boolean
    lugar_verificacion?: boolean
    id_operador?: boolean
    responsable?: boolean
    lotes?: boolean
    tipo_muestra?: boolean
    presentacion?: boolean
    sacos?: boolean
    camiones?: boolean
    peso_neto?: boolean
    peso_parcial?: boolean
    id_municipio?: boolean
    senerecom?: boolean
    tipo_agranel?: boolean
    tipo_emsacado?: boolean
    tipo_lingotes?: boolean
    tipo_sal?: boolean
    tipo_otr?: boolean
    observaciones?: boolean
    estado?: boolean
    formExtId?: boolean
    operador?: boolean | OperatorDefaultArgs<ExtArgs>
    minerales?: boolean | Sample$mineralesArgs<ExtArgs>
    formExt?: boolean | Sample$formExtArgs<ExtArgs>
    _count?: boolean | SampleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sample"]>

  export type SampleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha_emision?: boolean
    ubi_geografica?: boolean
    lugar_verificacion?: boolean
    id_operador?: boolean
    responsable?: boolean
    lotes?: boolean
    tipo_muestra?: boolean
    presentacion?: boolean
    sacos?: boolean
    camiones?: boolean
    peso_neto?: boolean
    peso_parcial?: boolean
    id_municipio?: boolean
    senerecom?: boolean
    tipo_agranel?: boolean
    tipo_emsacado?: boolean
    tipo_lingotes?: boolean
    tipo_sal?: boolean
    tipo_otr?: boolean
    observaciones?: boolean
    estado?: boolean
    formExtId?: boolean
    operador?: boolean | OperatorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sample"]>

  export type SampleSelectScalar = {
    id?: boolean
    fecha_emision?: boolean
    ubi_geografica?: boolean
    lugar_verificacion?: boolean
    id_operador?: boolean
    responsable?: boolean
    lotes?: boolean
    tipo_muestra?: boolean
    presentacion?: boolean
    sacos?: boolean
    camiones?: boolean
    peso_neto?: boolean
    peso_parcial?: boolean
    id_municipio?: boolean
    senerecom?: boolean
    tipo_agranel?: boolean
    tipo_emsacado?: boolean
    tipo_lingotes?: boolean
    tipo_sal?: boolean
    tipo_otr?: boolean
    observaciones?: boolean
    estado?: boolean
    formExtId?: boolean
  }

  export type SampleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    operador?: boolean | OperatorDefaultArgs<ExtArgs>
    minerales?: boolean | Sample$mineralesArgs<ExtArgs>
    formExt?: boolean | Sample$formExtArgs<ExtArgs>
    _count?: boolean | SampleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SampleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    operador?: boolean | OperatorDefaultArgs<ExtArgs>
  }

  export type $SamplePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sample"
    objects: {
      operador: Prisma.$OperatorPayload<ExtArgs>
      minerales: Prisma.$SampleMineralPayload<ExtArgs>[]
      formExt: Prisma.$FormExtPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fecha_emision: Date
      ubi_geografica: string
      lugar_verificacion: string
      id_operador: number
      responsable: string
      lotes: string
      tipo_muestra: number
      presentacion: number
      sacos: number
      camiones: number
      peso_neto: Prisma.Decimal
      peso_parcial: Prisma.Decimal
      id_municipio: number
      senerecom: string
      tipo_agranel: number | null
      tipo_emsacado: number | null
      tipo_lingotes: number | null
      tipo_sal: number | null
      tipo_otr: number | null
      observaciones: string | null
      estado: number
      formExtId: number | null
    }, ExtArgs["result"]["sample"]>
    composites: {}
  }

  type SampleGetPayload<S extends boolean | null | undefined | SampleDefaultArgs> = $Result.GetResult<Prisma.$SamplePayload, S>

  type SampleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SampleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SampleCountAggregateInputType | true
    }

  export interface SampleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sample'], meta: { name: 'Sample' } }
    /**
     * Find zero or one Sample that matches the filter.
     * @param {SampleFindUniqueArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SampleFindUniqueArgs>(args: SelectSubset<T, SampleFindUniqueArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Sample that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SampleFindUniqueOrThrowArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SampleFindUniqueOrThrowArgs>(args: SelectSubset<T, SampleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Sample that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleFindFirstArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SampleFindFirstArgs>(args?: SelectSubset<T, SampleFindFirstArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Sample that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleFindFirstOrThrowArgs} args - Arguments to find a Sample
     * @example
     * // Get one Sample
     * const sample = await prisma.sample.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SampleFindFirstOrThrowArgs>(args?: SelectSubset<T, SampleFindFirstOrThrowArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Samples that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Samples
     * const samples = await prisma.sample.findMany()
     * 
     * // Get first 10 Samples
     * const samples = await prisma.sample.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sampleWithIdOnly = await prisma.sample.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SampleFindManyArgs>(args?: SelectSubset<T, SampleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Sample.
     * @param {SampleCreateArgs} args - Arguments to create a Sample.
     * @example
     * // Create one Sample
     * const Sample = await prisma.sample.create({
     *   data: {
     *     // ... data to create a Sample
     *   }
     * })
     * 
     */
    create<T extends SampleCreateArgs>(args: SelectSubset<T, SampleCreateArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Samples.
     * @param {SampleCreateManyArgs} args - Arguments to create many Samples.
     * @example
     * // Create many Samples
     * const sample = await prisma.sample.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SampleCreateManyArgs>(args?: SelectSubset<T, SampleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Samples and returns the data saved in the database.
     * @param {SampleCreateManyAndReturnArgs} args - Arguments to create many Samples.
     * @example
     * // Create many Samples
     * const sample = await prisma.sample.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Samples and only return the `id`
     * const sampleWithIdOnly = await prisma.sample.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SampleCreateManyAndReturnArgs>(args?: SelectSubset<T, SampleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Sample.
     * @param {SampleDeleteArgs} args - Arguments to delete one Sample.
     * @example
     * // Delete one Sample
     * const Sample = await prisma.sample.delete({
     *   where: {
     *     // ... filter to delete one Sample
     *   }
     * })
     * 
     */
    delete<T extends SampleDeleteArgs>(args: SelectSubset<T, SampleDeleteArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Sample.
     * @param {SampleUpdateArgs} args - Arguments to update one Sample.
     * @example
     * // Update one Sample
     * const sample = await prisma.sample.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SampleUpdateArgs>(args: SelectSubset<T, SampleUpdateArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Samples.
     * @param {SampleDeleteManyArgs} args - Arguments to filter Samples to delete.
     * @example
     * // Delete a few Samples
     * const { count } = await prisma.sample.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SampleDeleteManyArgs>(args?: SelectSubset<T, SampleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Samples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Samples
     * const sample = await prisma.sample.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SampleUpdateManyArgs>(args: SelectSubset<T, SampleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sample.
     * @param {SampleUpsertArgs} args - Arguments to update or create a Sample.
     * @example
     * // Update or create a Sample
     * const sample = await prisma.sample.upsert({
     *   create: {
     *     // ... data to create a Sample
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sample we want to update
     *   }
     * })
     */
    upsert<T extends SampleUpsertArgs>(args: SelectSubset<T, SampleUpsertArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Samples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleCountArgs} args - Arguments to filter Samples to count.
     * @example
     * // Count the number of Samples
     * const count = await prisma.sample.count({
     *   where: {
     *     // ... the filter for the Samples we want to count
     *   }
     * })
    **/
    count<T extends SampleCountArgs>(
      args?: Subset<T, SampleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SampleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sample.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SampleAggregateArgs>(args: Subset<T, SampleAggregateArgs>): Prisma.PrismaPromise<GetSampleAggregateType<T>>

    /**
     * Group by Sample.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SampleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SampleGroupByArgs['orderBy'] }
        : { orderBy?: SampleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SampleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSampleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sample model
   */
  readonly fields: SampleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sample.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SampleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    operador<T extends OperatorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OperatorDefaultArgs<ExtArgs>>): Prisma__OperatorClient<$Result.GetResult<Prisma.$OperatorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    minerales<T extends Sample$mineralesArgs<ExtArgs> = {}>(args?: Subset<T, Sample$mineralesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleMineralPayload<ExtArgs>, T, "findMany"> | Null>
    formExt<T extends Sample$formExtArgs<ExtArgs> = {}>(args?: Subset<T, Sample$formExtArgs<ExtArgs>>): Prisma__FormExtClient<$Result.GetResult<Prisma.$FormExtPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sample model
   */ 
  interface SampleFieldRefs {
    readonly id: FieldRef<"Sample", 'Int'>
    readonly fecha_emision: FieldRef<"Sample", 'DateTime'>
    readonly ubi_geografica: FieldRef<"Sample", 'String'>
    readonly lugar_verificacion: FieldRef<"Sample", 'String'>
    readonly id_operador: FieldRef<"Sample", 'Int'>
    readonly responsable: FieldRef<"Sample", 'String'>
    readonly lotes: FieldRef<"Sample", 'String'>
    readonly tipo_muestra: FieldRef<"Sample", 'Int'>
    readonly presentacion: FieldRef<"Sample", 'Int'>
    readonly sacos: FieldRef<"Sample", 'Int'>
    readonly camiones: FieldRef<"Sample", 'Int'>
    readonly peso_neto: FieldRef<"Sample", 'Decimal'>
    readonly peso_parcial: FieldRef<"Sample", 'Decimal'>
    readonly id_municipio: FieldRef<"Sample", 'Int'>
    readonly senerecom: FieldRef<"Sample", 'String'>
    readonly tipo_agranel: FieldRef<"Sample", 'Int'>
    readonly tipo_emsacado: FieldRef<"Sample", 'Int'>
    readonly tipo_lingotes: FieldRef<"Sample", 'Int'>
    readonly tipo_sal: FieldRef<"Sample", 'Int'>
    readonly tipo_otr: FieldRef<"Sample", 'Int'>
    readonly observaciones: FieldRef<"Sample", 'String'>
    readonly estado: FieldRef<"Sample", 'Int'>
    readonly formExtId: FieldRef<"Sample", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Sample findUnique
   */
  export type SampleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where: SampleWhereUniqueInput
  }

  /**
   * Sample findUniqueOrThrow
   */
  export type SampleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where: SampleWhereUniqueInput
  }

  /**
   * Sample findFirst
   */
  export type SampleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Samples.
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Samples.
     */
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }

  /**
   * Sample findFirstOrThrow
   */
  export type SampleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Sample to fetch.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Samples.
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Samples.
     */
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }

  /**
   * Sample findMany
   */
  export type SampleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter, which Samples to fetch.
     */
    where?: SampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Samples to fetch.
     */
    orderBy?: SampleOrderByWithRelationInput | SampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Samples.
     */
    cursor?: SampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Samples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Samples.
     */
    skip?: number
    distinct?: SampleScalarFieldEnum | SampleScalarFieldEnum[]
  }

  /**
   * Sample create
   */
  export type SampleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * The data needed to create a Sample.
     */
    data: XOR<SampleCreateInput, SampleUncheckedCreateInput>
  }

  /**
   * Sample createMany
   */
  export type SampleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Samples.
     */
    data: SampleCreateManyInput | SampleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sample createManyAndReturn
   */
  export type SampleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Samples.
     */
    data: SampleCreateManyInput | SampleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sample update
   */
  export type SampleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * The data needed to update a Sample.
     */
    data: XOR<SampleUpdateInput, SampleUncheckedUpdateInput>
    /**
     * Choose, which Sample to update.
     */
    where: SampleWhereUniqueInput
  }

  /**
   * Sample updateMany
   */
  export type SampleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Samples.
     */
    data: XOR<SampleUpdateManyMutationInput, SampleUncheckedUpdateManyInput>
    /**
     * Filter which Samples to update
     */
    where?: SampleWhereInput
  }

  /**
   * Sample upsert
   */
  export type SampleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * The filter to search for the Sample to update in case it exists.
     */
    where: SampleWhereUniqueInput
    /**
     * In case the Sample found by the `where` argument doesn't exist, create a new Sample with this data.
     */
    create: XOR<SampleCreateInput, SampleUncheckedCreateInput>
    /**
     * In case the Sample was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SampleUpdateInput, SampleUncheckedUpdateInput>
  }

  /**
   * Sample delete
   */
  export type SampleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
    /**
     * Filter which Sample to delete.
     */
    where: SampleWhereUniqueInput
  }

  /**
   * Sample deleteMany
   */
  export type SampleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Samples to delete
     */
    where?: SampleWhereInput
  }

  /**
   * Sample.minerales
   */
  export type Sample$mineralesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleMineral
     */
    select?: SampleMineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleMineralInclude<ExtArgs> | null
    where?: SampleMineralWhereInput
    orderBy?: SampleMineralOrderByWithRelationInput | SampleMineralOrderByWithRelationInput[]
    cursor?: SampleMineralWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleMineralScalarFieldEnum | SampleMineralScalarFieldEnum[]
  }

  /**
   * Sample.formExt
   */
  export type Sample$formExtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormExt
     */
    select?: FormExtSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormExtInclude<ExtArgs> | null
    where?: FormExtWhereInput
  }

  /**
   * Sample without action
   */
  export type SampleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sample
     */
    select?: SampleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleInclude<ExtArgs> | null
  }


  /**
   * Model Mineral
   */

  export type AggregateMineral = {
    _count: MineralCountAggregateOutputType | null
    _avg: MineralAvgAggregateOutputType | null
    _sum: MineralSumAggregateOutputType | null
    _min: MineralMinAggregateOutputType | null
    _max: MineralMaxAggregateOutputType | null
  }

  export type MineralAvgAggregateOutputType = {
    id: number | null
    estado: number | null
  }

  export type MineralSumAggregateOutputType = {
    id: number | null
    estado: number | null
  }

  export type MineralMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    sigla: string | null
    descripcion: string | null
    estado: number | null
  }

  export type MineralMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    sigla: string | null
    descripcion: string | null
    estado: number | null
  }

  export type MineralCountAggregateOutputType = {
    id: number
    nombre: number
    sigla: number
    descripcion: number
    estado: number
    _all: number
  }


  export type MineralAvgAggregateInputType = {
    id?: true
    estado?: true
  }

  export type MineralSumAggregateInputType = {
    id?: true
    estado?: true
  }

  export type MineralMinAggregateInputType = {
    id?: true
    nombre?: true
    sigla?: true
    descripcion?: true
    estado?: true
  }

  export type MineralMaxAggregateInputType = {
    id?: true
    nombre?: true
    sigla?: true
    descripcion?: true
    estado?: true
  }

  export type MineralCountAggregateInputType = {
    id?: true
    nombre?: true
    sigla?: true
    descripcion?: true
    estado?: true
    _all?: true
  }

  export type MineralAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mineral to aggregate.
     */
    where?: MineralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Minerals to fetch.
     */
    orderBy?: MineralOrderByWithRelationInput | MineralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MineralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Minerals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Minerals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Minerals
    **/
    _count?: true | MineralCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MineralAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MineralSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MineralMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MineralMaxAggregateInputType
  }

  export type GetMineralAggregateType<T extends MineralAggregateArgs> = {
        [P in keyof T & keyof AggregateMineral]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMineral[P]>
      : GetScalarType<T[P], AggregateMineral[P]>
  }




  export type MineralGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MineralWhereInput
    orderBy?: MineralOrderByWithAggregationInput | MineralOrderByWithAggregationInput[]
    by: MineralScalarFieldEnum[] | MineralScalarFieldEnum
    having?: MineralScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MineralCountAggregateInputType | true
    _avg?: MineralAvgAggregateInputType
    _sum?: MineralSumAggregateInputType
    _min?: MineralMinAggregateInputType
    _max?: MineralMaxAggregateInputType
  }

  export type MineralGroupByOutputType = {
    id: number
    nombre: string
    sigla: string
    descripcion: string
    estado: number
    _count: MineralCountAggregateOutputType | null
    _avg: MineralAvgAggregateOutputType | null
    _sum: MineralSumAggregateOutputType | null
    _min: MineralMinAggregateOutputType | null
    _max: MineralMaxAggregateOutputType | null
  }

  type GetMineralGroupByPayload<T extends MineralGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MineralGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MineralGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MineralGroupByOutputType[P]>
            : GetScalarType<T[P], MineralGroupByOutputType[P]>
        }
      >
    >


  export type MineralSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    sigla?: boolean
    descripcion?: boolean
    estado?: boolean
    sample?: boolean | Mineral$sampleArgs<ExtArgs>
    _count?: boolean | MineralCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mineral"]>

  export type MineralSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    sigla?: boolean
    descripcion?: boolean
    estado?: boolean
  }, ExtArgs["result"]["mineral"]>

  export type MineralSelectScalar = {
    id?: boolean
    nombre?: boolean
    sigla?: boolean
    descripcion?: boolean
    estado?: boolean
  }

  export type MineralInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | Mineral$sampleArgs<ExtArgs>
    _count?: boolean | MineralCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MineralIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MineralPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mineral"
    objects: {
      sample: Prisma.$SampleMineralPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      sigla: string
      descripcion: string
      estado: number
    }, ExtArgs["result"]["mineral"]>
    composites: {}
  }

  type MineralGetPayload<S extends boolean | null | undefined | MineralDefaultArgs> = $Result.GetResult<Prisma.$MineralPayload, S>

  type MineralCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MineralFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MineralCountAggregateInputType | true
    }

  export interface MineralDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mineral'], meta: { name: 'Mineral' } }
    /**
     * Find zero or one Mineral that matches the filter.
     * @param {MineralFindUniqueArgs} args - Arguments to find a Mineral
     * @example
     * // Get one Mineral
     * const mineral = await prisma.mineral.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MineralFindUniqueArgs>(args: SelectSubset<T, MineralFindUniqueArgs<ExtArgs>>): Prisma__MineralClient<$Result.GetResult<Prisma.$MineralPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Mineral that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MineralFindUniqueOrThrowArgs} args - Arguments to find a Mineral
     * @example
     * // Get one Mineral
     * const mineral = await prisma.mineral.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MineralFindUniqueOrThrowArgs>(args: SelectSubset<T, MineralFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MineralClient<$Result.GetResult<Prisma.$MineralPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Mineral that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MineralFindFirstArgs} args - Arguments to find a Mineral
     * @example
     * // Get one Mineral
     * const mineral = await prisma.mineral.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MineralFindFirstArgs>(args?: SelectSubset<T, MineralFindFirstArgs<ExtArgs>>): Prisma__MineralClient<$Result.GetResult<Prisma.$MineralPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Mineral that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MineralFindFirstOrThrowArgs} args - Arguments to find a Mineral
     * @example
     * // Get one Mineral
     * const mineral = await prisma.mineral.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MineralFindFirstOrThrowArgs>(args?: SelectSubset<T, MineralFindFirstOrThrowArgs<ExtArgs>>): Prisma__MineralClient<$Result.GetResult<Prisma.$MineralPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Minerals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MineralFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Minerals
     * const minerals = await prisma.mineral.findMany()
     * 
     * // Get first 10 Minerals
     * const minerals = await prisma.mineral.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mineralWithIdOnly = await prisma.mineral.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MineralFindManyArgs>(args?: SelectSubset<T, MineralFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MineralPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Mineral.
     * @param {MineralCreateArgs} args - Arguments to create a Mineral.
     * @example
     * // Create one Mineral
     * const Mineral = await prisma.mineral.create({
     *   data: {
     *     // ... data to create a Mineral
     *   }
     * })
     * 
     */
    create<T extends MineralCreateArgs>(args: SelectSubset<T, MineralCreateArgs<ExtArgs>>): Prisma__MineralClient<$Result.GetResult<Prisma.$MineralPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Minerals.
     * @param {MineralCreateManyArgs} args - Arguments to create many Minerals.
     * @example
     * // Create many Minerals
     * const mineral = await prisma.mineral.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MineralCreateManyArgs>(args?: SelectSubset<T, MineralCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Minerals and returns the data saved in the database.
     * @param {MineralCreateManyAndReturnArgs} args - Arguments to create many Minerals.
     * @example
     * // Create many Minerals
     * const mineral = await prisma.mineral.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Minerals and only return the `id`
     * const mineralWithIdOnly = await prisma.mineral.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MineralCreateManyAndReturnArgs>(args?: SelectSubset<T, MineralCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MineralPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Mineral.
     * @param {MineralDeleteArgs} args - Arguments to delete one Mineral.
     * @example
     * // Delete one Mineral
     * const Mineral = await prisma.mineral.delete({
     *   where: {
     *     // ... filter to delete one Mineral
     *   }
     * })
     * 
     */
    delete<T extends MineralDeleteArgs>(args: SelectSubset<T, MineralDeleteArgs<ExtArgs>>): Prisma__MineralClient<$Result.GetResult<Prisma.$MineralPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Mineral.
     * @param {MineralUpdateArgs} args - Arguments to update one Mineral.
     * @example
     * // Update one Mineral
     * const mineral = await prisma.mineral.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MineralUpdateArgs>(args: SelectSubset<T, MineralUpdateArgs<ExtArgs>>): Prisma__MineralClient<$Result.GetResult<Prisma.$MineralPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Minerals.
     * @param {MineralDeleteManyArgs} args - Arguments to filter Minerals to delete.
     * @example
     * // Delete a few Minerals
     * const { count } = await prisma.mineral.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MineralDeleteManyArgs>(args?: SelectSubset<T, MineralDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Minerals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MineralUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Minerals
     * const mineral = await prisma.mineral.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MineralUpdateManyArgs>(args: SelectSubset<T, MineralUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mineral.
     * @param {MineralUpsertArgs} args - Arguments to update or create a Mineral.
     * @example
     * // Update or create a Mineral
     * const mineral = await prisma.mineral.upsert({
     *   create: {
     *     // ... data to create a Mineral
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mineral we want to update
     *   }
     * })
     */
    upsert<T extends MineralUpsertArgs>(args: SelectSubset<T, MineralUpsertArgs<ExtArgs>>): Prisma__MineralClient<$Result.GetResult<Prisma.$MineralPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Minerals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MineralCountArgs} args - Arguments to filter Minerals to count.
     * @example
     * // Count the number of Minerals
     * const count = await prisma.mineral.count({
     *   where: {
     *     // ... the filter for the Minerals we want to count
     *   }
     * })
    **/
    count<T extends MineralCountArgs>(
      args?: Subset<T, MineralCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MineralCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mineral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MineralAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MineralAggregateArgs>(args: Subset<T, MineralAggregateArgs>): Prisma.PrismaPromise<GetMineralAggregateType<T>>

    /**
     * Group by Mineral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MineralGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MineralGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MineralGroupByArgs['orderBy'] }
        : { orderBy?: MineralGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MineralGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMineralGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mineral model
   */
  readonly fields: MineralFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mineral.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MineralClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sample<T extends Mineral$sampleArgs<ExtArgs> = {}>(args?: Subset<T, Mineral$sampleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleMineralPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Mineral model
   */ 
  interface MineralFieldRefs {
    readonly id: FieldRef<"Mineral", 'Int'>
    readonly nombre: FieldRef<"Mineral", 'String'>
    readonly sigla: FieldRef<"Mineral", 'String'>
    readonly descripcion: FieldRef<"Mineral", 'String'>
    readonly estado: FieldRef<"Mineral", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Mineral findUnique
   */
  export type MineralFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mineral
     */
    select?: MineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MineralInclude<ExtArgs> | null
    /**
     * Filter, which Mineral to fetch.
     */
    where: MineralWhereUniqueInput
  }

  /**
   * Mineral findUniqueOrThrow
   */
  export type MineralFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mineral
     */
    select?: MineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MineralInclude<ExtArgs> | null
    /**
     * Filter, which Mineral to fetch.
     */
    where: MineralWhereUniqueInput
  }

  /**
   * Mineral findFirst
   */
  export type MineralFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mineral
     */
    select?: MineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MineralInclude<ExtArgs> | null
    /**
     * Filter, which Mineral to fetch.
     */
    where?: MineralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Minerals to fetch.
     */
    orderBy?: MineralOrderByWithRelationInput | MineralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Minerals.
     */
    cursor?: MineralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Minerals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Minerals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Minerals.
     */
    distinct?: MineralScalarFieldEnum | MineralScalarFieldEnum[]
  }

  /**
   * Mineral findFirstOrThrow
   */
  export type MineralFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mineral
     */
    select?: MineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MineralInclude<ExtArgs> | null
    /**
     * Filter, which Mineral to fetch.
     */
    where?: MineralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Minerals to fetch.
     */
    orderBy?: MineralOrderByWithRelationInput | MineralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Minerals.
     */
    cursor?: MineralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Minerals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Minerals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Minerals.
     */
    distinct?: MineralScalarFieldEnum | MineralScalarFieldEnum[]
  }

  /**
   * Mineral findMany
   */
  export type MineralFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mineral
     */
    select?: MineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MineralInclude<ExtArgs> | null
    /**
     * Filter, which Minerals to fetch.
     */
    where?: MineralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Minerals to fetch.
     */
    orderBy?: MineralOrderByWithRelationInput | MineralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Minerals.
     */
    cursor?: MineralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Minerals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Minerals.
     */
    skip?: number
    distinct?: MineralScalarFieldEnum | MineralScalarFieldEnum[]
  }

  /**
   * Mineral create
   */
  export type MineralCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mineral
     */
    select?: MineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MineralInclude<ExtArgs> | null
    /**
     * The data needed to create a Mineral.
     */
    data: XOR<MineralCreateInput, MineralUncheckedCreateInput>
  }

  /**
   * Mineral createMany
   */
  export type MineralCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Minerals.
     */
    data: MineralCreateManyInput | MineralCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mineral createManyAndReturn
   */
  export type MineralCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mineral
     */
    select?: MineralSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Minerals.
     */
    data: MineralCreateManyInput | MineralCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mineral update
   */
  export type MineralUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mineral
     */
    select?: MineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MineralInclude<ExtArgs> | null
    /**
     * The data needed to update a Mineral.
     */
    data: XOR<MineralUpdateInput, MineralUncheckedUpdateInput>
    /**
     * Choose, which Mineral to update.
     */
    where: MineralWhereUniqueInput
  }

  /**
   * Mineral updateMany
   */
  export type MineralUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Minerals.
     */
    data: XOR<MineralUpdateManyMutationInput, MineralUncheckedUpdateManyInput>
    /**
     * Filter which Minerals to update
     */
    where?: MineralWhereInput
  }

  /**
   * Mineral upsert
   */
  export type MineralUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mineral
     */
    select?: MineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MineralInclude<ExtArgs> | null
    /**
     * The filter to search for the Mineral to update in case it exists.
     */
    where: MineralWhereUniqueInput
    /**
     * In case the Mineral found by the `where` argument doesn't exist, create a new Mineral with this data.
     */
    create: XOR<MineralCreateInput, MineralUncheckedCreateInput>
    /**
     * In case the Mineral was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MineralUpdateInput, MineralUncheckedUpdateInput>
  }

  /**
   * Mineral delete
   */
  export type MineralDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mineral
     */
    select?: MineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MineralInclude<ExtArgs> | null
    /**
     * Filter which Mineral to delete.
     */
    where: MineralWhereUniqueInput
  }

  /**
   * Mineral deleteMany
   */
  export type MineralDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Minerals to delete
     */
    where?: MineralWhereInput
  }

  /**
   * Mineral.sample
   */
  export type Mineral$sampleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleMineral
     */
    select?: SampleMineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleMineralInclude<ExtArgs> | null
    where?: SampleMineralWhereInput
    orderBy?: SampleMineralOrderByWithRelationInput | SampleMineralOrderByWithRelationInput[]
    cursor?: SampleMineralWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SampleMineralScalarFieldEnum | SampleMineralScalarFieldEnum[]
  }

  /**
   * Mineral without action
   */
  export type MineralDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mineral
     */
    select?: MineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MineralInclude<ExtArgs> | null
  }


  /**
   * Model SampleMineral
   */

  export type AggregateSampleMineral = {
    _count: SampleMineralCountAggregateOutputType | null
    _avg: SampleMineralAvgAggregateOutputType | null
    _sum: SampleMineralSumAggregateOutputType | null
    _min: SampleMineralMinAggregateOutputType | null
    _max: SampleMineralMaxAggregateOutputType | null
  }

  export type SampleMineralAvgAggregateOutputType = {
    sampleId: number | null
    mineralId: number | null
    ley: number | null
  }

  export type SampleMineralSumAggregateOutputType = {
    sampleId: number | null
    mineralId: number | null
    ley: number | null
  }

  export type SampleMineralMinAggregateOutputType = {
    sampleId: number | null
    mineralId: number | null
    ley: number | null
    unidad: string | null
  }

  export type SampleMineralMaxAggregateOutputType = {
    sampleId: number | null
    mineralId: number | null
    ley: number | null
    unidad: string | null
  }

  export type SampleMineralCountAggregateOutputType = {
    sampleId: number
    mineralId: number
    ley: number
    unidad: number
    _all: number
  }


  export type SampleMineralAvgAggregateInputType = {
    sampleId?: true
    mineralId?: true
    ley?: true
  }

  export type SampleMineralSumAggregateInputType = {
    sampleId?: true
    mineralId?: true
    ley?: true
  }

  export type SampleMineralMinAggregateInputType = {
    sampleId?: true
    mineralId?: true
    ley?: true
    unidad?: true
  }

  export type SampleMineralMaxAggregateInputType = {
    sampleId?: true
    mineralId?: true
    ley?: true
    unidad?: true
  }

  export type SampleMineralCountAggregateInputType = {
    sampleId?: true
    mineralId?: true
    ley?: true
    unidad?: true
    _all?: true
  }

  export type SampleMineralAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SampleMineral to aggregate.
     */
    where?: SampleMineralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleMinerals to fetch.
     */
    orderBy?: SampleMineralOrderByWithRelationInput | SampleMineralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SampleMineralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleMinerals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleMinerals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SampleMinerals
    **/
    _count?: true | SampleMineralCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SampleMineralAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SampleMineralSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SampleMineralMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SampleMineralMaxAggregateInputType
  }

  export type GetSampleMineralAggregateType<T extends SampleMineralAggregateArgs> = {
        [P in keyof T & keyof AggregateSampleMineral]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSampleMineral[P]>
      : GetScalarType<T[P], AggregateSampleMineral[P]>
  }




  export type SampleMineralGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SampleMineralWhereInput
    orderBy?: SampleMineralOrderByWithAggregationInput | SampleMineralOrderByWithAggregationInput[]
    by: SampleMineralScalarFieldEnum[] | SampleMineralScalarFieldEnum
    having?: SampleMineralScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SampleMineralCountAggregateInputType | true
    _avg?: SampleMineralAvgAggregateInputType
    _sum?: SampleMineralSumAggregateInputType
    _min?: SampleMineralMinAggregateInputType
    _max?: SampleMineralMaxAggregateInputType
  }

  export type SampleMineralGroupByOutputType = {
    sampleId: number
    mineralId: number
    ley: number
    unidad: string
    _count: SampleMineralCountAggregateOutputType | null
    _avg: SampleMineralAvgAggregateOutputType | null
    _sum: SampleMineralSumAggregateOutputType | null
    _min: SampleMineralMinAggregateOutputType | null
    _max: SampleMineralMaxAggregateOutputType | null
  }

  type GetSampleMineralGroupByPayload<T extends SampleMineralGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SampleMineralGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SampleMineralGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SampleMineralGroupByOutputType[P]>
            : GetScalarType<T[P], SampleMineralGroupByOutputType[P]>
        }
      >
    >


  export type SampleMineralSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sampleId?: boolean
    mineralId?: boolean
    ley?: boolean
    unidad?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    mineral?: boolean | MineralDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sampleMineral"]>

  export type SampleMineralSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sampleId?: boolean
    mineralId?: boolean
    ley?: boolean
    unidad?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    mineral?: boolean | MineralDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sampleMineral"]>

  export type SampleMineralSelectScalar = {
    sampleId?: boolean
    mineralId?: boolean
    ley?: boolean
    unidad?: boolean
  }

  export type SampleMineralInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    mineral?: boolean | MineralDefaultArgs<ExtArgs>
  }
  export type SampleMineralIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
    mineral?: boolean | MineralDefaultArgs<ExtArgs>
  }

  export type $SampleMineralPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SampleMineral"
    objects: {
      sample: Prisma.$SamplePayload<ExtArgs>
      mineral: Prisma.$MineralPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      sampleId: number
      mineralId: number
      ley: number
      unidad: string
    }, ExtArgs["result"]["sampleMineral"]>
    composites: {}
  }

  type SampleMineralGetPayload<S extends boolean | null | undefined | SampleMineralDefaultArgs> = $Result.GetResult<Prisma.$SampleMineralPayload, S>

  type SampleMineralCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SampleMineralFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SampleMineralCountAggregateInputType | true
    }

  export interface SampleMineralDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SampleMineral'], meta: { name: 'SampleMineral' } }
    /**
     * Find zero or one SampleMineral that matches the filter.
     * @param {SampleMineralFindUniqueArgs} args - Arguments to find a SampleMineral
     * @example
     * // Get one SampleMineral
     * const sampleMineral = await prisma.sampleMineral.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SampleMineralFindUniqueArgs>(args: SelectSubset<T, SampleMineralFindUniqueArgs<ExtArgs>>): Prisma__SampleMineralClient<$Result.GetResult<Prisma.$SampleMineralPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SampleMineral that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SampleMineralFindUniqueOrThrowArgs} args - Arguments to find a SampleMineral
     * @example
     * // Get one SampleMineral
     * const sampleMineral = await prisma.sampleMineral.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SampleMineralFindUniqueOrThrowArgs>(args: SelectSubset<T, SampleMineralFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SampleMineralClient<$Result.GetResult<Prisma.$SampleMineralPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SampleMineral that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleMineralFindFirstArgs} args - Arguments to find a SampleMineral
     * @example
     * // Get one SampleMineral
     * const sampleMineral = await prisma.sampleMineral.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SampleMineralFindFirstArgs>(args?: SelectSubset<T, SampleMineralFindFirstArgs<ExtArgs>>): Prisma__SampleMineralClient<$Result.GetResult<Prisma.$SampleMineralPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SampleMineral that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleMineralFindFirstOrThrowArgs} args - Arguments to find a SampleMineral
     * @example
     * // Get one SampleMineral
     * const sampleMineral = await prisma.sampleMineral.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SampleMineralFindFirstOrThrowArgs>(args?: SelectSubset<T, SampleMineralFindFirstOrThrowArgs<ExtArgs>>): Prisma__SampleMineralClient<$Result.GetResult<Prisma.$SampleMineralPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SampleMinerals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleMineralFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SampleMinerals
     * const sampleMinerals = await prisma.sampleMineral.findMany()
     * 
     * // Get first 10 SampleMinerals
     * const sampleMinerals = await prisma.sampleMineral.findMany({ take: 10 })
     * 
     * // Only select the `sampleId`
     * const sampleMineralWithSampleIdOnly = await prisma.sampleMineral.findMany({ select: { sampleId: true } })
     * 
     */
    findMany<T extends SampleMineralFindManyArgs>(args?: SelectSubset<T, SampleMineralFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleMineralPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SampleMineral.
     * @param {SampleMineralCreateArgs} args - Arguments to create a SampleMineral.
     * @example
     * // Create one SampleMineral
     * const SampleMineral = await prisma.sampleMineral.create({
     *   data: {
     *     // ... data to create a SampleMineral
     *   }
     * })
     * 
     */
    create<T extends SampleMineralCreateArgs>(args: SelectSubset<T, SampleMineralCreateArgs<ExtArgs>>): Prisma__SampleMineralClient<$Result.GetResult<Prisma.$SampleMineralPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SampleMinerals.
     * @param {SampleMineralCreateManyArgs} args - Arguments to create many SampleMinerals.
     * @example
     * // Create many SampleMinerals
     * const sampleMineral = await prisma.sampleMineral.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SampleMineralCreateManyArgs>(args?: SelectSubset<T, SampleMineralCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SampleMinerals and returns the data saved in the database.
     * @param {SampleMineralCreateManyAndReturnArgs} args - Arguments to create many SampleMinerals.
     * @example
     * // Create many SampleMinerals
     * const sampleMineral = await prisma.sampleMineral.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SampleMinerals and only return the `sampleId`
     * const sampleMineralWithSampleIdOnly = await prisma.sampleMineral.createManyAndReturn({ 
     *   select: { sampleId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SampleMineralCreateManyAndReturnArgs>(args?: SelectSubset<T, SampleMineralCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SampleMineralPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SampleMineral.
     * @param {SampleMineralDeleteArgs} args - Arguments to delete one SampleMineral.
     * @example
     * // Delete one SampleMineral
     * const SampleMineral = await prisma.sampleMineral.delete({
     *   where: {
     *     // ... filter to delete one SampleMineral
     *   }
     * })
     * 
     */
    delete<T extends SampleMineralDeleteArgs>(args: SelectSubset<T, SampleMineralDeleteArgs<ExtArgs>>): Prisma__SampleMineralClient<$Result.GetResult<Prisma.$SampleMineralPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SampleMineral.
     * @param {SampleMineralUpdateArgs} args - Arguments to update one SampleMineral.
     * @example
     * // Update one SampleMineral
     * const sampleMineral = await prisma.sampleMineral.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SampleMineralUpdateArgs>(args: SelectSubset<T, SampleMineralUpdateArgs<ExtArgs>>): Prisma__SampleMineralClient<$Result.GetResult<Prisma.$SampleMineralPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SampleMinerals.
     * @param {SampleMineralDeleteManyArgs} args - Arguments to filter SampleMinerals to delete.
     * @example
     * // Delete a few SampleMinerals
     * const { count } = await prisma.sampleMineral.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SampleMineralDeleteManyArgs>(args?: SelectSubset<T, SampleMineralDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SampleMinerals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleMineralUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SampleMinerals
     * const sampleMineral = await prisma.sampleMineral.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SampleMineralUpdateManyArgs>(args: SelectSubset<T, SampleMineralUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SampleMineral.
     * @param {SampleMineralUpsertArgs} args - Arguments to update or create a SampleMineral.
     * @example
     * // Update or create a SampleMineral
     * const sampleMineral = await prisma.sampleMineral.upsert({
     *   create: {
     *     // ... data to create a SampleMineral
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SampleMineral we want to update
     *   }
     * })
     */
    upsert<T extends SampleMineralUpsertArgs>(args: SelectSubset<T, SampleMineralUpsertArgs<ExtArgs>>): Prisma__SampleMineralClient<$Result.GetResult<Prisma.$SampleMineralPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SampleMinerals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleMineralCountArgs} args - Arguments to filter SampleMinerals to count.
     * @example
     * // Count the number of SampleMinerals
     * const count = await prisma.sampleMineral.count({
     *   where: {
     *     // ... the filter for the SampleMinerals we want to count
     *   }
     * })
    **/
    count<T extends SampleMineralCountArgs>(
      args?: Subset<T, SampleMineralCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SampleMineralCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SampleMineral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleMineralAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SampleMineralAggregateArgs>(args: Subset<T, SampleMineralAggregateArgs>): Prisma.PrismaPromise<GetSampleMineralAggregateType<T>>

    /**
     * Group by SampleMineral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SampleMineralGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SampleMineralGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SampleMineralGroupByArgs['orderBy'] }
        : { orderBy?: SampleMineralGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SampleMineralGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSampleMineralGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SampleMineral model
   */
  readonly fields: SampleMineralFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SampleMineral.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SampleMineralClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sample<T extends SampleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SampleDefaultArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    mineral<T extends MineralDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MineralDefaultArgs<ExtArgs>>): Prisma__MineralClient<$Result.GetResult<Prisma.$MineralPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SampleMineral model
   */ 
  interface SampleMineralFieldRefs {
    readonly sampleId: FieldRef<"SampleMineral", 'Int'>
    readonly mineralId: FieldRef<"SampleMineral", 'Int'>
    readonly ley: FieldRef<"SampleMineral", 'Int'>
    readonly unidad: FieldRef<"SampleMineral", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SampleMineral findUnique
   */
  export type SampleMineralFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleMineral
     */
    select?: SampleMineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleMineralInclude<ExtArgs> | null
    /**
     * Filter, which SampleMineral to fetch.
     */
    where: SampleMineralWhereUniqueInput
  }

  /**
   * SampleMineral findUniqueOrThrow
   */
  export type SampleMineralFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleMineral
     */
    select?: SampleMineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleMineralInclude<ExtArgs> | null
    /**
     * Filter, which SampleMineral to fetch.
     */
    where: SampleMineralWhereUniqueInput
  }

  /**
   * SampleMineral findFirst
   */
  export type SampleMineralFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleMineral
     */
    select?: SampleMineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleMineralInclude<ExtArgs> | null
    /**
     * Filter, which SampleMineral to fetch.
     */
    where?: SampleMineralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleMinerals to fetch.
     */
    orderBy?: SampleMineralOrderByWithRelationInput | SampleMineralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SampleMinerals.
     */
    cursor?: SampleMineralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleMinerals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleMinerals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SampleMinerals.
     */
    distinct?: SampleMineralScalarFieldEnum | SampleMineralScalarFieldEnum[]
  }

  /**
   * SampleMineral findFirstOrThrow
   */
  export type SampleMineralFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleMineral
     */
    select?: SampleMineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleMineralInclude<ExtArgs> | null
    /**
     * Filter, which SampleMineral to fetch.
     */
    where?: SampleMineralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleMinerals to fetch.
     */
    orderBy?: SampleMineralOrderByWithRelationInput | SampleMineralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SampleMinerals.
     */
    cursor?: SampleMineralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleMinerals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleMinerals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SampleMinerals.
     */
    distinct?: SampleMineralScalarFieldEnum | SampleMineralScalarFieldEnum[]
  }

  /**
   * SampleMineral findMany
   */
  export type SampleMineralFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleMineral
     */
    select?: SampleMineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleMineralInclude<ExtArgs> | null
    /**
     * Filter, which SampleMinerals to fetch.
     */
    where?: SampleMineralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SampleMinerals to fetch.
     */
    orderBy?: SampleMineralOrderByWithRelationInput | SampleMineralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SampleMinerals.
     */
    cursor?: SampleMineralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SampleMinerals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SampleMinerals.
     */
    skip?: number
    distinct?: SampleMineralScalarFieldEnum | SampleMineralScalarFieldEnum[]
  }

  /**
   * SampleMineral create
   */
  export type SampleMineralCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleMineral
     */
    select?: SampleMineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleMineralInclude<ExtArgs> | null
    /**
     * The data needed to create a SampleMineral.
     */
    data: XOR<SampleMineralCreateInput, SampleMineralUncheckedCreateInput>
  }

  /**
   * SampleMineral createMany
   */
  export type SampleMineralCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SampleMinerals.
     */
    data: SampleMineralCreateManyInput | SampleMineralCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SampleMineral createManyAndReturn
   */
  export type SampleMineralCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleMineral
     */
    select?: SampleMineralSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SampleMinerals.
     */
    data: SampleMineralCreateManyInput | SampleMineralCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleMineralIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SampleMineral update
   */
  export type SampleMineralUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleMineral
     */
    select?: SampleMineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleMineralInclude<ExtArgs> | null
    /**
     * The data needed to update a SampleMineral.
     */
    data: XOR<SampleMineralUpdateInput, SampleMineralUncheckedUpdateInput>
    /**
     * Choose, which SampleMineral to update.
     */
    where: SampleMineralWhereUniqueInput
  }

  /**
   * SampleMineral updateMany
   */
  export type SampleMineralUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SampleMinerals.
     */
    data: XOR<SampleMineralUpdateManyMutationInput, SampleMineralUncheckedUpdateManyInput>
    /**
     * Filter which SampleMinerals to update
     */
    where?: SampleMineralWhereInput
  }

  /**
   * SampleMineral upsert
   */
  export type SampleMineralUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleMineral
     */
    select?: SampleMineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleMineralInclude<ExtArgs> | null
    /**
     * The filter to search for the SampleMineral to update in case it exists.
     */
    where: SampleMineralWhereUniqueInput
    /**
     * In case the SampleMineral found by the `where` argument doesn't exist, create a new SampleMineral with this data.
     */
    create: XOR<SampleMineralCreateInput, SampleMineralUncheckedCreateInput>
    /**
     * In case the SampleMineral was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SampleMineralUpdateInput, SampleMineralUncheckedUpdateInput>
  }

  /**
   * SampleMineral delete
   */
  export type SampleMineralDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleMineral
     */
    select?: SampleMineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleMineralInclude<ExtArgs> | null
    /**
     * Filter which SampleMineral to delete.
     */
    where: SampleMineralWhereUniqueInput
  }

  /**
   * SampleMineral deleteMany
   */
  export type SampleMineralDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SampleMinerals to delete
     */
    where?: SampleMineralWhereInput
  }

  /**
   * SampleMineral without action
   */
  export type SampleMineralDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SampleMineral
     */
    select?: SampleMineralSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SampleMineralInclude<ExtArgs> | null
  }


  /**
   * Model FormExt
   */

  export type AggregateFormExt = {
    _count: FormExtCountAggregateOutputType | null
    _avg: FormExtAvgAggregateOutputType | null
    _sum: FormExtSumAggregateOutputType | null
    _min: FormExtMinAggregateOutputType | null
    _max: FormExtMaxAggregateOutputType | null
  }

  export type FormExtAvgAggregateOutputType = {
    id: number | null
    id_sample: number | null
    nro_factura_exportacion: number | null
    cod_analisis: number | null
  }

  export type FormExtSumAggregateOutputType = {
    id: number | null
    id_sample: number | null
    nro_factura_exportacion: number | null
    cod_analisis: number | null
  }

  export type FormExtMinAggregateOutputType = {
    id: number | null
    id_sample: number | null
    m03: string | null
    nro_factura_exportacion: number | null
    laboratorio: string | null
    cod_analisis: number | null
    des_comprador: string | null
    des_aduana: string | null
    des_pais: string | null
    tipo_transporte: string | null
    placa: string | null
    nom_conductor: string | null
    licencia: string | null
    observaciones: string | null
  }

  export type FormExtMaxAggregateOutputType = {
    id: number | null
    id_sample: number | null
    m03: string | null
    nro_factura_exportacion: number | null
    laboratorio: string | null
    cod_analisis: number | null
    des_comprador: string | null
    des_aduana: string | null
    des_pais: string | null
    tipo_transporte: string | null
    placa: string | null
    nom_conductor: string | null
    licencia: string | null
    observaciones: string | null
  }

  export type FormExtCountAggregateOutputType = {
    id: number
    id_sample: number
    m03: number
    nro_factura_exportacion: number
    laboratorio: number
    cod_analisis: number
    des_comprador: number
    des_aduana: number
    des_pais: number
    tipo_transporte: number
    placa: number
    nom_conductor: number
    licencia: number
    observaciones: number
    _all: number
  }


  export type FormExtAvgAggregateInputType = {
    id?: true
    id_sample?: true
    nro_factura_exportacion?: true
    cod_analisis?: true
  }

  export type FormExtSumAggregateInputType = {
    id?: true
    id_sample?: true
    nro_factura_exportacion?: true
    cod_analisis?: true
  }

  export type FormExtMinAggregateInputType = {
    id?: true
    id_sample?: true
    m03?: true
    nro_factura_exportacion?: true
    laboratorio?: true
    cod_analisis?: true
    des_comprador?: true
    des_aduana?: true
    des_pais?: true
    tipo_transporte?: true
    placa?: true
    nom_conductor?: true
    licencia?: true
    observaciones?: true
  }

  export type FormExtMaxAggregateInputType = {
    id?: true
    id_sample?: true
    m03?: true
    nro_factura_exportacion?: true
    laboratorio?: true
    cod_analisis?: true
    des_comprador?: true
    des_aduana?: true
    des_pais?: true
    tipo_transporte?: true
    placa?: true
    nom_conductor?: true
    licencia?: true
    observaciones?: true
  }

  export type FormExtCountAggregateInputType = {
    id?: true
    id_sample?: true
    m03?: true
    nro_factura_exportacion?: true
    laboratorio?: true
    cod_analisis?: true
    des_comprador?: true
    des_aduana?: true
    des_pais?: true
    tipo_transporte?: true
    placa?: true
    nom_conductor?: true
    licencia?: true
    observaciones?: true
    _all?: true
  }

  export type FormExtAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FormExt to aggregate.
     */
    where?: FormExtWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormExts to fetch.
     */
    orderBy?: FormExtOrderByWithRelationInput | FormExtOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FormExtWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormExts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormExts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FormExts
    **/
    _count?: true | FormExtCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FormExtAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FormExtSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormExtMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormExtMaxAggregateInputType
  }

  export type GetFormExtAggregateType<T extends FormExtAggregateArgs> = {
        [P in keyof T & keyof AggregateFormExt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFormExt[P]>
      : GetScalarType<T[P], AggregateFormExt[P]>
  }




  export type FormExtGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormExtWhereInput
    orderBy?: FormExtOrderByWithAggregationInput | FormExtOrderByWithAggregationInput[]
    by: FormExtScalarFieldEnum[] | FormExtScalarFieldEnum
    having?: FormExtScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormExtCountAggregateInputType | true
    _avg?: FormExtAvgAggregateInputType
    _sum?: FormExtSumAggregateInputType
    _min?: FormExtMinAggregateInputType
    _max?: FormExtMaxAggregateInputType
  }

  export type FormExtGroupByOutputType = {
    id: number
    id_sample: number
    m03: string
    nro_factura_exportacion: number
    laboratorio: string
    cod_analisis: number
    des_comprador: string
    des_aduana: string
    des_pais: string
    tipo_transporte: string
    placa: string
    nom_conductor: string
    licencia: string
    observaciones: string | null
    _count: FormExtCountAggregateOutputType | null
    _avg: FormExtAvgAggregateOutputType | null
    _sum: FormExtSumAggregateOutputType | null
    _min: FormExtMinAggregateOutputType | null
    _max: FormExtMaxAggregateOutputType | null
  }

  type GetFormExtGroupByPayload<T extends FormExtGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormExtGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormExtGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormExtGroupByOutputType[P]>
            : GetScalarType<T[P], FormExtGroupByOutputType[P]>
        }
      >
    >


  export type FormExtSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_sample?: boolean
    m03?: boolean
    nro_factura_exportacion?: boolean
    laboratorio?: boolean
    cod_analisis?: boolean
    des_comprador?: boolean
    des_aduana?: boolean
    des_pais?: boolean
    tipo_transporte?: boolean
    placa?: boolean
    nom_conductor?: boolean
    licencia?: boolean
    observaciones?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["formExt"]>

  export type FormExtSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_sample?: boolean
    m03?: boolean
    nro_factura_exportacion?: boolean
    laboratorio?: boolean
    cod_analisis?: boolean
    des_comprador?: boolean
    des_aduana?: boolean
    des_pais?: boolean
    tipo_transporte?: boolean
    placa?: boolean
    nom_conductor?: boolean
    licencia?: boolean
    observaciones?: boolean
    sample?: boolean | SampleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["formExt"]>

  export type FormExtSelectScalar = {
    id?: boolean
    id_sample?: boolean
    m03?: boolean
    nro_factura_exportacion?: boolean
    laboratorio?: boolean
    cod_analisis?: boolean
    des_comprador?: boolean
    des_aduana?: boolean
    des_pais?: boolean
    tipo_transporte?: boolean
    placa?: boolean
    nom_conductor?: boolean
    licencia?: boolean
    observaciones?: boolean
  }

  export type FormExtInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
  }
  export type FormExtIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sample?: boolean | SampleDefaultArgs<ExtArgs>
  }

  export type $FormExtPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FormExt"
    objects: {
      sample: Prisma.$SamplePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_sample: number
      m03: string
      nro_factura_exportacion: number
      laboratorio: string
      cod_analisis: number
      des_comprador: string
      des_aduana: string
      des_pais: string
      tipo_transporte: string
      placa: string
      nom_conductor: string
      licencia: string
      observaciones: string | null
    }, ExtArgs["result"]["formExt"]>
    composites: {}
  }

  type FormExtGetPayload<S extends boolean | null | undefined | FormExtDefaultArgs> = $Result.GetResult<Prisma.$FormExtPayload, S>

  type FormExtCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FormExtFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FormExtCountAggregateInputType | true
    }

  export interface FormExtDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormExt'], meta: { name: 'FormExt' } }
    /**
     * Find zero or one FormExt that matches the filter.
     * @param {FormExtFindUniqueArgs} args - Arguments to find a FormExt
     * @example
     * // Get one FormExt
     * const formExt = await prisma.formExt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FormExtFindUniqueArgs>(args: SelectSubset<T, FormExtFindUniqueArgs<ExtArgs>>): Prisma__FormExtClient<$Result.GetResult<Prisma.$FormExtPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FormExt that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FormExtFindUniqueOrThrowArgs} args - Arguments to find a FormExt
     * @example
     * // Get one FormExt
     * const formExt = await prisma.formExt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FormExtFindUniqueOrThrowArgs>(args: SelectSubset<T, FormExtFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FormExtClient<$Result.GetResult<Prisma.$FormExtPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FormExt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormExtFindFirstArgs} args - Arguments to find a FormExt
     * @example
     * // Get one FormExt
     * const formExt = await prisma.formExt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FormExtFindFirstArgs>(args?: SelectSubset<T, FormExtFindFirstArgs<ExtArgs>>): Prisma__FormExtClient<$Result.GetResult<Prisma.$FormExtPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FormExt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormExtFindFirstOrThrowArgs} args - Arguments to find a FormExt
     * @example
     * // Get one FormExt
     * const formExt = await prisma.formExt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FormExtFindFirstOrThrowArgs>(args?: SelectSubset<T, FormExtFindFirstOrThrowArgs<ExtArgs>>): Prisma__FormExtClient<$Result.GetResult<Prisma.$FormExtPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FormExts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormExtFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FormExts
     * const formExts = await prisma.formExt.findMany()
     * 
     * // Get first 10 FormExts
     * const formExts = await prisma.formExt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formExtWithIdOnly = await prisma.formExt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FormExtFindManyArgs>(args?: SelectSubset<T, FormExtFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormExtPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FormExt.
     * @param {FormExtCreateArgs} args - Arguments to create a FormExt.
     * @example
     * // Create one FormExt
     * const FormExt = await prisma.formExt.create({
     *   data: {
     *     // ... data to create a FormExt
     *   }
     * })
     * 
     */
    create<T extends FormExtCreateArgs>(args: SelectSubset<T, FormExtCreateArgs<ExtArgs>>): Prisma__FormExtClient<$Result.GetResult<Prisma.$FormExtPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FormExts.
     * @param {FormExtCreateManyArgs} args - Arguments to create many FormExts.
     * @example
     * // Create many FormExts
     * const formExt = await prisma.formExt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FormExtCreateManyArgs>(args?: SelectSubset<T, FormExtCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FormExts and returns the data saved in the database.
     * @param {FormExtCreateManyAndReturnArgs} args - Arguments to create many FormExts.
     * @example
     * // Create many FormExts
     * const formExt = await prisma.formExt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FormExts and only return the `id`
     * const formExtWithIdOnly = await prisma.formExt.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FormExtCreateManyAndReturnArgs>(args?: SelectSubset<T, FormExtCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormExtPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FormExt.
     * @param {FormExtDeleteArgs} args - Arguments to delete one FormExt.
     * @example
     * // Delete one FormExt
     * const FormExt = await prisma.formExt.delete({
     *   where: {
     *     // ... filter to delete one FormExt
     *   }
     * })
     * 
     */
    delete<T extends FormExtDeleteArgs>(args: SelectSubset<T, FormExtDeleteArgs<ExtArgs>>): Prisma__FormExtClient<$Result.GetResult<Prisma.$FormExtPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FormExt.
     * @param {FormExtUpdateArgs} args - Arguments to update one FormExt.
     * @example
     * // Update one FormExt
     * const formExt = await prisma.formExt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FormExtUpdateArgs>(args: SelectSubset<T, FormExtUpdateArgs<ExtArgs>>): Prisma__FormExtClient<$Result.GetResult<Prisma.$FormExtPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FormExts.
     * @param {FormExtDeleteManyArgs} args - Arguments to filter FormExts to delete.
     * @example
     * // Delete a few FormExts
     * const { count } = await prisma.formExt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FormExtDeleteManyArgs>(args?: SelectSubset<T, FormExtDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FormExts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormExtUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FormExts
     * const formExt = await prisma.formExt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FormExtUpdateManyArgs>(args: SelectSubset<T, FormExtUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FormExt.
     * @param {FormExtUpsertArgs} args - Arguments to update or create a FormExt.
     * @example
     * // Update or create a FormExt
     * const formExt = await prisma.formExt.upsert({
     *   create: {
     *     // ... data to create a FormExt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FormExt we want to update
     *   }
     * })
     */
    upsert<T extends FormExtUpsertArgs>(args: SelectSubset<T, FormExtUpsertArgs<ExtArgs>>): Prisma__FormExtClient<$Result.GetResult<Prisma.$FormExtPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FormExts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormExtCountArgs} args - Arguments to filter FormExts to count.
     * @example
     * // Count the number of FormExts
     * const count = await prisma.formExt.count({
     *   where: {
     *     // ... the filter for the FormExts we want to count
     *   }
     * })
    **/
    count<T extends FormExtCountArgs>(
      args?: Subset<T, FormExtCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormExtCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FormExt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormExtAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormExtAggregateArgs>(args: Subset<T, FormExtAggregateArgs>): Prisma.PrismaPromise<GetFormExtAggregateType<T>>

    /**
     * Group by FormExt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormExtGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FormExtGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FormExtGroupByArgs['orderBy'] }
        : { orderBy?: FormExtGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FormExtGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormExtGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FormExt model
   */
  readonly fields: FormExtFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FormExt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FormExtClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sample<T extends SampleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SampleDefaultArgs<ExtArgs>>): Prisma__SampleClient<$Result.GetResult<Prisma.$SamplePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FormExt model
   */ 
  interface FormExtFieldRefs {
    readonly id: FieldRef<"FormExt", 'Int'>
    readonly id_sample: FieldRef<"FormExt", 'Int'>
    readonly m03: FieldRef<"FormExt", 'String'>
    readonly nro_factura_exportacion: FieldRef<"FormExt", 'Int'>
    readonly laboratorio: FieldRef<"FormExt", 'String'>
    readonly cod_analisis: FieldRef<"FormExt", 'Int'>
    readonly des_comprador: FieldRef<"FormExt", 'String'>
    readonly des_aduana: FieldRef<"FormExt", 'String'>
    readonly des_pais: FieldRef<"FormExt", 'String'>
    readonly tipo_transporte: FieldRef<"FormExt", 'String'>
    readonly placa: FieldRef<"FormExt", 'String'>
    readonly nom_conductor: FieldRef<"FormExt", 'String'>
    readonly licencia: FieldRef<"FormExt", 'String'>
    readonly observaciones: FieldRef<"FormExt", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FormExt findUnique
   */
  export type FormExtFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormExt
     */
    select?: FormExtSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormExtInclude<ExtArgs> | null
    /**
     * Filter, which FormExt to fetch.
     */
    where: FormExtWhereUniqueInput
  }

  /**
   * FormExt findUniqueOrThrow
   */
  export type FormExtFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormExt
     */
    select?: FormExtSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormExtInclude<ExtArgs> | null
    /**
     * Filter, which FormExt to fetch.
     */
    where: FormExtWhereUniqueInput
  }

  /**
   * FormExt findFirst
   */
  export type FormExtFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormExt
     */
    select?: FormExtSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormExtInclude<ExtArgs> | null
    /**
     * Filter, which FormExt to fetch.
     */
    where?: FormExtWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormExts to fetch.
     */
    orderBy?: FormExtOrderByWithRelationInput | FormExtOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FormExts.
     */
    cursor?: FormExtWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormExts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormExts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FormExts.
     */
    distinct?: FormExtScalarFieldEnum | FormExtScalarFieldEnum[]
  }

  /**
   * FormExt findFirstOrThrow
   */
  export type FormExtFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormExt
     */
    select?: FormExtSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormExtInclude<ExtArgs> | null
    /**
     * Filter, which FormExt to fetch.
     */
    where?: FormExtWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormExts to fetch.
     */
    orderBy?: FormExtOrderByWithRelationInput | FormExtOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FormExts.
     */
    cursor?: FormExtWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormExts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormExts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FormExts.
     */
    distinct?: FormExtScalarFieldEnum | FormExtScalarFieldEnum[]
  }

  /**
   * FormExt findMany
   */
  export type FormExtFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormExt
     */
    select?: FormExtSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormExtInclude<ExtArgs> | null
    /**
     * Filter, which FormExts to fetch.
     */
    where?: FormExtWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormExts to fetch.
     */
    orderBy?: FormExtOrderByWithRelationInput | FormExtOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FormExts.
     */
    cursor?: FormExtWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormExts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormExts.
     */
    skip?: number
    distinct?: FormExtScalarFieldEnum | FormExtScalarFieldEnum[]
  }

  /**
   * FormExt create
   */
  export type FormExtCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormExt
     */
    select?: FormExtSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormExtInclude<ExtArgs> | null
    /**
     * The data needed to create a FormExt.
     */
    data: XOR<FormExtCreateInput, FormExtUncheckedCreateInput>
  }

  /**
   * FormExt createMany
   */
  export type FormExtCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FormExts.
     */
    data: FormExtCreateManyInput | FormExtCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FormExt createManyAndReturn
   */
  export type FormExtCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormExt
     */
    select?: FormExtSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FormExts.
     */
    data: FormExtCreateManyInput | FormExtCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormExtIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FormExt update
   */
  export type FormExtUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormExt
     */
    select?: FormExtSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormExtInclude<ExtArgs> | null
    /**
     * The data needed to update a FormExt.
     */
    data: XOR<FormExtUpdateInput, FormExtUncheckedUpdateInput>
    /**
     * Choose, which FormExt to update.
     */
    where: FormExtWhereUniqueInput
  }

  /**
   * FormExt updateMany
   */
  export type FormExtUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FormExts.
     */
    data: XOR<FormExtUpdateManyMutationInput, FormExtUncheckedUpdateManyInput>
    /**
     * Filter which FormExts to update
     */
    where?: FormExtWhereInput
  }

  /**
   * FormExt upsert
   */
  export type FormExtUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormExt
     */
    select?: FormExtSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormExtInclude<ExtArgs> | null
    /**
     * The filter to search for the FormExt to update in case it exists.
     */
    where: FormExtWhereUniqueInput
    /**
     * In case the FormExt found by the `where` argument doesn't exist, create a new FormExt with this data.
     */
    create: XOR<FormExtCreateInput, FormExtUncheckedCreateInput>
    /**
     * In case the FormExt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FormExtUpdateInput, FormExtUncheckedUpdateInput>
  }

  /**
   * FormExt delete
   */
  export type FormExtDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormExt
     */
    select?: FormExtSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormExtInclude<ExtArgs> | null
    /**
     * Filter which FormExt to delete.
     */
    where: FormExtWhereUniqueInput
  }

  /**
   * FormExt deleteMany
   */
  export type FormExtDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FormExts to delete
     */
    where?: FormExtWhereInput
  }

  /**
   * FormExt without action
   */
  export type FormExtDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormExt
     */
    select?: FormExtSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormExtInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    id_operador: 'id_operador',
    nombre: 'nombre',
    apellidos: 'apellidos',
    ci: 'ci',
    celular: 'celular',
    rol: 'rol',
    estado: 'estado'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OperatorScalarFieldEnum: {
    id: 'id',
    razon_social: 'razon_social',
    nit: 'nit',
    nim_niar: 'nim_niar',
    nro_nim: 'nro_nim',
    fecha_exp_nim: 'fecha_exp_nim',
    tipo_operador: 'tipo_operador',
    nro_personeria: 'nro_personeria',
    nro_matricula_seprec: 'nro_matricula_seprec',
    fecha_exp_seprec: 'fecha_exp_seprec',
    tipo_doc_creacion: 'tipo_doc_creacion',
    doc_creacion: 'doc_creacion',
    dl_departamento: 'dl_departamento',
    dl_municipio: 'dl_municipio',
    dl_direccion: 'dl_direccion',
    dl_ubicacion: 'dl_ubicacion',
    correo_inst: 'correo_inst',
    tel_fijo: 'tel_fijo',
    celular: 'celular',
    celular_2: 'celular_2',
    act_exploracion: 'act_exploracion',
    act_comer_interna: 'act_comer_interna',
    act_comer_externa: 'act_comer_externa',
    act_industrializacion: 'act_industrializacion',
    act_tras_colas: 'act_tras_colas',
    act_explotacion: 'act_explotacion',
    act_ben_concentracion: 'act_ben_concentracion',
    act_refinacion: 'act_refinacion',
    act_fundicion: 'act_fundicion',
    tipo_explotacion: 'tipo_explotacion',
    denominacion_area: 'denominacion_area',
    nro_codigo_unico: 'nro_codigo_unico',
    nro_cuadricula: 'nro_cuadricula',
    municipio_origen: 'municipio_origen',
    nro_ruex: 'nro_ruex',
    verif_cert_liberacion: 'verif_cert_liberacion',
    nro_res_ministerial: 'nro_res_ministerial',
    nombre_resp_for101: 'nombre_resp_for101',
    ci_resp_for101: 'ci_resp_for101',
    celular_resp_for101: 'celular_resp_for101',
    correo_resp_for101: 'correo_resp_for101',
    nombre_resp_tmuestra: 'nombre_resp_tmuestra',
    ci_resp_tmuestra: 'ci_resp_tmuestra',
    celular_resp_tmuestra: 'celular_resp_tmuestra',
    correo_resp_tmuestra: 'correo_resp_tmuestra'
  };

  export type OperatorScalarFieldEnum = (typeof OperatorScalarFieldEnum)[keyof typeof OperatorScalarFieldEnum]


  export const SampleScalarFieldEnum: {
    id: 'id',
    fecha_emision: 'fecha_emision',
    ubi_geografica: 'ubi_geografica',
    lugar_verificacion: 'lugar_verificacion',
    id_operador: 'id_operador',
    responsable: 'responsable',
    lotes: 'lotes',
    tipo_muestra: 'tipo_muestra',
    presentacion: 'presentacion',
    sacos: 'sacos',
    camiones: 'camiones',
    peso_neto: 'peso_neto',
    peso_parcial: 'peso_parcial',
    id_municipio: 'id_municipio',
    senerecom: 'senerecom',
    tipo_agranel: 'tipo_agranel',
    tipo_emsacado: 'tipo_emsacado',
    tipo_lingotes: 'tipo_lingotes',
    tipo_sal: 'tipo_sal',
    tipo_otr: 'tipo_otr',
    observaciones: 'observaciones',
    estado: 'estado',
    formExtId: 'formExtId'
  };

  export type SampleScalarFieldEnum = (typeof SampleScalarFieldEnum)[keyof typeof SampleScalarFieldEnum]


  export const MineralScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    sigla: 'sigla',
    descripcion: 'descripcion',
    estado: 'estado'
  };

  export type MineralScalarFieldEnum = (typeof MineralScalarFieldEnum)[keyof typeof MineralScalarFieldEnum]


  export const SampleMineralScalarFieldEnum: {
    sampleId: 'sampleId',
    mineralId: 'mineralId',
    ley: 'ley',
    unidad: 'unidad'
  };

  export type SampleMineralScalarFieldEnum = (typeof SampleMineralScalarFieldEnum)[keyof typeof SampleMineralScalarFieldEnum]


  export const FormExtScalarFieldEnum: {
    id: 'id',
    id_sample: 'id_sample',
    m03: 'm03',
    nro_factura_exportacion: 'nro_factura_exportacion',
    laboratorio: 'laboratorio',
    cod_analisis: 'cod_analisis',
    des_comprador: 'des_comprador',
    des_aduana: 'des_aduana',
    des_pais: 'des_pais',
    tipo_transporte: 'tipo_transporte',
    placa: 'placa',
    nom_conductor: 'nom_conductor',
    licencia: 'licencia',
    observaciones: 'observaciones'
  };

  export type FormExtScalarFieldEnum = (typeof FormExtScalarFieldEnum)[keyof typeof FormExtScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    id_operador?: IntNullableFilter<"User"> | number | null
    nombre?: StringFilter<"User"> | string
    apellidos?: StringFilter<"User"> | string
    ci?: StringFilter<"User"> | string
    celular?: IntFilter<"User"> | number
    rol?: IntFilter<"User"> | number
    estado?: IntNullableFilter<"User"> | number | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    id_operador?: SortOrderInput | SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    ci?: SortOrder
    celular?: SortOrder
    rol?: SortOrder
    estado?: SortOrderInput | SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringNullableFilter<"User"> | string | null
    id_operador?: IntNullableFilter<"User"> | number | null
    nombre?: StringFilter<"User"> | string
    apellidos?: StringFilter<"User"> | string
    ci?: StringFilter<"User"> | string
    celular?: IntFilter<"User"> | number
    rol?: IntFilter<"User"> | number
    estado?: IntNullableFilter<"User"> | number | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    id_operador?: SortOrderInput | SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    ci?: SortOrder
    celular?: SortOrder
    rol?: SortOrder
    estado?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    id_operador?: IntNullableWithAggregatesFilter<"User"> | number | null
    nombre?: StringWithAggregatesFilter<"User"> | string
    apellidos?: StringWithAggregatesFilter<"User"> | string
    ci?: StringWithAggregatesFilter<"User"> | string
    celular?: IntWithAggregatesFilter<"User"> | number
    rol?: IntWithAggregatesFilter<"User"> | number
    estado?: IntNullableWithAggregatesFilter<"User"> | number | null
  }

  export type OperatorWhereInput = {
    AND?: OperatorWhereInput | OperatorWhereInput[]
    OR?: OperatorWhereInput[]
    NOT?: OperatorWhereInput | OperatorWhereInput[]
    id?: IntFilter<"Operator"> | number
    razon_social?: StringFilter<"Operator"> | string
    nit?: IntFilter<"Operator"> | number
    nim_niar?: IntFilter<"Operator"> | number
    nro_nim?: StringFilter<"Operator"> | string
    fecha_exp_nim?: DateTimeFilter<"Operator"> | Date | string
    tipo_operador?: IntFilter<"Operator"> | number
    nro_personeria?: StringNullableFilter<"Operator"> | string | null
    nro_matricula_seprec?: StringNullableFilter<"Operator"> | string | null
    fecha_exp_seprec?: DateTimeNullableFilter<"Operator"> | Date | string | null
    tipo_doc_creacion?: IntNullableFilter<"Operator"> | number | null
    doc_creacion?: StringNullableFilter<"Operator"> | string | null
    dl_departamento?: IntFilter<"Operator"> | number
    dl_municipio?: IntFilter<"Operator"> | number
    dl_direccion?: StringFilter<"Operator"> | string
    dl_ubicacion?: StringFilter<"Operator"> | string
    correo_inst?: StringNullableFilter<"Operator"> | string | null
    tel_fijo?: StringNullableFilter<"Operator"> | string | null
    celular?: IntFilter<"Operator"> | number
    celular_2?: IntNullableFilter<"Operator"> | number | null
    act_exploracion?: IntNullableFilter<"Operator"> | number | null
    act_comer_interna?: IntNullableFilter<"Operator"> | number | null
    act_comer_externa?: IntNullableFilter<"Operator"> | number | null
    act_industrializacion?: IntNullableFilter<"Operator"> | number | null
    act_tras_colas?: IntNullableFilter<"Operator"> | number | null
    act_explotacion?: IntNullableFilter<"Operator"> | number | null
    act_ben_concentracion?: IntNullableFilter<"Operator"> | number | null
    act_refinacion?: IntNullableFilter<"Operator"> | number | null
    act_fundicion?: IntNullableFilter<"Operator"> | number | null
    tipo_explotacion?: IntNullableFilter<"Operator"> | number | null
    denominacion_area?: StringNullableFilter<"Operator"> | string | null
    nro_codigo_unico?: StringNullableFilter<"Operator"> | string | null
    nro_cuadricula?: StringNullableFilter<"Operator"> | string | null
    municipio_origen?: StringNullableFilter<"Operator"> | string | null
    nro_ruex?: StringNullableFilter<"Operator"> | string | null
    verif_cert_liberacion?: IntNullableFilter<"Operator"> | number | null
    nro_res_ministerial?: IntNullableFilter<"Operator"> | number | null
    nombre_resp_for101?: StringNullableFilter<"Operator"> | string | null
    ci_resp_for101?: StringNullableFilter<"Operator"> | string | null
    celular_resp_for101?: IntNullableFilter<"Operator"> | number | null
    correo_resp_for101?: StringNullableFilter<"Operator"> | string | null
    nombre_resp_tmuestra?: StringNullableFilter<"Operator"> | string | null
    ci_resp_tmuestra?: StringNullableFilter<"Operator"> | string | null
    celular_resp_tmuestra?: IntNullableFilter<"Operator"> | number | null
    correo_resp_tmuestra?: StringNullableFilter<"Operator"> | string | null
    samples?: SampleListRelationFilter
  }

  export type OperatorOrderByWithRelationInput = {
    id?: SortOrder
    razon_social?: SortOrder
    nit?: SortOrder
    nim_niar?: SortOrder
    nro_nim?: SortOrder
    fecha_exp_nim?: SortOrder
    tipo_operador?: SortOrder
    nro_personeria?: SortOrderInput | SortOrder
    nro_matricula_seprec?: SortOrderInput | SortOrder
    fecha_exp_seprec?: SortOrderInput | SortOrder
    tipo_doc_creacion?: SortOrderInput | SortOrder
    doc_creacion?: SortOrderInput | SortOrder
    dl_departamento?: SortOrder
    dl_municipio?: SortOrder
    dl_direccion?: SortOrder
    dl_ubicacion?: SortOrder
    correo_inst?: SortOrderInput | SortOrder
    tel_fijo?: SortOrderInput | SortOrder
    celular?: SortOrder
    celular_2?: SortOrderInput | SortOrder
    act_exploracion?: SortOrderInput | SortOrder
    act_comer_interna?: SortOrderInput | SortOrder
    act_comer_externa?: SortOrderInput | SortOrder
    act_industrializacion?: SortOrderInput | SortOrder
    act_tras_colas?: SortOrderInput | SortOrder
    act_explotacion?: SortOrderInput | SortOrder
    act_ben_concentracion?: SortOrderInput | SortOrder
    act_refinacion?: SortOrderInput | SortOrder
    act_fundicion?: SortOrderInput | SortOrder
    tipo_explotacion?: SortOrderInput | SortOrder
    denominacion_area?: SortOrderInput | SortOrder
    nro_codigo_unico?: SortOrderInput | SortOrder
    nro_cuadricula?: SortOrderInput | SortOrder
    municipio_origen?: SortOrderInput | SortOrder
    nro_ruex?: SortOrderInput | SortOrder
    verif_cert_liberacion?: SortOrderInput | SortOrder
    nro_res_ministerial?: SortOrderInput | SortOrder
    nombre_resp_for101?: SortOrderInput | SortOrder
    ci_resp_for101?: SortOrderInput | SortOrder
    celular_resp_for101?: SortOrderInput | SortOrder
    correo_resp_for101?: SortOrderInput | SortOrder
    nombre_resp_tmuestra?: SortOrderInput | SortOrder
    ci_resp_tmuestra?: SortOrderInput | SortOrder
    celular_resp_tmuestra?: SortOrderInput | SortOrder
    correo_resp_tmuestra?: SortOrderInput | SortOrder
    samples?: SampleOrderByRelationAggregateInput
  }

  export type OperatorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    razon_social?: string
    AND?: OperatorWhereInput | OperatorWhereInput[]
    OR?: OperatorWhereInput[]
    NOT?: OperatorWhereInput | OperatorWhereInput[]
    nit?: IntFilter<"Operator"> | number
    nim_niar?: IntFilter<"Operator"> | number
    nro_nim?: StringFilter<"Operator"> | string
    fecha_exp_nim?: DateTimeFilter<"Operator"> | Date | string
    tipo_operador?: IntFilter<"Operator"> | number
    nro_personeria?: StringNullableFilter<"Operator"> | string | null
    nro_matricula_seprec?: StringNullableFilter<"Operator"> | string | null
    fecha_exp_seprec?: DateTimeNullableFilter<"Operator"> | Date | string | null
    tipo_doc_creacion?: IntNullableFilter<"Operator"> | number | null
    doc_creacion?: StringNullableFilter<"Operator"> | string | null
    dl_departamento?: IntFilter<"Operator"> | number
    dl_municipio?: IntFilter<"Operator"> | number
    dl_direccion?: StringFilter<"Operator"> | string
    dl_ubicacion?: StringFilter<"Operator"> | string
    correo_inst?: StringNullableFilter<"Operator"> | string | null
    tel_fijo?: StringNullableFilter<"Operator"> | string | null
    celular?: IntFilter<"Operator"> | number
    celular_2?: IntNullableFilter<"Operator"> | number | null
    act_exploracion?: IntNullableFilter<"Operator"> | number | null
    act_comer_interna?: IntNullableFilter<"Operator"> | number | null
    act_comer_externa?: IntNullableFilter<"Operator"> | number | null
    act_industrializacion?: IntNullableFilter<"Operator"> | number | null
    act_tras_colas?: IntNullableFilter<"Operator"> | number | null
    act_explotacion?: IntNullableFilter<"Operator"> | number | null
    act_ben_concentracion?: IntNullableFilter<"Operator"> | number | null
    act_refinacion?: IntNullableFilter<"Operator"> | number | null
    act_fundicion?: IntNullableFilter<"Operator"> | number | null
    tipo_explotacion?: IntNullableFilter<"Operator"> | number | null
    denominacion_area?: StringNullableFilter<"Operator"> | string | null
    nro_codigo_unico?: StringNullableFilter<"Operator"> | string | null
    nro_cuadricula?: StringNullableFilter<"Operator"> | string | null
    municipio_origen?: StringNullableFilter<"Operator"> | string | null
    nro_ruex?: StringNullableFilter<"Operator"> | string | null
    verif_cert_liberacion?: IntNullableFilter<"Operator"> | number | null
    nro_res_ministerial?: IntNullableFilter<"Operator"> | number | null
    nombre_resp_for101?: StringNullableFilter<"Operator"> | string | null
    ci_resp_for101?: StringNullableFilter<"Operator"> | string | null
    celular_resp_for101?: IntNullableFilter<"Operator"> | number | null
    correo_resp_for101?: StringNullableFilter<"Operator"> | string | null
    nombre_resp_tmuestra?: StringNullableFilter<"Operator"> | string | null
    ci_resp_tmuestra?: StringNullableFilter<"Operator"> | string | null
    celular_resp_tmuestra?: IntNullableFilter<"Operator"> | number | null
    correo_resp_tmuestra?: StringNullableFilter<"Operator"> | string | null
    samples?: SampleListRelationFilter
  }, "id" | "razon_social">

  export type OperatorOrderByWithAggregationInput = {
    id?: SortOrder
    razon_social?: SortOrder
    nit?: SortOrder
    nim_niar?: SortOrder
    nro_nim?: SortOrder
    fecha_exp_nim?: SortOrder
    tipo_operador?: SortOrder
    nro_personeria?: SortOrderInput | SortOrder
    nro_matricula_seprec?: SortOrderInput | SortOrder
    fecha_exp_seprec?: SortOrderInput | SortOrder
    tipo_doc_creacion?: SortOrderInput | SortOrder
    doc_creacion?: SortOrderInput | SortOrder
    dl_departamento?: SortOrder
    dl_municipio?: SortOrder
    dl_direccion?: SortOrder
    dl_ubicacion?: SortOrder
    correo_inst?: SortOrderInput | SortOrder
    tel_fijo?: SortOrderInput | SortOrder
    celular?: SortOrder
    celular_2?: SortOrderInput | SortOrder
    act_exploracion?: SortOrderInput | SortOrder
    act_comer_interna?: SortOrderInput | SortOrder
    act_comer_externa?: SortOrderInput | SortOrder
    act_industrializacion?: SortOrderInput | SortOrder
    act_tras_colas?: SortOrderInput | SortOrder
    act_explotacion?: SortOrderInput | SortOrder
    act_ben_concentracion?: SortOrderInput | SortOrder
    act_refinacion?: SortOrderInput | SortOrder
    act_fundicion?: SortOrderInput | SortOrder
    tipo_explotacion?: SortOrderInput | SortOrder
    denominacion_area?: SortOrderInput | SortOrder
    nro_codigo_unico?: SortOrderInput | SortOrder
    nro_cuadricula?: SortOrderInput | SortOrder
    municipio_origen?: SortOrderInput | SortOrder
    nro_ruex?: SortOrderInput | SortOrder
    verif_cert_liberacion?: SortOrderInput | SortOrder
    nro_res_ministerial?: SortOrderInput | SortOrder
    nombre_resp_for101?: SortOrderInput | SortOrder
    ci_resp_for101?: SortOrderInput | SortOrder
    celular_resp_for101?: SortOrderInput | SortOrder
    correo_resp_for101?: SortOrderInput | SortOrder
    nombre_resp_tmuestra?: SortOrderInput | SortOrder
    ci_resp_tmuestra?: SortOrderInput | SortOrder
    celular_resp_tmuestra?: SortOrderInput | SortOrder
    correo_resp_tmuestra?: SortOrderInput | SortOrder
    _count?: OperatorCountOrderByAggregateInput
    _avg?: OperatorAvgOrderByAggregateInput
    _max?: OperatorMaxOrderByAggregateInput
    _min?: OperatorMinOrderByAggregateInput
    _sum?: OperatorSumOrderByAggregateInput
  }

  export type OperatorScalarWhereWithAggregatesInput = {
    AND?: OperatorScalarWhereWithAggregatesInput | OperatorScalarWhereWithAggregatesInput[]
    OR?: OperatorScalarWhereWithAggregatesInput[]
    NOT?: OperatorScalarWhereWithAggregatesInput | OperatorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Operator"> | number
    razon_social?: StringWithAggregatesFilter<"Operator"> | string
    nit?: IntWithAggregatesFilter<"Operator"> | number
    nim_niar?: IntWithAggregatesFilter<"Operator"> | number
    nro_nim?: StringWithAggregatesFilter<"Operator"> | string
    fecha_exp_nim?: DateTimeWithAggregatesFilter<"Operator"> | Date | string
    tipo_operador?: IntWithAggregatesFilter<"Operator"> | number
    nro_personeria?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    nro_matricula_seprec?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    fecha_exp_seprec?: DateTimeNullableWithAggregatesFilter<"Operator"> | Date | string | null
    tipo_doc_creacion?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    doc_creacion?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    dl_departamento?: IntWithAggregatesFilter<"Operator"> | number
    dl_municipio?: IntWithAggregatesFilter<"Operator"> | number
    dl_direccion?: StringWithAggregatesFilter<"Operator"> | string
    dl_ubicacion?: StringWithAggregatesFilter<"Operator"> | string
    correo_inst?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    tel_fijo?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    celular?: IntWithAggregatesFilter<"Operator"> | number
    celular_2?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    act_exploracion?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    act_comer_interna?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    act_comer_externa?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    act_industrializacion?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    act_tras_colas?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    act_explotacion?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    act_ben_concentracion?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    act_refinacion?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    act_fundicion?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    tipo_explotacion?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    denominacion_area?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    nro_codigo_unico?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    nro_cuadricula?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    municipio_origen?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    nro_ruex?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    verif_cert_liberacion?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    nro_res_ministerial?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    nombre_resp_for101?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    ci_resp_for101?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    celular_resp_for101?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    correo_resp_for101?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    nombre_resp_tmuestra?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    ci_resp_tmuestra?: StringNullableWithAggregatesFilter<"Operator"> | string | null
    celular_resp_tmuestra?: IntNullableWithAggregatesFilter<"Operator"> | number | null
    correo_resp_tmuestra?: StringNullableWithAggregatesFilter<"Operator"> | string | null
  }

  export type SampleWhereInput = {
    AND?: SampleWhereInput | SampleWhereInput[]
    OR?: SampleWhereInput[]
    NOT?: SampleWhereInput | SampleWhereInput[]
    id?: IntFilter<"Sample"> | number
    fecha_emision?: DateTimeFilter<"Sample"> | Date | string
    ubi_geografica?: StringFilter<"Sample"> | string
    lugar_verificacion?: StringFilter<"Sample"> | string
    id_operador?: IntFilter<"Sample"> | number
    responsable?: StringFilter<"Sample"> | string
    lotes?: StringFilter<"Sample"> | string
    tipo_muestra?: IntFilter<"Sample"> | number
    presentacion?: IntFilter<"Sample"> | number
    sacos?: IntFilter<"Sample"> | number
    camiones?: IntFilter<"Sample"> | number
    peso_neto?: DecimalFilter<"Sample"> | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalFilter<"Sample"> | Decimal | DecimalJsLike | number | string
    id_municipio?: IntFilter<"Sample"> | number
    senerecom?: StringFilter<"Sample"> | string
    tipo_agranel?: IntNullableFilter<"Sample"> | number | null
    tipo_emsacado?: IntNullableFilter<"Sample"> | number | null
    tipo_lingotes?: IntNullableFilter<"Sample"> | number | null
    tipo_sal?: IntNullableFilter<"Sample"> | number | null
    tipo_otr?: IntNullableFilter<"Sample"> | number | null
    observaciones?: StringNullableFilter<"Sample"> | string | null
    estado?: IntFilter<"Sample"> | number
    formExtId?: IntNullableFilter<"Sample"> | number | null
    operador?: XOR<OperatorRelationFilter, OperatorWhereInput>
    minerales?: SampleMineralListRelationFilter
    formExt?: XOR<FormExtNullableRelationFilter, FormExtWhereInput> | null
  }

  export type SampleOrderByWithRelationInput = {
    id?: SortOrder
    fecha_emision?: SortOrder
    ubi_geografica?: SortOrder
    lugar_verificacion?: SortOrder
    id_operador?: SortOrder
    responsable?: SortOrder
    lotes?: SortOrder
    tipo_muestra?: SortOrder
    presentacion?: SortOrder
    sacos?: SortOrder
    camiones?: SortOrder
    peso_neto?: SortOrder
    peso_parcial?: SortOrder
    id_municipio?: SortOrder
    senerecom?: SortOrder
    tipo_agranel?: SortOrderInput | SortOrder
    tipo_emsacado?: SortOrderInput | SortOrder
    tipo_lingotes?: SortOrderInput | SortOrder
    tipo_sal?: SortOrderInput | SortOrder
    tipo_otr?: SortOrderInput | SortOrder
    observaciones?: SortOrderInput | SortOrder
    estado?: SortOrder
    formExtId?: SortOrderInput | SortOrder
    operador?: OperatorOrderByWithRelationInput
    minerales?: SampleMineralOrderByRelationAggregateInput
    formExt?: FormExtOrderByWithRelationInput
  }

  export type SampleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    formExtId?: number
    AND?: SampleWhereInput | SampleWhereInput[]
    OR?: SampleWhereInput[]
    NOT?: SampleWhereInput | SampleWhereInput[]
    fecha_emision?: DateTimeFilter<"Sample"> | Date | string
    ubi_geografica?: StringFilter<"Sample"> | string
    lugar_verificacion?: StringFilter<"Sample"> | string
    id_operador?: IntFilter<"Sample"> | number
    responsable?: StringFilter<"Sample"> | string
    lotes?: StringFilter<"Sample"> | string
    tipo_muestra?: IntFilter<"Sample"> | number
    presentacion?: IntFilter<"Sample"> | number
    sacos?: IntFilter<"Sample"> | number
    camiones?: IntFilter<"Sample"> | number
    peso_neto?: DecimalFilter<"Sample"> | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalFilter<"Sample"> | Decimal | DecimalJsLike | number | string
    id_municipio?: IntFilter<"Sample"> | number
    senerecom?: StringFilter<"Sample"> | string
    tipo_agranel?: IntNullableFilter<"Sample"> | number | null
    tipo_emsacado?: IntNullableFilter<"Sample"> | number | null
    tipo_lingotes?: IntNullableFilter<"Sample"> | number | null
    tipo_sal?: IntNullableFilter<"Sample"> | number | null
    tipo_otr?: IntNullableFilter<"Sample"> | number | null
    observaciones?: StringNullableFilter<"Sample"> | string | null
    estado?: IntFilter<"Sample"> | number
    operador?: XOR<OperatorRelationFilter, OperatorWhereInput>
    minerales?: SampleMineralListRelationFilter
    formExt?: XOR<FormExtNullableRelationFilter, FormExtWhereInput> | null
  }, "id" | "formExtId">

  export type SampleOrderByWithAggregationInput = {
    id?: SortOrder
    fecha_emision?: SortOrder
    ubi_geografica?: SortOrder
    lugar_verificacion?: SortOrder
    id_operador?: SortOrder
    responsable?: SortOrder
    lotes?: SortOrder
    tipo_muestra?: SortOrder
    presentacion?: SortOrder
    sacos?: SortOrder
    camiones?: SortOrder
    peso_neto?: SortOrder
    peso_parcial?: SortOrder
    id_municipio?: SortOrder
    senerecom?: SortOrder
    tipo_agranel?: SortOrderInput | SortOrder
    tipo_emsacado?: SortOrderInput | SortOrder
    tipo_lingotes?: SortOrderInput | SortOrder
    tipo_sal?: SortOrderInput | SortOrder
    tipo_otr?: SortOrderInput | SortOrder
    observaciones?: SortOrderInput | SortOrder
    estado?: SortOrder
    formExtId?: SortOrderInput | SortOrder
    _count?: SampleCountOrderByAggregateInput
    _avg?: SampleAvgOrderByAggregateInput
    _max?: SampleMaxOrderByAggregateInput
    _min?: SampleMinOrderByAggregateInput
    _sum?: SampleSumOrderByAggregateInput
  }

  export type SampleScalarWhereWithAggregatesInput = {
    AND?: SampleScalarWhereWithAggregatesInput | SampleScalarWhereWithAggregatesInput[]
    OR?: SampleScalarWhereWithAggregatesInput[]
    NOT?: SampleScalarWhereWithAggregatesInput | SampleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Sample"> | number
    fecha_emision?: DateTimeWithAggregatesFilter<"Sample"> | Date | string
    ubi_geografica?: StringWithAggregatesFilter<"Sample"> | string
    lugar_verificacion?: StringWithAggregatesFilter<"Sample"> | string
    id_operador?: IntWithAggregatesFilter<"Sample"> | number
    responsable?: StringWithAggregatesFilter<"Sample"> | string
    lotes?: StringWithAggregatesFilter<"Sample"> | string
    tipo_muestra?: IntWithAggregatesFilter<"Sample"> | number
    presentacion?: IntWithAggregatesFilter<"Sample"> | number
    sacos?: IntWithAggregatesFilter<"Sample"> | number
    camiones?: IntWithAggregatesFilter<"Sample"> | number
    peso_neto?: DecimalWithAggregatesFilter<"Sample"> | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalWithAggregatesFilter<"Sample"> | Decimal | DecimalJsLike | number | string
    id_municipio?: IntWithAggregatesFilter<"Sample"> | number
    senerecom?: StringWithAggregatesFilter<"Sample"> | string
    tipo_agranel?: IntNullableWithAggregatesFilter<"Sample"> | number | null
    tipo_emsacado?: IntNullableWithAggregatesFilter<"Sample"> | number | null
    tipo_lingotes?: IntNullableWithAggregatesFilter<"Sample"> | number | null
    tipo_sal?: IntNullableWithAggregatesFilter<"Sample"> | number | null
    tipo_otr?: IntNullableWithAggregatesFilter<"Sample"> | number | null
    observaciones?: StringNullableWithAggregatesFilter<"Sample"> | string | null
    estado?: IntWithAggregatesFilter<"Sample"> | number
    formExtId?: IntNullableWithAggregatesFilter<"Sample"> | number | null
  }

  export type MineralWhereInput = {
    AND?: MineralWhereInput | MineralWhereInput[]
    OR?: MineralWhereInput[]
    NOT?: MineralWhereInput | MineralWhereInput[]
    id?: IntFilter<"Mineral"> | number
    nombre?: StringFilter<"Mineral"> | string
    sigla?: StringFilter<"Mineral"> | string
    descripcion?: StringFilter<"Mineral"> | string
    estado?: IntFilter<"Mineral"> | number
    sample?: SampleMineralListRelationFilter
  }

  export type MineralOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    sigla?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    sample?: SampleMineralOrderByRelationAggregateInput
  }

  export type MineralWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MineralWhereInput | MineralWhereInput[]
    OR?: MineralWhereInput[]
    NOT?: MineralWhereInput | MineralWhereInput[]
    nombre?: StringFilter<"Mineral"> | string
    sigla?: StringFilter<"Mineral"> | string
    descripcion?: StringFilter<"Mineral"> | string
    estado?: IntFilter<"Mineral"> | number
    sample?: SampleMineralListRelationFilter
  }, "id">

  export type MineralOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    sigla?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
    _count?: MineralCountOrderByAggregateInput
    _avg?: MineralAvgOrderByAggregateInput
    _max?: MineralMaxOrderByAggregateInput
    _min?: MineralMinOrderByAggregateInput
    _sum?: MineralSumOrderByAggregateInput
  }

  export type MineralScalarWhereWithAggregatesInput = {
    AND?: MineralScalarWhereWithAggregatesInput | MineralScalarWhereWithAggregatesInput[]
    OR?: MineralScalarWhereWithAggregatesInput[]
    NOT?: MineralScalarWhereWithAggregatesInput | MineralScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Mineral"> | number
    nombre?: StringWithAggregatesFilter<"Mineral"> | string
    sigla?: StringWithAggregatesFilter<"Mineral"> | string
    descripcion?: StringWithAggregatesFilter<"Mineral"> | string
    estado?: IntWithAggregatesFilter<"Mineral"> | number
  }

  export type SampleMineralWhereInput = {
    AND?: SampleMineralWhereInput | SampleMineralWhereInput[]
    OR?: SampleMineralWhereInput[]
    NOT?: SampleMineralWhereInput | SampleMineralWhereInput[]
    sampleId?: IntFilter<"SampleMineral"> | number
    mineralId?: IntFilter<"SampleMineral"> | number
    ley?: IntFilter<"SampleMineral"> | number
    unidad?: StringFilter<"SampleMineral"> | string
    sample?: XOR<SampleRelationFilter, SampleWhereInput>
    mineral?: XOR<MineralRelationFilter, MineralWhereInput>
  }

  export type SampleMineralOrderByWithRelationInput = {
    sampleId?: SortOrder
    mineralId?: SortOrder
    ley?: SortOrder
    unidad?: SortOrder
    sample?: SampleOrderByWithRelationInput
    mineral?: MineralOrderByWithRelationInput
  }

  export type SampleMineralWhereUniqueInput = Prisma.AtLeast<{
    sampleId_mineralId?: SampleMineralSampleIdMineralIdCompoundUniqueInput
    AND?: SampleMineralWhereInput | SampleMineralWhereInput[]
    OR?: SampleMineralWhereInput[]
    NOT?: SampleMineralWhereInput | SampleMineralWhereInput[]
    sampleId?: IntFilter<"SampleMineral"> | number
    mineralId?: IntFilter<"SampleMineral"> | number
    ley?: IntFilter<"SampleMineral"> | number
    unidad?: StringFilter<"SampleMineral"> | string
    sample?: XOR<SampleRelationFilter, SampleWhereInput>
    mineral?: XOR<MineralRelationFilter, MineralWhereInput>
  }, "sampleId_mineralId">

  export type SampleMineralOrderByWithAggregationInput = {
    sampleId?: SortOrder
    mineralId?: SortOrder
    ley?: SortOrder
    unidad?: SortOrder
    _count?: SampleMineralCountOrderByAggregateInput
    _avg?: SampleMineralAvgOrderByAggregateInput
    _max?: SampleMineralMaxOrderByAggregateInput
    _min?: SampleMineralMinOrderByAggregateInput
    _sum?: SampleMineralSumOrderByAggregateInput
  }

  export type SampleMineralScalarWhereWithAggregatesInput = {
    AND?: SampleMineralScalarWhereWithAggregatesInput | SampleMineralScalarWhereWithAggregatesInput[]
    OR?: SampleMineralScalarWhereWithAggregatesInput[]
    NOT?: SampleMineralScalarWhereWithAggregatesInput | SampleMineralScalarWhereWithAggregatesInput[]
    sampleId?: IntWithAggregatesFilter<"SampleMineral"> | number
    mineralId?: IntWithAggregatesFilter<"SampleMineral"> | number
    ley?: IntWithAggregatesFilter<"SampleMineral"> | number
    unidad?: StringWithAggregatesFilter<"SampleMineral"> | string
  }

  export type FormExtWhereInput = {
    AND?: FormExtWhereInput | FormExtWhereInput[]
    OR?: FormExtWhereInput[]
    NOT?: FormExtWhereInput | FormExtWhereInput[]
    id?: IntFilter<"FormExt"> | number
    id_sample?: IntFilter<"FormExt"> | number
    m03?: StringFilter<"FormExt"> | string
    nro_factura_exportacion?: IntFilter<"FormExt"> | number
    laboratorio?: StringFilter<"FormExt"> | string
    cod_analisis?: IntFilter<"FormExt"> | number
    des_comprador?: StringFilter<"FormExt"> | string
    des_aduana?: StringFilter<"FormExt"> | string
    des_pais?: StringFilter<"FormExt"> | string
    tipo_transporte?: StringFilter<"FormExt"> | string
    placa?: StringFilter<"FormExt"> | string
    nom_conductor?: StringFilter<"FormExt"> | string
    licencia?: StringFilter<"FormExt"> | string
    observaciones?: StringNullableFilter<"FormExt"> | string | null
    sample?: XOR<SampleRelationFilter, SampleWhereInput>
  }

  export type FormExtOrderByWithRelationInput = {
    id?: SortOrder
    id_sample?: SortOrder
    m03?: SortOrder
    nro_factura_exportacion?: SortOrder
    laboratorio?: SortOrder
    cod_analisis?: SortOrder
    des_comprador?: SortOrder
    des_aduana?: SortOrder
    des_pais?: SortOrder
    tipo_transporte?: SortOrder
    placa?: SortOrder
    nom_conductor?: SortOrder
    licencia?: SortOrder
    observaciones?: SortOrderInput | SortOrder
    sample?: SampleOrderByWithRelationInput
  }

  export type FormExtWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    id_sample?: number
    AND?: FormExtWhereInput | FormExtWhereInput[]
    OR?: FormExtWhereInput[]
    NOT?: FormExtWhereInput | FormExtWhereInput[]
    m03?: StringFilter<"FormExt"> | string
    nro_factura_exportacion?: IntFilter<"FormExt"> | number
    laboratorio?: StringFilter<"FormExt"> | string
    cod_analisis?: IntFilter<"FormExt"> | number
    des_comprador?: StringFilter<"FormExt"> | string
    des_aduana?: StringFilter<"FormExt"> | string
    des_pais?: StringFilter<"FormExt"> | string
    tipo_transporte?: StringFilter<"FormExt"> | string
    placa?: StringFilter<"FormExt"> | string
    nom_conductor?: StringFilter<"FormExt"> | string
    licencia?: StringFilter<"FormExt"> | string
    observaciones?: StringNullableFilter<"FormExt"> | string | null
    sample?: XOR<SampleRelationFilter, SampleWhereInput>
  }, "id" | "id_sample">

  export type FormExtOrderByWithAggregationInput = {
    id?: SortOrder
    id_sample?: SortOrder
    m03?: SortOrder
    nro_factura_exportacion?: SortOrder
    laboratorio?: SortOrder
    cod_analisis?: SortOrder
    des_comprador?: SortOrder
    des_aduana?: SortOrder
    des_pais?: SortOrder
    tipo_transporte?: SortOrder
    placa?: SortOrder
    nom_conductor?: SortOrder
    licencia?: SortOrder
    observaciones?: SortOrderInput | SortOrder
    _count?: FormExtCountOrderByAggregateInput
    _avg?: FormExtAvgOrderByAggregateInput
    _max?: FormExtMaxOrderByAggregateInput
    _min?: FormExtMinOrderByAggregateInput
    _sum?: FormExtSumOrderByAggregateInput
  }

  export type FormExtScalarWhereWithAggregatesInput = {
    AND?: FormExtScalarWhereWithAggregatesInput | FormExtScalarWhereWithAggregatesInput[]
    OR?: FormExtScalarWhereWithAggregatesInput[]
    NOT?: FormExtScalarWhereWithAggregatesInput | FormExtScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FormExt"> | number
    id_sample?: IntWithAggregatesFilter<"FormExt"> | number
    m03?: StringWithAggregatesFilter<"FormExt"> | string
    nro_factura_exportacion?: IntWithAggregatesFilter<"FormExt"> | number
    laboratorio?: StringWithAggregatesFilter<"FormExt"> | string
    cod_analisis?: IntWithAggregatesFilter<"FormExt"> | number
    des_comprador?: StringWithAggregatesFilter<"FormExt"> | string
    des_aduana?: StringWithAggregatesFilter<"FormExt"> | string
    des_pais?: StringWithAggregatesFilter<"FormExt"> | string
    tipo_transporte?: StringWithAggregatesFilter<"FormExt"> | string
    placa?: StringWithAggregatesFilter<"FormExt"> | string
    nom_conductor?: StringWithAggregatesFilter<"FormExt"> | string
    licencia?: StringWithAggregatesFilter<"FormExt"> | string
    observaciones?: StringNullableWithAggregatesFilter<"FormExt"> | string | null
  }

  export type UserCreateInput = {
    email: string
    password?: string | null
    id_operador?: number | null
    nombre: string
    apellidos: string
    ci: string
    celular: number
    rol: number
    estado?: number | null
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password?: string | null
    id_operador?: number | null
    nombre: string
    apellidos: string
    ci: string
    celular: number
    rol: number
    estado?: number | null
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    id_operador?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    ci?: StringFieldUpdateOperationsInput | string
    celular?: IntFieldUpdateOperationsInput | number
    rol?: IntFieldUpdateOperationsInput | number
    estado?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    id_operador?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    ci?: StringFieldUpdateOperationsInput | string
    celular?: IntFieldUpdateOperationsInput | number
    rol?: IntFieldUpdateOperationsInput | number
    estado?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password?: string | null
    id_operador?: number | null
    nombre: string
    apellidos: string
    ci: string
    celular: number
    rol: number
    estado?: number | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    id_operador?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    ci?: StringFieldUpdateOperationsInput | string
    celular?: IntFieldUpdateOperationsInput | number
    rol?: IntFieldUpdateOperationsInput | number
    estado?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    id_operador?: NullableIntFieldUpdateOperationsInput | number | null
    nombre?: StringFieldUpdateOperationsInput | string
    apellidos?: StringFieldUpdateOperationsInput | string
    ci?: StringFieldUpdateOperationsInput | string
    celular?: IntFieldUpdateOperationsInput | number
    rol?: IntFieldUpdateOperationsInput | number
    estado?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OperatorCreateInput = {
    razon_social: string
    nit: number
    nim_niar: number
    nro_nim: string
    fecha_exp_nim: Date | string
    tipo_operador: number
    nro_personeria?: string | null
    nro_matricula_seprec?: string | null
    fecha_exp_seprec?: Date | string | null
    tipo_doc_creacion?: number | null
    doc_creacion?: string | null
    dl_departamento: number
    dl_municipio: number
    dl_direccion: string
    dl_ubicacion: string
    correo_inst?: string | null
    tel_fijo?: string | null
    celular: number
    celular_2?: number | null
    act_exploracion?: number | null
    act_comer_interna?: number | null
    act_comer_externa?: number | null
    act_industrializacion?: number | null
    act_tras_colas?: number | null
    act_explotacion?: number | null
    act_ben_concentracion?: number | null
    act_refinacion?: number | null
    act_fundicion?: number | null
    tipo_explotacion?: number | null
    denominacion_area?: string | null
    nro_codigo_unico?: string | null
    nro_cuadricula?: string | null
    municipio_origen?: string | null
    nro_ruex?: string | null
    verif_cert_liberacion?: number | null
    nro_res_ministerial?: number | null
    nombre_resp_for101?: string | null
    ci_resp_for101?: string | null
    celular_resp_for101?: number | null
    correo_resp_for101?: string | null
    nombre_resp_tmuestra?: string | null
    ci_resp_tmuestra?: string | null
    celular_resp_tmuestra?: number | null
    correo_resp_tmuestra?: string | null
    samples?: SampleCreateNestedManyWithoutOperadorInput
  }

  export type OperatorUncheckedCreateInput = {
    id?: number
    razon_social: string
    nit: number
    nim_niar: number
    nro_nim: string
    fecha_exp_nim: Date | string
    tipo_operador: number
    nro_personeria?: string | null
    nro_matricula_seprec?: string | null
    fecha_exp_seprec?: Date | string | null
    tipo_doc_creacion?: number | null
    doc_creacion?: string | null
    dl_departamento: number
    dl_municipio: number
    dl_direccion: string
    dl_ubicacion: string
    correo_inst?: string | null
    tel_fijo?: string | null
    celular: number
    celular_2?: number | null
    act_exploracion?: number | null
    act_comer_interna?: number | null
    act_comer_externa?: number | null
    act_industrializacion?: number | null
    act_tras_colas?: number | null
    act_explotacion?: number | null
    act_ben_concentracion?: number | null
    act_refinacion?: number | null
    act_fundicion?: number | null
    tipo_explotacion?: number | null
    denominacion_area?: string | null
    nro_codigo_unico?: string | null
    nro_cuadricula?: string | null
    municipio_origen?: string | null
    nro_ruex?: string | null
    verif_cert_liberacion?: number | null
    nro_res_ministerial?: number | null
    nombre_resp_for101?: string | null
    ci_resp_for101?: string | null
    celular_resp_for101?: number | null
    correo_resp_for101?: string | null
    nombre_resp_tmuestra?: string | null
    ci_resp_tmuestra?: string | null
    celular_resp_tmuestra?: number | null
    correo_resp_tmuestra?: string | null
    samples?: SampleUncheckedCreateNestedManyWithoutOperadorInput
  }

  export type OperatorUpdateInput = {
    razon_social?: StringFieldUpdateOperationsInput | string
    nit?: IntFieldUpdateOperationsInput | number
    nim_niar?: IntFieldUpdateOperationsInput | number
    nro_nim?: StringFieldUpdateOperationsInput | string
    fecha_exp_nim?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_operador?: IntFieldUpdateOperationsInput | number
    nro_personeria?: NullableStringFieldUpdateOperationsInput | string | null
    nro_matricula_seprec?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_exp_seprec?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipo_doc_creacion?: NullableIntFieldUpdateOperationsInput | number | null
    doc_creacion?: NullableStringFieldUpdateOperationsInput | string | null
    dl_departamento?: IntFieldUpdateOperationsInput | number
    dl_municipio?: IntFieldUpdateOperationsInput | number
    dl_direccion?: StringFieldUpdateOperationsInput | string
    dl_ubicacion?: StringFieldUpdateOperationsInput | string
    correo_inst?: NullableStringFieldUpdateOperationsInput | string | null
    tel_fijo?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: IntFieldUpdateOperationsInput | number
    celular_2?: NullableIntFieldUpdateOperationsInput | number | null
    act_exploracion?: NullableIntFieldUpdateOperationsInput | number | null
    act_comer_interna?: NullableIntFieldUpdateOperationsInput | number | null
    act_comer_externa?: NullableIntFieldUpdateOperationsInput | number | null
    act_industrializacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_tras_colas?: NullableIntFieldUpdateOperationsInput | number | null
    act_explotacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_ben_concentracion?: NullableIntFieldUpdateOperationsInput | number | null
    act_refinacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_fundicion?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_explotacion?: NullableIntFieldUpdateOperationsInput | number | null
    denominacion_area?: NullableStringFieldUpdateOperationsInput | string | null
    nro_codigo_unico?: NullableStringFieldUpdateOperationsInput | string | null
    nro_cuadricula?: NullableStringFieldUpdateOperationsInput | string | null
    municipio_origen?: NullableStringFieldUpdateOperationsInput | string | null
    nro_ruex?: NullableStringFieldUpdateOperationsInput | string | null
    verif_cert_liberacion?: NullableIntFieldUpdateOperationsInput | number | null
    nro_res_ministerial?: NullableIntFieldUpdateOperationsInput | number | null
    nombre_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    ci_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    celular_resp_for101?: NullableIntFieldUpdateOperationsInput | number | null
    correo_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    nombre_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
    ci_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
    celular_resp_tmuestra?: NullableIntFieldUpdateOperationsInput | number | null
    correo_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
    samples?: SampleUpdateManyWithoutOperadorNestedInput
  }

  export type OperatorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    razon_social?: StringFieldUpdateOperationsInput | string
    nit?: IntFieldUpdateOperationsInput | number
    nim_niar?: IntFieldUpdateOperationsInput | number
    nro_nim?: StringFieldUpdateOperationsInput | string
    fecha_exp_nim?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_operador?: IntFieldUpdateOperationsInput | number
    nro_personeria?: NullableStringFieldUpdateOperationsInput | string | null
    nro_matricula_seprec?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_exp_seprec?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipo_doc_creacion?: NullableIntFieldUpdateOperationsInput | number | null
    doc_creacion?: NullableStringFieldUpdateOperationsInput | string | null
    dl_departamento?: IntFieldUpdateOperationsInput | number
    dl_municipio?: IntFieldUpdateOperationsInput | number
    dl_direccion?: StringFieldUpdateOperationsInput | string
    dl_ubicacion?: StringFieldUpdateOperationsInput | string
    correo_inst?: NullableStringFieldUpdateOperationsInput | string | null
    tel_fijo?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: IntFieldUpdateOperationsInput | number
    celular_2?: NullableIntFieldUpdateOperationsInput | number | null
    act_exploracion?: NullableIntFieldUpdateOperationsInput | number | null
    act_comer_interna?: NullableIntFieldUpdateOperationsInput | number | null
    act_comer_externa?: NullableIntFieldUpdateOperationsInput | number | null
    act_industrializacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_tras_colas?: NullableIntFieldUpdateOperationsInput | number | null
    act_explotacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_ben_concentracion?: NullableIntFieldUpdateOperationsInput | number | null
    act_refinacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_fundicion?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_explotacion?: NullableIntFieldUpdateOperationsInput | number | null
    denominacion_area?: NullableStringFieldUpdateOperationsInput | string | null
    nro_codigo_unico?: NullableStringFieldUpdateOperationsInput | string | null
    nro_cuadricula?: NullableStringFieldUpdateOperationsInput | string | null
    municipio_origen?: NullableStringFieldUpdateOperationsInput | string | null
    nro_ruex?: NullableStringFieldUpdateOperationsInput | string | null
    verif_cert_liberacion?: NullableIntFieldUpdateOperationsInput | number | null
    nro_res_ministerial?: NullableIntFieldUpdateOperationsInput | number | null
    nombre_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    ci_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    celular_resp_for101?: NullableIntFieldUpdateOperationsInput | number | null
    correo_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    nombre_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
    ci_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
    celular_resp_tmuestra?: NullableIntFieldUpdateOperationsInput | number | null
    correo_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
    samples?: SampleUncheckedUpdateManyWithoutOperadorNestedInput
  }

  export type OperatorCreateManyInput = {
    id?: number
    razon_social: string
    nit: number
    nim_niar: number
    nro_nim: string
    fecha_exp_nim: Date | string
    tipo_operador: number
    nro_personeria?: string | null
    nro_matricula_seprec?: string | null
    fecha_exp_seprec?: Date | string | null
    tipo_doc_creacion?: number | null
    doc_creacion?: string | null
    dl_departamento: number
    dl_municipio: number
    dl_direccion: string
    dl_ubicacion: string
    correo_inst?: string | null
    tel_fijo?: string | null
    celular: number
    celular_2?: number | null
    act_exploracion?: number | null
    act_comer_interna?: number | null
    act_comer_externa?: number | null
    act_industrializacion?: number | null
    act_tras_colas?: number | null
    act_explotacion?: number | null
    act_ben_concentracion?: number | null
    act_refinacion?: number | null
    act_fundicion?: number | null
    tipo_explotacion?: number | null
    denominacion_area?: string | null
    nro_codigo_unico?: string | null
    nro_cuadricula?: string | null
    municipio_origen?: string | null
    nro_ruex?: string | null
    verif_cert_liberacion?: number | null
    nro_res_ministerial?: number | null
    nombre_resp_for101?: string | null
    ci_resp_for101?: string | null
    celular_resp_for101?: number | null
    correo_resp_for101?: string | null
    nombre_resp_tmuestra?: string | null
    ci_resp_tmuestra?: string | null
    celular_resp_tmuestra?: number | null
    correo_resp_tmuestra?: string | null
  }

  export type OperatorUpdateManyMutationInput = {
    razon_social?: StringFieldUpdateOperationsInput | string
    nit?: IntFieldUpdateOperationsInput | number
    nim_niar?: IntFieldUpdateOperationsInput | number
    nro_nim?: StringFieldUpdateOperationsInput | string
    fecha_exp_nim?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_operador?: IntFieldUpdateOperationsInput | number
    nro_personeria?: NullableStringFieldUpdateOperationsInput | string | null
    nro_matricula_seprec?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_exp_seprec?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipo_doc_creacion?: NullableIntFieldUpdateOperationsInput | number | null
    doc_creacion?: NullableStringFieldUpdateOperationsInput | string | null
    dl_departamento?: IntFieldUpdateOperationsInput | number
    dl_municipio?: IntFieldUpdateOperationsInput | number
    dl_direccion?: StringFieldUpdateOperationsInput | string
    dl_ubicacion?: StringFieldUpdateOperationsInput | string
    correo_inst?: NullableStringFieldUpdateOperationsInput | string | null
    tel_fijo?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: IntFieldUpdateOperationsInput | number
    celular_2?: NullableIntFieldUpdateOperationsInput | number | null
    act_exploracion?: NullableIntFieldUpdateOperationsInput | number | null
    act_comer_interna?: NullableIntFieldUpdateOperationsInput | number | null
    act_comer_externa?: NullableIntFieldUpdateOperationsInput | number | null
    act_industrializacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_tras_colas?: NullableIntFieldUpdateOperationsInput | number | null
    act_explotacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_ben_concentracion?: NullableIntFieldUpdateOperationsInput | number | null
    act_refinacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_fundicion?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_explotacion?: NullableIntFieldUpdateOperationsInput | number | null
    denominacion_area?: NullableStringFieldUpdateOperationsInput | string | null
    nro_codigo_unico?: NullableStringFieldUpdateOperationsInput | string | null
    nro_cuadricula?: NullableStringFieldUpdateOperationsInput | string | null
    municipio_origen?: NullableStringFieldUpdateOperationsInput | string | null
    nro_ruex?: NullableStringFieldUpdateOperationsInput | string | null
    verif_cert_liberacion?: NullableIntFieldUpdateOperationsInput | number | null
    nro_res_ministerial?: NullableIntFieldUpdateOperationsInput | number | null
    nombre_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    ci_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    celular_resp_for101?: NullableIntFieldUpdateOperationsInput | number | null
    correo_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    nombre_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
    ci_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
    celular_resp_tmuestra?: NullableIntFieldUpdateOperationsInput | number | null
    correo_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OperatorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    razon_social?: StringFieldUpdateOperationsInput | string
    nit?: IntFieldUpdateOperationsInput | number
    nim_niar?: IntFieldUpdateOperationsInput | number
    nro_nim?: StringFieldUpdateOperationsInput | string
    fecha_exp_nim?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_operador?: IntFieldUpdateOperationsInput | number
    nro_personeria?: NullableStringFieldUpdateOperationsInput | string | null
    nro_matricula_seprec?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_exp_seprec?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipo_doc_creacion?: NullableIntFieldUpdateOperationsInput | number | null
    doc_creacion?: NullableStringFieldUpdateOperationsInput | string | null
    dl_departamento?: IntFieldUpdateOperationsInput | number
    dl_municipio?: IntFieldUpdateOperationsInput | number
    dl_direccion?: StringFieldUpdateOperationsInput | string
    dl_ubicacion?: StringFieldUpdateOperationsInput | string
    correo_inst?: NullableStringFieldUpdateOperationsInput | string | null
    tel_fijo?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: IntFieldUpdateOperationsInput | number
    celular_2?: NullableIntFieldUpdateOperationsInput | number | null
    act_exploracion?: NullableIntFieldUpdateOperationsInput | number | null
    act_comer_interna?: NullableIntFieldUpdateOperationsInput | number | null
    act_comer_externa?: NullableIntFieldUpdateOperationsInput | number | null
    act_industrializacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_tras_colas?: NullableIntFieldUpdateOperationsInput | number | null
    act_explotacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_ben_concentracion?: NullableIntFieldUpdateOperationsInput | number | null
    act_refinacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_fundicion?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_explotacion?: NullableIntFieldUpdateOperationsInput | number | null
    denominacion_area?: NullableStringFieldUpdateOperationsInput | string | null
    nro_codigo_unico?: NullableStringFieldUpdateOperationsInput | string | null
    nro_cuadricula?: NullableStringFieldUpdateOperationsInput | string | null
    municipio_origen?: NullableStringFieldUpdateOperationsInput | string | null
    nro_ruex?: NullableStringFieldUpdateOperationsInput | string | null
    verif_cert_liberacion?: NullableIntFieldUpdateOperationsInput | number | null
    nro_res_ministerial?: NullableIntFieldUpdateOperationsInput | number | null
    nombre_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    ci_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    celular_resp_for101?: NullableIntFieldUpdateOperationsInput | number | null
    correo_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    nombre_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
    ci_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
    celular_resp_tmuestra?: NullableIntFieldUpdateOperationsInput | number | null
    correo_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SampleCreateInput = {
    fecha_emision?: Date | string
    ubi_geografica: string
    lugar_verificacion: string
    responsable: string
    lotes: string
    tipo_muestra: number
    presentacion: number
    sacos: number
    camiones: number
    peso_neto: Decimal | DecimalJsLike | number | string
    peso_parcial: Decimal | DecimalJsLike | number | string
    id_municipio: number
    senerecom: string
    tipo_agranel?: number | null
    tipo_emsacado?: number | null
    tipo_lingotes?: number | null
    tipo_sal?: number | null
    tipo_otr?: number | null
    observaciones?: string | null
    estado: number
    formExtId?: number | null
    operador: OperatorCreateNestedOneWithoutSamplesInput
    minerales?: SampleMineralCreateNestedManyWithoutSampleInput
    formExt?: FormExtCreateNestedOneWithoutSampleInput
  }

  export type SampleUncheckedCreateInput = {
    id?: number
    fecha_emision?: Date | string
    ubi_geografica: string
    lugar_verificacion: string
    id_operador: number
    responsable: string
    lotes: string
    tipo_muestra: number
    presentacion: number
    sacos: number
    camiones: number
    peso_neto: Decimal | DecimalJsLike | number | string
    peso_parcial: Decimal | DecimalJsLike | number | string
    id_municipio: number
    senerecom: string
    tipo_agranel?: number | null
    tipo_emsacado?: number | null
    tipo_lingotes?: number | null
    tipo_sal?: number | null
    tipo_otr?: number | null
    observaciones?: string | null
    estado: number
    formExtId?: number | null
    minerales?: SampleMineralUncheckedCreateNestedManyWithoutSampleInput
    formExt?: FormExtUncheckedCreateNestedOneWithoutSampleInput
  }

  export type SampleUpdateInput = {
    fecha_emision?: DateTimeFieldUpdateOperationsInput | Date | string
    ubi_geografica?: StringFieldUpdateOperationsInput | string
    lugar_verificacion?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    lotes?: StringFieldUpdateOperationsInput | string
    tipo_muestra?: IntFieldUpdateOperationsInput | number
    presentacion?: IntFieldUpdateOperationsInput | number
    sacos?: IntFieldUpdateOperationsInput | number
    camiones?: IntFieldUpdateOperationsInput | number
    peso_neto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_municipio?: IntFieldUpdateOperationsInput | number
    senerecom?: StringFieldUpdateOperationsInput | string
    tipo_agranel?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_emsacado?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_lingotes?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_sal?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_otr?: NullableIntFieldUpdateOperationsInput | number | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: IntFieldUpdateOperationsInput | number
    formExtId?: NullableIntFieldUpdateOperationsInput | number | null
    operador?: OperatorUpdateOneRequiredWithoutSamplesNestedInput
    minerales?: SampleMineralUpdateManyWithoutSampleNestedInput
    formExt?: FormExtUpdateOneWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha_emision?: DateTimeFieldUpdateOperationsInput | Date | string
    ubi_geografica?: StringFieldUpdateOperationsInput | string
    lugar_verificacion?: StringFieldUpdateOperationsInput | string
    id_operador?: IntFieldUpdateOperationsInput | number
    responsable?: StringFieldUpdateOperationsInput | string
    lotes?: StringFieldUpdateOperationsInput | string
    tipo_muestra?: IntFieldUpdateOperationsInput | number
    presentacion?: IntFieldUpdateOperationsInput | number
    sacos?: IntFieldUpdateOperationsInput | number
    camiones?: IntFieldUpdateOperationsInput | number
    peso_neto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_municipio?: IntFieldUpdateOperationsInput | number
    senerecom?: StringFieldUpdateOperationsInput | string
    tipo_agranel?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_emsacado?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_lingotes?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_sal?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_otr?: NullableIntFieldUpdateOperationsInput | number | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: IntFieldUpdateOperationsInput | number
    formExtId?: NullableIntFieldUpdateOperationsInput | number | null
    minerales?: SampleMineralUncheckedUpdateManyWithoutSampleNestedInput
    formExt?: FormExtUncheckedUpdateOneWithoutSampleNestedInput
  }

  export type SampleCreateManyInput = {
    id?: number
    fecha_emision?: Date | string
    ubi_geografica: string
    lugar_verificacion: string
    id_operador: number
    responsable: string
    lotes: string
    tipo_muestra: number
    presentacion: number
    sacos: number
    camiones: number
    peso_neto: Decimal | DecimalJsLike | number | string
    peso_parcial: Decimal | DecimalJsLike | number | string
    id_municipio: number
    senerecom: string
    tipo_agranel?: number | null
    tipo_emsacado?: number | null
    tipo_lingotes?: number | null
    tipo_sal?: number | null
    tipo_otr?: number | null
    observaciones?: string | null
    estado: number
    formExtId?: number | null
  }

  export type SampleUpdateManyMutationInput = {
    fecha_emision?: DateTimeFieldUpdateOperationsInput | Date | string
    ubi_geografica?: StringFieldUpdateOperationsInput | string
    lugar_verificacion?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    lotes?: StringFieldUpdateOperationsInput | string
    tipo_muestra?: IntFieldUpdateOperationsInput | number
    presentacion?: IntFieldUpdateOperationsInput | number
    sacos?: IntFieldUpdateOperationsInput | number
    camiones?: IntFieldUpdateOperationsInput | number
    peso_neto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_municipio?: IntFieldUpdateOperationsInput | number
    senerecom?: StringFieldUpdateOperationsInput | string
    tipo_agranel?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_emsacado?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_lingotes?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_sal?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_otr?: NullableIntFieldUpdateOperationsInput | number | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: IntFieldUpdateOperationsInput | number
    formExtId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SampleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha_emision?: DateTimeFieldUpdateOperationsInput | Date | string
    ubi_geografica?: StringFieldUpdateOperationsInput | string
    lugar_verificacion?: StringFieldUpdateOperationsInput | string
    id_operador?: IntFieldUpdateOperationsInput | number
    responsable?: StringFieldUpdateOperationsInput | string
    lotes?: StringFieldUpdateOperationsInput | string
    tipo_muestra?: IntFieldUpdateOperationsInput | number
    presentacion?: IntFieldUpdateOperationsInput | number
    sacos?: IntFieldUpdateOperationsInput | number
    camiones?: IntFieldUpdateOperationsInput | number
    peso_neto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_municipio?: IntFieldUpdateOperationsInput | number
    senerecom?: StringFieldUpdateOperationsInput | string
    tipo_agranel?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_emsacado?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_lingotes?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_sal?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_otr?: NullableIntFieldUpdateOperationsInput | number | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: IntFieldUpdateOperationsInput | number
    formExtId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MineralCreateInput = {
    nombre: string
    sigla: string
    descripcion: string
    estado: number
    sample?: SampleMineralCreateNestedManyWithoutMineralInput
  }

  export type MineralUncheckedCreateInput = {
    id?: number
    nombre: string
    sigla: string
    descripcion: string
    estado: number
    sample?: SampleMineralUncheckedCreateNestedManyWithoutMineralInput
  }

  export type MineralUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    estado?: IntFieldUpdateOperationsInput | number
    sample?: SampleMineralUpdateManyWithoutMineralNestedInput
  }

  export type MineralUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    estado?: IntFieldUpdateOperationsInput | number
    sample?: SampleMineralUncheckedUpdateManyWithoutMineralNestedInput
  }

  export type MineralCreateManyInput = {
    id?: number
    nombre: string
    sigla: string
    descripcion: string
    estado: number
  }

  export type MineralUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    estado?: IntFieldUpdateOperationsInput | number
  }

  export type MineralUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    estado?: IntFieldUpdateOperationsInput | number
  }

  export type SampleMineralCreateInput = {
    ley: number
    unidad: string
    sample: SampleCreateNestedOneWithoutMineralesInput
    mineral: MineralCreateNestedOneWithoutSampleInput
  }

  export type SampleMineralUncheckedCreateInput = {
    sampleId: number
    mineralId: number
    ley: number
    unidad: string
  }

  export type SampleMineralUpdateInput = {
    ley?: IntFieldUpdateOperationsInput | number
    unidad?: StringFieldUpdateOperationsInput | string
    sample?: SampleUpdateOneRequiredWithoutMineralesNestedInput
    mineral?: MineralUpdateOneRequiredWithoutSampleNestedInput
  }

  export type SampleMineralUncheckedUpdateInput = {
    sampleId?: IntFieldUpdateOperationsInput | number
    mineralId?: IntFieldUpdateOperationsInput | number
    ley?: IntFieldUpdateOperationsInput | number
    unidad?: StringFieldUpdateOperationsInput | string
  }

  export type SampleMineralCreateManyInput = {
    sampleId: number
    mineralId: number
    ley: number
    unidad: string
  }

  export type SampleMineralUpdateManyMutationInput = {
    ley?: IntFieldUpdateOperationsInput | number
    unidad?: StringFieldUpdateOperationsInput | string
  }

  export type SampleMineralUncheckedUpdateManyInput = {
    sampleId?: IntFieldUpdateOperationsInput | number
    mineralId?: IntFieldUpdateOperationsInput | number
    ley?: IntFieldUpdateOperationsInput | number
    unidad?: StringFieldUpdateOperationsInput | string
  }

  export type FormExtCreateInput = {
    m03: string
    nro_factura_exportacion: number
    laboratorio: string
    cod_analisis: number
    des_comprador: string
    des_aduana: string
    des_pais: string
    tipo_transporte: string
    placa: string
    nom_conductor: string
    licencia: string
    observaciones?: string | null
    sample: SampleCreateNestedOneWithoutFormExtInput
  }

  export type FormExtUncheckedCreateInput = {
    id?: number
    id_sample: number
    m03: string
    nro_factura_exportacion: number
    laboratorio: string
    cod_analisis: number
    des_comprador: string
    des_aduana: string
    des_pais: string
    tipo_transporte: string
    placa: string
    nom_conductor: string
    licencia: string
    observaciones?: string | null
  }

  export type FormExtUpdateInput = {
    m03?: StringFieldUpdateOperationsInput | string
    nro_factura_exportacion?: IntFieldUpdateOperationsInput | number
    laboratorio?: StringFieldUpdateOperationsInput | string
    cod_analisis?: IntFieldUpdateOperationsInput | number
    des_comprador?: StringFieldUpdateOperationsInput | string
    des_aduana?: StringFieldUpdateOperationsInput | string
    des_pais?: StringFieldUpdateOperationsInput | string
    tipo_transporte?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    nom_conductor?: StringFieldUpdateOperationsInput | string
    licencia?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    sample?: SampleUpdateOneRequiredWithoutFormExtNestedInput
  }

  export type FormExtUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_sample?: IntFieldUpdateOperationsInput | number
    m03?: StringFieldUpdateOperationsInput | string
    nro_factura_exportacion?: IntFieldUpdateOperationsInput | number
    laboratorio?: StringFieldUpdateOperationsInput | string
    cod_analisis?: IntFieldUpdateOperationsInput | number
    des_comprador?: StringFieldUpdateOperationsInput | string
    des_aduana?: StringFieldUpdateOperationsInput | string
    des_pais?: StringFieldUpdateOperationsInput | string
    tipo_transporte?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    nom_conductor?: StringFieldUpdateOperationsInput | string
    licencia?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormExtCreateManyInput = {
    id?: number
    id_sample: number
    m03: string
    nro_factura_exportacion: number
    laboratorio: string
    cod_analisis: number
    des_comprador: string
    des_aduana: string
    des_pais: string
    tipo_transporte: string
    placa: string
    nom_conductor: string
    licencia: string
    observaciones?: string | null
  }

  export type FormExtUpdateManyMutationInput = {
    m03?: StringFieldUpdateOperationsInput | string
    nro_factura_exportacion?: IntFieldUpdateOperationsInput | number
    laboratorio?: StringFieldUpdateOperationsInput | string
    cod_analisis?: IntFieldUpdateOperationsInput | number
    des_comprador?: StringFieldUpdateOperationsInput | string
    des_aduana?: StringFieldUpdateOperationsInput | string
    des_pais?: StringFieldUpdateOperationsInput | string
    tipo_transporte?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    nom_conductor?: StringFieldUpdateOperationsInput | string
    licencia?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormExtUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_sample?: IntFieldUpdateOperationsInput | number
    m03?: StringFieldUpdateOperationsInput | string
    nro_factura_exportacion?: IntFieldUpdateOperationsInput | number
    laboratorio?: StringFieldUpdateOperationsInput | string
    cod_analisis?: IntFieldUpdateOperationsInput | number
    des_comprador?: StringFieldUpdateOperationsInput | string
    des_aduana?: StringFieldUpdateOperationsInput | string
    des_pais?: StringFieldUpdateOperationsInput | string
    tipo_transporte?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    nom_conductor?: StringFieldUpdateOperationsInput | string
    licencia?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    id_operador?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    ci?: SortOrder
    celular?: SortOrder
    rol?: SortOrder
    estado?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    id_operador?: SortOrder
    celular?: SortOrder
    rol?: SortOrder
    estado?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    id_operador?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    ci?: SortOrder
    celular?: SortOrder
    rol?: SortOrder
    estado?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    id_operador?: SortOrder
    nombre?: SortOrder
    apellidos?: SortOrder
    ci?: SortOrder
    celular?: SortOrder
    rol?: SortOrder
    estado?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    id_operador?: SortOrder
    celular?: SortOrder
    rol?: SortOrder
    estado?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SampleListRelationFilter = {
    every?: SampleWhereInput
    some?: SampleWhereInput
    none?: SampleWhereInput
  }

  export type SampleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OperatorCountOrderByAggregateInput = {
    id?: SortOrder
    razon_social?: SortOrder
    nit?: SortOrder
    nim_niar?: SortOrder
    nro_nim?: SortOrder
    fecha_exp_nim?: SortOrder
    tipo_operador?: SortOrder
    nro_personeria?: SortOrder
    nro_matricula_seprec?: SortOrder
    fecha_exp_seprec?: SortOrder
    tipo_doc_creacion?: SortOrder
    doc_creacion?: SortOrder
    dl_departamento?: SortOrder
    dl_municipio?: SortOrder
    dl_direccion?: SortOrder
    dl_ubicacion?: SortOrder
    correo_inst?: SortOrder
    tel_fijo?: SortOrder
    celular?: SortOrder
    celular_2?: SortOrder
    act_exploracion?: SortOrder
    act_comer_interna?: SortOrder
    act_comer_externa?: SortOrder
    act_industrializacion?: SortOrder
    act_tras_colas?: SortOrder
    act_explotacion?: SortOrder
    act_ben_concentracion?: SortOrder
    act_refinacion?: SortOrder
    act_fundicion?: SortOrder
    tipo_explotacion?: SortOrder
    denominacion_area?: SortOrder
    nro_codigo_unico?: SortOrder
    nro_cuadricula?: SortOrder
    municipio_origen?: SortOrder
    nro_ruex?: SortOrder
    verif_cert_liberacion?: SortOrder
    nro_res_ministerial?: SortOrder
    nombre_resp_for101?: SortOrder
    ci_resp_for101?: SortOrder
    celular_resp_for101?: SortOrder
    correo_resp_for101?: SortOrder
    nombre_resp_tmuestra?: SortOrder
    ci_resp_tmuestra?: SortOrder
    celular_resp_tmuestra?: SortOrder
    correo_resp_tmuestra?: SortOrder
  }

  export type OperatorAvgOrderByAggregateInput = {
    id?: SortOrder
    nit?: SortOrder
    nim_niar?: SortOrder
    tipo_operador?: SortOrder
    tipo_doc_creacion?: SortOrder
    dl_departamento?: SortOrder
    dl_municipio?: SortOrder
    celular?: SortOrder
    celular_2?: SortOrder
    act_exploracion?: SortOrder
    act_comer_interna?: SortOrder
    act_comer_externa?: SortOrder
    act_industrializacion?: SortOrder
    act_tras_colas?: SortOrder
    act_explotacion?: SortOrder
    act_ben_concentracion?: SortOrder
    act_refinacion?: SortOrder
    act_fundicion?: SortOrder
    tipo_explotacion?: SortOrder
    verif_cert_liberacion?: SortOrder
    nro_res_ministerial?: SortOrder
    celular_resp_for101?: SortOrder
    celular_resp_tmuestra?: SortOrder
  }

  export type OperatorMaxOrderByAggregateInput = {
    id?: SortOrder
    razon_social?: SortOrder
    nit?: SortOrder
    nim_niar?: SortOrder
    nro_nim?: SortOrder
    fecha_exp_nim?: SortOrder
    tipo_operador?: SortOrder
    nro_personeria?: SortOrder
    nro_matricula_seprec?: SortOrder
    fecha_exp_seprec?: SortOrder
    tipo_doc_creacion?: SortOrder
    doc_creacion?: SortOrder
    dl_departamento?: SortOrder
    dl_municipio?: SortOrder
    dl_direccion?: SortOrder
    dl_ubicacion?: SortOrder
    correo_inst?: SortOrder
    tel_fijo?: SortOrder
    celular?: SortOrder
    celular_2?: SortOrder
    act_exploracion?: SortOrder
    act_comer_interna?: SortOrder
    act_comer_externa?: SortOrder
    act_industrializacion?: SortOrder
    act_tras_colas?: SortOrder
    act_explotacion?: SortOrder
    act_ben_concentracion?: SortOrder
    act_refinacion?: SortOrder
    act_fundicion?: SortOrder
    tipo_explotacion?: SortOrder
    denominacion_area?: SortOrder
    nro_codigo_unico?: SortOrder
    nro_cuadricula?: SortOrder
    municipio_origen?: SortOrder
    nro_ruex?: SortOrder
    verif_cert_liberacion?: SortOrder
    nro_res_ministerial?: SortOrder
    nombre_resp_for101?: SortOrder
    ci_resp_for101?: SortOrder
    celular_resp_for101?: SortOrder
    correo_resp_for101?: SortOrder
    nombre_resp_tmuestra?: SortOrder
    ci_resp_tmuestra?: SortOrder
    celular_resp_tmuestra?: SortOrder
    correo_resp_tmuestra?: SortOrder
  }

  export type OperatorMinOrderByAggregateInput = {
    id?: SortOrder
    razon_social?: SortOrder
    nit?: SortOrder
    nim_niar?: SortOrder
    nro_nim?: SortOrder
    fecha_exp_nim?: SortOrder
    tipo_operador?: SortOrder
    nro_personeria?: SortOrder
    nro_matricula_seprec?: SortOrder
    fecha_exp_seprec?: SortOrder
    tipo_doc_creacion?: SortOrder
    doc_creacion?: SortOrder
    dl_departamento?: SortOrder
    dl_municipio?: SortOrder
    dl_direccion?: SortOrder
    dl_ubicacion?: SortOrder
    correo_inst?: SortOrder
    tel_fijo?: SortOrder
    celular?: SortOrder
    celular_2?: SortOrder
    act_exploracion?: SortOrder
    act_comer_interna?: SortOrder
    act_comer_externa?: SortOrder
    act_industrializacion?: SortOrder
    act_tras_colas?: SortOrder
    act_explotacion?: SortOrder
    act_ben_concentracion?: SortOrder
    act_refinacion?: SortOrder
    act_fundicion?: SortOrder
    tipo_explotacion?: SortOrder
    denominacion_area?: SortOrder
    nro_codigo_unico?: SortOrder
    nro_cuadricula?: SortOrder
    municipio_origen?: SortOrder
    nro_ruex?: SortOrder
    verif_cert_liberacion?: SortOrder
    nro_res_ministerial?: SortOrder
    nombre_resp_for101?: SortOrder
    ci_resp_for101?: SortOrder
    celular_resp_for101?: SortOrder
    correo_resp_for101?: SortOrder
    nombre_resp_tmuestra?: SortOrder
    ci_resp_tmuestra?: SortOrder
    celular_resp_tmuestra?: SortOrder
    correo_resp_tmuestra?: SortOrder
  }

  export type OperatorSumOrderByAggregateInput = {
    id?: SortOrder
    nit?: SortOrder
    nim_niar?: SortOrder
    tipo_operador?: SortOrder
    tipo_doc_creacion?: SortOrder
    dl_departamento?: SortOrder
    dl_municipio?: SortOrder
    celular?: SortOrder
    celular_2?: SortOrder
    act_exploracion?: SortOrder
    act_comer_interna?: SortOrder
    act_comer_externa?: SortOrder
    act_industrializacion?: SortOrder
    act_tras_colas?: SortOrder
    act_explotacion?: SortOrder
    act_ben_concentracion?: SortOrder
    act_refinacion?: SortOrder
    act_fundicion?: SortOrder
    tipo_explotacion?: SortOrder
    verif_cert_liberacion?: SortOrder
    nro_res_ministerial?: SortOrder
    celular_resp_for101?: SortOrder
    celular_resp_tmuestra?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type OperatorRelationFilter = {
    is?: OperatorWhereInput
    isNot?: OperatorWhereInput
  }

  export type SampleMineralListRelationFilter = {
    every?: SampleMineralWhereInput
    some?: SampleMineralWhereInput
    none?: SampleMineralWhereInput
  }

  export type FormExtNullableRelationFilter = {
    is?: FormExtWhereInput | null
    isNot?: FormExtWhereInput | null
  }

  export type SampleMineralOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SampleCountOrderByAggregateInput = {
    id?: SortOrder
    fecha_emision?: SortOrder
    ubi_geografica?: SortOrder
    lugar_verificacion?: SortOrder
    id_operador?: SortOrder
    responsable?: SortOrder
    lotes?: SortOrder
    tipo_muestra?: SortOrder
    presentacion?: SortOrder
    sacos?: SortOrder
    camiones?: SortOrder
    peso_neto?: SortOrder
    peso_parcial?: SortOrder
    id_municipio?: SortOrder
    senerecom?: SortOrder
    tipo_agranel?: SortOrder
    tipo_emsacado?: SortOrder
    tipo_lingotes?: SortOrder
    tipo_sal?: SortOrder
    tipo_otr?: SortOrder
    observaciones?: SortOrder
    estado?: SortOrder
    formExtId?: SortOrder
  }

  export type SampleAvgOrderByAggregateInput = {
    id?: SortOrder
    id_operador?: SortOrder
    tipo_muestra?: SortOrder
    presentacion?: SortOrder
    sacos?: SortOrder
    camiones?: SortOrder
    peso_neto?: SortOrder
    peso_parcial?: SortOrder
    id_municipio?: SortOrder
    tipo_agranel?: SortOrder
    tipo_emsacado?: SortOrder
    tipo_lingotes?: SortOrder
    tipo_sal?: SortOrder
    tipo_otr?: SortOrder
    estado?: SortOrder
    formExtId?: SortOrder
  }

  export type SampleMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha_emision?: SortOrder
    ubi_geografica?: SortOrder
    lugar_verificacion?: SortOrder
    id_operador?: SortOrder
    responsable?: SortOrder
    lotes?: SortOrder
    tipo_muestra?: SortOrder
    presentacion?: SortOrder
    sacos?: SortOrder
    camiones?: SortOrder
    peso_neto?: SortOrder
    peso_parcial?: SortOrder
    id_municipio?: SortOrder
    senerecom?: SortOrder
    tipo_agranel?: SortOrder
    tipo_emsacado?: SortOrder
    tipo_lingotes?: SortOrder
    tipo_sal?: SortOrder
    tipo_otr?: SortOrder
    observaciones?: SortOrder
    estado?: SortOrder
    formExtId?: SortOrder
  }

  export type SampleMinOrderByAggregateInput = {
    id?: SortOrder
    fecha_emision?: SortOrder
    ubi_geografica?: SortOrder
    lugar_verificacion?: SortOrder
    id_operador?: SortOrder
    responsable?: SortOrder
    lotes?: SortOrder
    tipo_muestra?: SortOrder
    presentacion?: SortOrder
    sacos?: SortOrder
    camiones?: SortOrder
    peso_neto?: SortOrder
    peso_parcial?: SortOrder
    id_municipio?: SortOrder
    senerecom?: SortOrder
    tipo_agranel?: SortOrder
    tipo_emsacado?: SortOrder
    tipo_lingotes?: SortOrder
    tipo_sal?: SortOrder
    tipo_otr?: SortOrder
    observaciones?: SortOrder
    estado?: SortOrder
    formExtId?: SortOrder
  }

  export type SampleSumOrderByAggregateInput = {
    id?: SortOrder
    id_operador?: SortOrder
    tipo_muestra?: SortOrder
    presentacion?: SortOrder
    sacos?: SortOrder
    camiones?: SortOrder
    peso_neto?: SortOrder
    peso_parcial?: SortOrder
    id_municipio?: SortOrder
    tipo_agranel?: SortOrder
    tipo_emsacado?: SortOrder
    tipo_lingotes?: SortOrder
    tipo_sal?: SortOrder
    tipo_otr?: SortOrder
    estado?: SortOrder
    formExtId?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type MineralCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    sigla?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
  }

  export type MineralAvgOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
  }

  export type MineralMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    sigla?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
  }

  export type MineralMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    sigla?: SortOrder
    descripcion?: SortOrder
    estado?: SortOrder
  }

  export type MineralSumOrderByAggregateInput = {
    id?: SortOrder
    estado?: SortOrder
  }

  export type SampleRelationFilter = {
    is?: SampleWhereInput
    isNot?: SampleWhereInput
  }

  export type MineralRelationFilter = {
    is?: MineralWhereInput
    isNot?: MineralWhereInput
  }

  export type SampleMineralSampleIdMineralIdCompoundUniqueInput = {
    sampleId: number
    mineralId: number
  }

  export type SampleMineralCountOrderByAggregateInput = {
    sampleId?: SortOrder
    mineralId?: SortOrder
    ley?: SortOrder
    unidad?: SortOrder
  }

  export type SampleMineralAvgOrderByAggregateInput = {
    sampleId?: SortOrder
    mineralId?: SortOrder
    ley?: SortOrder
  }

  export type SampleMineralMaxOrderByAggregateInput = {
    sampleId?: SortOrder
    mineralId?: SortOrder
    ley?: SortOrder
    unidad?: SortOrder
  }

  export type SampleMineralMinOrderByAggregateInput = {
    sampleId?: SortOrder
    mineralId?: SortOrder
    ley?: SortOrder
    unidad?: SortOrder
  }

  export type SampleMineralSumOrderByAggregateInput = {
    sampleId?: SortOrder
    mineralId?: SortOrder
    ley?: SortOrder
  }

  export type FormExtCountOrderByAggregateInput = {
    id?: SortOrder
    id_sample?: SortOrder
    m03?: SortOrder
    nro_factura_exportacion?: SortOrder
    laboratorio?: SortOrder
    cod_analisis?: SortOrder
    des_comprador?: SortOrder
    des_aduana?: SortOrder
    des_pais?: SortOrder
    tipo_transporte?: SortOrder
    placa?: SortOrder
    nom_conductor?: SortOrder
    licencia?: SortOrder
    observaciones?: SortOrder
  }

  export type FormExtAvgOrderByAggregateInput = {
    id?: SortOrder
    id_sample?: SortOrder
    nro_factura_exportacion?: SortOrder
    cod_analisis?: SortOrder
  }

  export type FormExtMaxOrderByAggregateInput = {
    id?: SortOrder
    id_sample?: SortOrder
    m03?: SortOrder
    nro_factura_exportacion?: SortOrder
    laboratorio?: SortOrder
    cod_analisis?: SortOrder
    des_comprador?: SortOrder
    des_aduana?: SortOrder
    des_pais?: SortOrder
    tipo_transporte?: SortOrder
    placa?: SortOrder
    nom_conductor?: SortOrder
    licencia?: SortOrder
    observaciones?: SortOrder
  }

  export type FormExtMinOrderByAggregateInput = {
    id?: SortOrder
    id_sample?: SortOrder
    m03?: SortOrder
    nro_factura_exportacion?: SortOrder
    laboratorio?: SortOrder
    cod_analisis?: SortOrder
    des_comprador?: SortOrder
    des_aduana?: SortOrder
    des_pais?: SortOrder
    tipo_transporte?: SortOrder
    placa?: SortOrder
    nom_conductor?: SortOrder
    licencia?: SortOrder
    observaciones?: SortOrder
  }

  export type FormExtSumOrderByAggregateInput = {
    id?: SortOrder
    id_sample?: SortOrder
    nro_factura_exportacion?: SortOrder
    cod_analisis?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SampleCreateNestedManyWithoutOperadorInput = {
    create?: XOR<SampleCreateWithoutOperadorInput, SampleUncheckedCreateWithoutOperadorInput> | SampleCreateWithoutOperadorInput[] | SampleUncheckedCreateWithoutOperadorInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutOperadorInput | SampleCreateOrConnectWithoutOperadorInput[]
    createMany?: SampleCreateManyOperadorInputEnvelope
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
  }

  export type SampleUncheckedCreateNestedManyWithoutOperadorInput = {
    create?: XOR<SampleCreateWithoutOperadorInput, SampleUncheckedCreateWithoutOperadorInput> | SampleCreateWithoutOperadorInput[] | SampleUncheckedCreateWithoutOperadorInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutOperadorInput | SampleCreateOrConnectWithoutOperadorInput[]
    createMany?: SampleCreateManyOperadorInputEnvelope
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SampleUpdateManyWithoutOperadorNestedInput = {
    create?: XOR<SampleCreateWithoutOperadorInput, SampleUncheckedCreateWithoutOperadorInput> | SampleCreateWithoutOperadorInput[] | SampleUncheckedCreateWithoutOperadorInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutOperadorInput | SampleCreateOrConnectWithoutOperadorInput[]
    upsert?: SampleUpsertWithWhereUniqueWithoutOperadorInput | SampleUpsertWithWhereUniqueWithoutOperadorInput[]
    createMany?: SampleCreateManyOperadorInputEnvelope
    set?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    disconnect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    delete?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    update?: SampleUpdateWithWhereUniqueWithoutOperadorInput | SampleUpdateWithWhereUniqueWithoutOperadorInput[]
    updateMany?: SampleUpdateManyWithWhereWithoutOperadorInput | SampleUpdateManyWithWhereWithoutOperadorInput[]
    deleteMany?: SampleScalarWhereInput | SampleScalarWhereInput[]
  }

  export type SampleUncheckedUpdateManyWithoutOperadorNestedInput = {
    create?: XOR<SampleCreateWithoutOperadorInput, SampleUncheckedCreateWithoutOperadorInput> | SampleCreateWithoutOperadorInput[] | SampleUncheckedCreateWithoutOperadorInput[]
    connectOrCreate?: SampleCreateOrConnectWithoutOperadorInput | SampleCreateOrConnectWithoutOperadorInput[]
    upsert?: SampleUpsertWithWhereUniqueWithoutOperadorInput | SampleUpsertWithWhereUniqueWithoutOperadorInput[]
    createMany?: SampleCreateManyOperadorInputEnvelope
    set?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    disconnect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    delete?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    connect?: SampleWhereUniqueInput | SampleWhereUniqueInput[]
    update?: SampleUpdateWithWhereUniqueWithoutOperadorInput | SampleUpdateWithWhereUniqueWithoutOperadorInput[]
    updateMany?: SampleUpdateManyWithWhereWithoutOperadorInput | SampleUpdateManyWithWhereWithoutOperadorInput[]
    deleteMany?: SampleScalarWhereInput | SampleScalarWhereInput[]
  }

  export type OperatorCreateNestedOneWithoutSamplesInput = {
    create?: XOR<OperatorCreateWithoutSamplesInput, OperatorUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: OperatorCreateOrConnectWithoutSamplesInput
    connect?: OperatorWhereUniqueInput
  }

  export type SampleMineralCreateNestedManyWithoutSampleInput = {
    create?: XOR<SampleMineralCreateWithoutSampleInput, SampleMineralUncheckedCreateWithoutSampleInput> | SampleMineralCreateWithoutSampleInput[] | SampleMineralUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SampleMineralCreateOrConnectWithoutSampleInput | SampleMineralCreateOrConnectWithoutSampleInput[]
    createMany?: SampleMineralCreateManySampleInputEnvelope
    connect?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
  }

  export type FormExtCreateNestedOneWithoutSampleInput = {
    create?: XOR<FormExtCreateWithoutSampleInput, FormExtUncheckedCreateWithoutSampleInput>
    connectOrCreate?: FormExtCreateOrConnectWithoutSampleInput
    connect?: FormExtWhereUniqueInput
  }

  export type SampleMineralUncheckedCreateNestedManyWithoutSampleInput = {
    create?: XOR<SampleMineralCreateWithoutSampleInput, SampleMineralUncheckedCreateWithoutSampleInput> | SampleMineralCreateWithoutSampleInput[] | SampleMineralUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SampleMineralCreateOrConnectWithoutSampleInput | SampleMineralCreateOrConnectWithoutSampleInput[]
    createMany?: SampleMineralCreateManySampleInputEnvelope
    connect?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
  }

  export type FormExtUncheckedCreateNestedOneWithoutSampleInput = {
    create?: XOR<FormExtCreateWithoutSampleInput, FormExtUncheckedCreateWithoutSampleInput>
    connectOrCreate?: FormExtCreateOrConnectWithoutSampleInput
    connect?: FormExtWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type OperatorUpdateOneRequiredWithoutSamplesNestedInput = {
    create?: XOR<OperatorCreateWithoutSamplesInput, OperatorUncheckedCreateWithoutSamplesInput>
    connectOrCreate?: OperatorCreateOrConnectWithoutSamplesInput
    upsert?: OperatorUpsertWithoutSamplesInput
    connect?: OperatorWhereUniqueInput
    update?: XOR<XOR<OperatorUpdateToOneWithWhereWithoutSamplesInput, OperatorUpdateWithoutSamplesInput>, OperatorUncheckedUpdateWithoutSamplesInput>
  }

  export type SampleMineralUpdateManyWithoutSampleNestedInput = {
    create?: XOR<SampleMineralCreateWithoutSampleInput, SampleMineralUncheckedCreateWithoutSampleInput> | SampleMineralCreateWithoutSampleInput[] | SampleMineralUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SampleMineralCreateOrConnectWithoutSampleInput | SampleMineralCreateOrConnectWithoutSampleInput[]
    upsert?: SampleMineralUpsertWithWhereUniqueWithoutSampleInput | SampleMineralUpsertWithWhereUniqueWithoutSampleInput[]
    createMany?: SampleMineralCreateManySampleInputEnvelope
    set?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    disconnect?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    delete?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    connect?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    update?: SampleMineralUpdateWithWhereUniqueWithoutSampleInput | SampleMineralUpdateWithWhereUniqueWithoutSampleInput[]
    updateMany?: SampleMineralUpdateManyWithWhereWithoutSampleInput | SampleMineralUpdateManyWithWhereWithoutSampleInput[]
    deleteMany?: SampleMineralScalarWhereInput | SampleMineralScalarWhereInput[]
  }

  export type FormExtUpdateOneWithoutSampleNestedInput = {
    create?: XOR<FormExtCreateWithoutSampleInput, FormExtUncheckedCreateWithoutSampleInput>
    connectOrCreate?: FormExtCreateOrConnectWithoutSampleInput
    upsert?: FormExtUpsertWithoutSampleInput
    disconnect?: FormExtWhereInput | boolean
    delete?: FormExtWhereInput | boolean
    connect?: FormExtWhereUniqueInput
    update?: XOR<XOR<FormExtUpdateToOneWithWhereWithoutSampleInput, FormExtUpdateWithoutSampleInput>, FormExtUncheckedUpdateWithoutSampleInput>
  }

  export type SampleMineralUncheckedUpdateManyWithoutSampleNestedInput = {
    create?: XOR<SampleMineralCreateWithoutSampleInput, SampleMineralUncheckedCreateWithoutSampleInput> | SampleMineralCreateWithoutSampleInput[] | SampleMineralUncheckedCreateWithoutSampleInput[]
    connectOrCreate?: SampleMineralCreateOrConnectWithoutSampleInput | SampleMineralCreateOrConnectWithoutSampleInput[]
    upsert?: SampleMineralUpsertWithWhereUniqueWithoutSampleInput | SampleMineralUpsertWithWhereUniqueWithoutSampleInput[]
    createMany?: SampleMineralCreateManySampleInputEnvelope
    set?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    disconnect?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    delete?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    connect?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    update?: SampleMineralUpdateWithWhereUniqueWithoutSampleInput | SampleMineralUpdateWithWhereUniqueWithoutSampleInput[]
    updateMany?: SampleMineralUpdateManyWithWhereWithoutSampleInput | SampleMineralUpdateManyWithWhereWithoutSampleInput[]
    deleteMany?: SampleMineralScalarWhereInput | SampleMineralScalarWhereInput[]
  }

  export type FormExtUncheckedUpdateOneWithoutSampleNestedInput = {
    create?: XOR<FormExtCreateWithoutSampleInput, FormExtUncheckedCreateWithoutSampleInput>
    connectOrCreate?: FormExtCreateOrConnectWithoutSampleInput
    upsert?: FormExtUpsertWithoutSampleInput
    disconnect?: FormExtWhereInput | boolean
    delete?: FormExtWhereInput | boolean
    connect?: FormExtWhereUniqueInput
    update?: XOR<XOR<FormExtUpdateToOneWithWhereWithoutSampleInput, FormExtUpdateWithoutSampleInput>, FormExtUncheckedUpdateWithoutSampleInput>
  }

  export type SampleMineralCreateNestedManyWithoutMineralInput = {
    create?: XOR<SampleMineralCreateWithoutMineralInput, SampleMineralUncheckedCreateWithoutMineralInput> | SampleMineralCreateWithoutMineralInput[] | SampleMineralUncheckedCreateWithoutMineralInput[]
    connectOrCreate?: SampleMineralCreateOrConnectWithoutMineralInput | SampleMineralCreateOrConnectWithoutMineralInput[]
    createMany?: SampleMineralCreateManyMineralInputEnvelope
    connect?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
  }

  export type SampleMineralUncheckedCreateNestedManyWithoutMineralInput = {
    create?: XOR<SampleMineralCreateWithoutMineralInput, SampleMineralUncheckedCreateWithoutMineralInput> | SampleMineralCreateWithoutMineralInput[] | SampleMineralUncheckedCreateWithoutMineralInput[]
    connectOrCreate?: SampleMineralCreateOrConnectWithoutMineralInput | SampleMineralCreateOrConnectWithoutMineralInput[]
    createMany?: SampleMineralCreateManyMineralInputEnvelope
    connect?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
  }

  export type SampleMineralUpdateManyWithoutMineralNestedInput = {
    create?: XOR<SampleMineralCreateWithoutMineralInput, SampleMineralUncheckedCreateWithoutMineralInput> | SampleMineralCreateWithoutMineralInput[] | SampleMineralUncheckedCreateWithoutMineralInput[]
    connectOrCreate?: SampleMineralCreateOrConnectWithoutMineralInput | SampleMineralCreateOrConnectWithoutMineralInput[]
    upsert?: SampleMineralUpsertWithWhereUniqueWithoutMineralInput | SampleMineralUpsertWithWhereUniqueWithoutMineralInput[]
    createMany?: SampleMineralCreateManyMineralInputEnvelope
    set?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    disconnect?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    delete?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    connect?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    update?: SampleMineralUpdateWithWhereUniqueWithoutMineralInput | SampleMineralUpdateWithWhereUniqueWithoutMineralInput[]
    updateMany?: SampleMineralUpdateManyWithWhereWithoutMineralInput | SampleMineralUpdateManyWithWhereWithoutMineralInput[]
    deleteMany?: SampleMineralScalarWhereInput | SampleMineralScalarWhereInput[]
  }

  export type SampleMineralUncheckedUpdateManyWithoutMineralNestedInput = {
    create?: XOR<SampleMineralCreateWithoutMineralInput, SampleMineralUncheckedCreateWithoutMineralInput> | SampleMineralCreateWithoutMineralInput[] | SampleMineralUncheckedCreateWithoutMineralInput[]
    connectOrCreate?: SampleMineralCreateOrConnectWithoutMineralInput | SampleMineralCreateOrConnectWithoutMineralInput[]
    upsert?: SampleMineralUpsertWithWhereUniqueWithoutMineralInput | SampleMineralUpsertWithWhereUniqueWithoutMineralInput[]
    createMany?: SampleMineralCreateManyMineralInputEnvelope
    set?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    disconnect?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    delete?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    connect?: SampleMineralWhereUniqueInput | SampleMineralWhereUniqueInput[]
    update?: SampleMineralUpdateWithWhereUniqueWithoutMineralInput | SampleMineralUpdateWithWhereUniqueWithoutMineralInput[]
    updateMany?: SampleMineralUpdateManyWithWhereWithoutMineralInput | SampleMineralUpdateManyWithWhereWithoutMineralInput[]
    deleteMany?: SampleMineralScalarWhereInput | SampleMineralScalarWhereInput[]
  }

  export type SampleCreateNestedOneWithoutMineralesInput = {
    create?: XOR<SampleCreateWithoutMineralesInput, SampleUncheckedCreateWithoutMineralesInput>
    connectOrCreate?: SampleCreateOrConnectWithoutMineralesInput
    connect?: SampleWhereUniqueInput
  }

  export type MineralCreateNestedOneWithoutSampleInput = {
    create?: XOR<MineralCreateWithoutSampleInput, MineralUncheckedCreateWithoutSampleInput>
    connectOrCreate?: MineralCreateOrConnectWithoutSampleInput
    connect?: MineralWhereUniqueInput
  }

  export type SampleUpdateOneRequiredWithoutMineralesNestedInput = {
    create?: XOR<SampleCreateWithoutMineralesInput, SampleUncheckedCreateWithoutMineralesInput>
    connectOrCreate?: SampleCreateOrConnectWithoutMineralesInput
    upsert?: SampleUpsertWithoutMineralesInput
    connect?: SampleWhereUniqueInput
    update?: XOR<XOR<SampleUpdateToOneWithWhereWithoutMineralesInput, SampleUpdateWithoutMineralesInput>, SampleUncheckedUpdateWithoutMineralesInput>
  }

  export type MineralUpdateOneRequiredWithoutSampleNestedInput = {
    create?: XOR<MineralCreateWithoutSampleInput, MineralUncheckedCreateWithoutSampleInput>
    connectOrCreate?: MineralCreateOrConnectWithoutSampleInput
    upsert?: MineralUpsertWithoutSampleInput
    connect?: MineralWhereUniqueInput
    update?: XOR<XOR<MineralUpdateToOneWithWhereWithoutSampleInput, MineralUpdateWithoutSampleInput>, MineralUncheckedUpdateWithoutSampleInput>
  }

  export type SampleCreateNestedOneWithoutFormExtInput = {
    create?: XOR<SampleCreateWithoutFormExtInput, SampleUncheckedCreateWithoutFormExtInput>
    connectOrCreate?: SampleCreateOrConnectWithoutFormExtInput
    connect?: SampleWhereUniqueInput
  }

  export type SampleUpdateOneRequiredWithoutFormExtNestedInput = {
    create?: XOR<SampleCreateWithoutFormExtInput, SampleUncheckedCreateWithoutFormExtInput>
    connectOrCreate?: SampleCreateOrConnectWithoutFormExtInput
    upsert?: SampleUpsertWithoutFormExtInput
    connect?: SampleWhereUniqueInput
    update?: XOR<XOR<SampleUpdateToOneWithWhereWithoutFormExtInput, SampleUpdateWithoutFormExtInput>, SampleUncheckedUpdateWithoutFormExtInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type SampleCreateWithoutOperadorInput = {
    fecha_emision?: Date | string
    ubi_geografica: string
    lugar_verificacion: string
    responsable: string
    lotes: string
    tipo_muestra: number
    presentacion: number
    sacos: number
    camiones: number
    peso_neto: Decimal | DecimalJsLike | number | string
    peso_parcial: Decimal | DecimalJsLike | number | string
    id_municipio: number
    senerecom: string
    tipo_agranel?: number | null
    tipo_emsacado?: number | null
    tipo_lingotes?: number | null
    tipo_sal?: number | null
    tipo_otr?: number | null
    observaciones?: string | null
    estado: number
    formExtId?: number | null
    minerales?: SampleMineralCreateNestedManyWithoutSampleInput
    formExt?: FormExtCreateNestedOneWithoutSampleInput
  }

  export type SampleUncheckedCreateWithoutOperadorInput = {
    id?: number
    fecha_emision?: Date | string
    ubi_geografica: string
    lugar_verificacion: string
    responsable: string
    lotes: string
    tipo_muestra: number
    presentacion: number
    sacos: number
    camiones: number
    peso_neto: Decimal | DecimalJsLike | number | string
    peso_parcial: Decimal | DecimalJsLike | number | string
    id_municipio: number
    senerecom: string
    tipo_agranel?: number | null
    tipo_emsacado?: number | null
    tipo_lingotes?: number | null
    tipo_sal?: number | null
    tipo_otr?: number | null
    observaciones?: string | null
    estado: number
    formExtId?: number | null
    minerales?: SampleMineralUncheckedCreateNestedManyWithoutSampleInput
    formExt?: FormExtUncheckedCreateNestedOneWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutOperadorInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutOperadorInput, SampleUncheckedCreateWithoutOperadorInput>
  }

  export type SampleCreateManyOperadorInputEnvelope = {
    data: SampleCreateManyOperadorInput | SampleCreateManyOperadorInput[]
    skipDuplicates?: boolean
  }

  export type SampleUpsertWithWhereUniqueWithoutOperadorInput = {
    where: SampleWhereUniqueInput
    update: XOR<SampleUpdateWithoutOperadorInput, SampleUncheckedUpdateWithoutOperadorInput>
    create: XOR<SampleCreateWithoutOperadorInput, SampleUncheckedCreateWithoutOperadorInput>
  }

  export type SampleUpdateWithWhereUniqueWithoutOperadorInput = {
    where: SampleWhereUniqueInput
    data: XOR<SampleUpdateWithoutOperadorInput, SampleUncheckedUpdateWithoutOperadorInput>
  }

  export type SampleUpdateManyWithWhereWithoutOperadorInput = {
    where: SampleScalarWhereInput
    data: XOR<SampleUpdateManyMutationInput, SampleUncheckedUpdateManyWithoutOperadorInput>
  }

  export type SampleScalarWhereInput = {
    AND?: SampleScalarWhereInput | SampleScalarWhereInput[]
    OR?: SampleScalarWhereInput[]
    NOT?: SampleScalarWhereInput | SampleScalarWhereInput[]
    id?: IntFilter<"Sample"> | number
    fecha_emision?: DateTimeFilter<"Sample"> | Date | string
    ubi_geografica?: StringFilter<"Sample"> | string
    lugar_verificacion?: StringFilter<"Sample"> | string
    id_operador?: IntFilter<"Sample"> | number
    responsable?: StringFilter<"Sample"> | string
    lotes?: StringFilter<"Sample"> | string
    tipo_muestra?: IntFilter<"Sample"> | number
    presentacion?: IntFilter<"Sample"> | number
    sacos?: IntFilter<"Sample"> | number
    camiones?: IntFilter<"Sample"> | number
    peso_neto?: DecimalFilter<"Sample"> | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalFilter<"Sample"> | Decimal | DecimalJsLike | number | string
    id_municipio?: IntFilter<"Sample"> | number
    senerecom?: StringFilter<"Sample"> | string
    tipo_agranel?: IntNullableFilter<"Sample"> | number | null
    tipo_emsacado?: IntNullableFilter<"Sample"> | number | null
    tipo_lingotes?: IntNullableFilter<"Sample"> | number | null
    tipo_sal?: IntNullableFilter<"Sample"> | number | null
    tipo_otr?: IntNullableFilter<"Sample"> | number | null
    observaciones?: StringNullableFilter<"Sample"> | string | null
    estado?: IntFilter<"Sample"> | number
    formExtId?: IntNullableFilter<"Sample"> | number | null
  }

  export type OperatorCreateWithoutSamplesInput = {
    razon_social: string
    nit: number
    nim_niar: number
    nro_nim: string
    fecha_exp_nim: Date | string
    tipo_operador: number
    nro_personeria?: string | null
    nro_matricula_seprec?: string | null
    fecha_exp_seprec?: Date | string | null
    tipo_doc_creacion?: number | null
    doc_creacion?: string | null
    dl_departamento: number
    dl_municipio: number
    dl_direccion: string
    dl_ubicacion: string
    correo_inst?: string | null
    tel_fijo?: string | null
    celular: number
    celular_2?: number | null
    act_exploracion?: number | null
    act_comer_interna?: number | null
    act_comer_externa?: number | null
    act_industrializacion?: number | null
    act_tras_colas?: number | null
    act_explotacion?: number | null
    act_ben_concentracion?: number | null
    act_refinacion?: number | null
    act_fundicion?: number | null
    tipo_explotacion?: number | null
    denominacion_area?: string | null
    nro_codigo_unico?: string | null
    nro_cuadricula?: string | null
    municipio_origen?: string | null
    nro_ruex?: string | null
    verif_cert_liberacion?: number | null
    nro_res_ministerial?: number | null
    nombre_resp_for101?: string | null
    ci_resp_for101?: string | null
    celular_resp_for101?: number | null
    correo_resp_for101?: string | null
    nombre_resp_tmuestra?: string | null
    ci_resp_tmuestra?: string | null
    celular_resp_tmuestra?: number | null
    correo_resp_tmuestra?: string | null
  }

  export type OperatorUncheckedCreateWithoutSamplesInput = {
    id?: number
    razon_social: string
    nit: number
    nim_niar: number
    nro_nim: string
    fecha_exp_nim: Date | string
    tipo_operador: number
    nro_personeria?: string | null
    nro_matricula_seprec?: string | null
    fecha_exp_seprec?: Date | string | null
    tipo_doc_creacion?: number | null
    doc_creacion?: string | null
    dl_departamento: number
    dl_municipio: number
    dl_direccion: string
    dl_ubicacion: string
    correo_inst?: string | null
    tel_fijo?: string | null
    celular: number
    celular_2?: number | null
    act_exploracion?: number | null
    act_comer_interna?: number | null
    act_comer_externa?: number | null
    act_industrializacion?: number | null
    act_tras_colas?: number | null
    act_explotacion?: number | null
    act_ben_concentracion?: number | null
    act_refinacion?: number | null
    act_fundicion?: number | null
    tipo_explotacion?: number | null
    denominacion_area?: string | null
    nro_codigo_unico?: string | null
    nro_cuadricula?: string | null
    municipio_origen?: string | null
    nro_ruex?: string | null
    verif_cert_liberacion?: number | null
    nro_res_ministerial?: number | null
    nombre_resp_for101?: string | null
    ci_resp_for101?: string | null
    celular_resp_for101?: number | null
    correo_resp_for101?: string | null
    nombre_resp_tmuestra?: string | null
    ci_resp_tmuestra?: string | null
    celular_resp_tmuestra?: number | null
    correo_resp_tmuestra?: string | null
  }

  export type OperatorCreateOrConnectWithoutSamplesInput = {
    where: OperatorWhereUniqueInput
    create: XOR<OperatorCreateWithoutSamplesInput, OperatorUncheckedCreateWithoutSamplesInput>
  }

  export type SampleMineralCreateWithoutSampleInput = {
    ley: number
    unidad: string
    mineral: MineralCreateNestedOneWithoutSampleInput
  }

  export type SampleMineralUncheckedCreateWithoutSampleInput = {
    mineralId: number
    ley: number
    unidad: string
  }

  export type SampleMineralCreateOrConnectWithoutSampleInput = {
    where: SampleMineralWhereUniqueInput
    create: XOR<SampleMineralCreateWithoutSampleInput, SampleMineralUncheckedCreateWithoutSampleInput>
  }

  export type SampleMineralCreateManySampleInputEnvelope = {
    data: SampleMineralCreateManySampleInput | SampleMineralCreateManySampleInput[]
    skipDuplicates?: boolean
  }

  export type FormExtCreateWithoutSampleInput = {
    m03: string
    nro_factura_exportacion: number
    laboratorio: string
    cod_analisis: number
    des_comprador: string
    des_aduana: string
    des_pais: string
    tipo_transporte: string
    placa: string
    nom_conductor: string
    licencia: string
    observaciones?: string | null
  }

  export type FormExtUncheckedCreateWithoutSampleInput = {
    id?: number
    m03: string
    nro_factura_exportacion: number
    laboratorio: string
    cod_analisis: number
    des_comprador: string
    des_aduana: string
    des_pais: string
    tipo_transporte: string
    placa: string
    nom_conductor: string
    licencia: string
    observaciones?: string | null
  }

  export type FormExtCreateOrConnectWithoutSampleInput = {
    where: FormExtWhereUniqueInput
    create: XOR<FormExtCreateWithoutSampleInput, FormExtUncheckedCreateWithoutSampleInput>
  }

  export type OperatorUpsertWithoutSamplesInput = {
    update: XOR<OperatorUpdateWithoutSamplesInput, OperatorUncheckedUpdateWithoutSamplesInput>
    create: XOR<OperatorCreateWithoutSamplesInput, OperatorUncheckedCreateWithoutSamplesInput>
    where?: OperatorWhereInput
  }

  export type OperatorUpdateToOneWithWhereWithoutSamplesInput = {
    where?: OperatorWhereInput
    data: XOR<OperatorUpdateWithoutSamplesInput, OperatorUncheckedUpdateWithoutSamplesInput>
  }

  export type OperatorUpdateWithoutSamplesInput = {
    razon_social?: StringFieldUpdateOperationsInput | string
    nit?: IntFieldUpdateOperationsInput | number
    nim_niar?: IntFieldUpdateOperationsInput | number
    nro_nim?: StringFieldUpdateOperationsInput | string
    fecha_exp_nim?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_operador?: IntFieldUpdateOperationsInput | number
    nro_personeria?: NullableStringFieldUpdateOperationsInput | string | null
    nro_matricula_seprec?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_exp_seprec?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipo_doc_creacion?: NullableIntFieldUpdateOperationsInput | number | null
    doc_creacion?: NullableStringFieldUpdateOperationsInput | string | null
    dl_departamento?: IntFieldUpdateOperationsInput | number
    dl_municipio?: IntFieldUpdateOperationsInput | number
    dl_direccion?: StringFieldUpdateOperationsInput | string
    dl_ubicacion?: StringFieldUpdateOperationsInput | string
    correo_inst?: NullableStringFieldUpdateOperationsInput | string | null
    tel_fijo?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: IntFieldUpdateOperationsInput | number
    celular_2?: NullableIntFieldUpdateOperationsInput | number | null
    act_exploracion?: NullableIntFieldUpdateOperationsInput | number | null
    act_comer_interna?: NullableIntFieldUpdateOperationsInput | number | null
    act_comer_externa?: NullableIntFieldUpdateOperationsInput | number | null
    act_industrializacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_tras_colas?: NullableIntFieldUpdateOperationsInput | number | null
    act_explotacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_ben_concentracion?: NullableIntFieldUpdateOperationsInput | number | null
    act_refinacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_fundicion?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_explotacion?: NullableIntFieldUpdateOperationsInput | number | null
    denominacion_area?: NullableStringFieldUpdateOperationsInput | string | null
    nro_codigo_unico?: NullableStringFieldUpdateOperationsInput | string | null
    nro_cuadricula?: NullableStringFieldUpdateOperationsInput | string | null
    municipio_origen?: NullableStringFieldUpdateOperationsInput | string | null
    nro_ruex?: NullableStringFieldUpdateOperationsInput | string | null
    verif_cert_liberacion?: NullableIntFieldUpdateOperationsInput | number | null
    nro_res_ministerial?: NullableIntFieldUpdateOperationsInput | number | null
    nombre_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    ci_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    celular_resp_for101?: NullableIntFieldUpdateOperationsInput | number | null
    correo_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    nombre_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
    ci_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
    celular_resp_tmuestra?: NullableIntFieldUpdateOperationsInput | number | null
    correo_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OperatorUncheckedUpdateWithoutSamplesInput = {
    id?: IntFieldUpdateOperationsInput | number
    razon_social?: StringFieldUpdateOperationsInput | string
    nit?: IntFieldUpdateOperationsInput | number
    nim_niar?: IntFieldUpdateOperationsInput | number
    nro_nim?: StringFieldUpdateOperationsInput | string
    fecha_exp_nim?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo_operador?: IntFieldUpdateOperationsInput | number
    nro_personeria?: NullableStringFieldUpdateOperationsInput | string | null
    nro_matricula_seprec?: NullableStringFieldUpdateOperationsInput | string | null
    fecha_exp_seprec?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tipo_doc_creacion?: NullableIntFieldUpdateOperationsInput | number | null
    doc_creacion?: NullableStringFieldUpdateOperationsInput | string | null
    dl_departamento?: IntFieldUpdateOperationsInput | number
    dl_municipio?: IntFieldUpdateOperationsInput | number
    dl_direccion?: StringFieldUpdateOperationsInput | string
    dl_ubicacion?: StringFieldUpdateOperationsInput | string
    correo_inst?: NullableStringFieldUpdateOperationsInput | string | null
    tel_fijo?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: IntFieldUpdateOperationsInput | number
    celular_2?: NullableIntFieldUpdateOperationsInput | number | null
    act_exploracion?: NullableIntFieldUpdateOperationsInput | number | null
    act_comer_interna?: NullableIntFieldUpdateOperationsInput | number | null
    act_comer_externa?: NullableIntFieldUpdateOperationsInput | number | null
    act_industrializacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_tras_colas?: NullableIntFieldUpdateOperationsInput | number | null
    act_explotacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_ben_concentracion?: NullableIntFieldUpdateOperationsInput | number | null
    act_refinacion?: NullableIntFieldUpdateOperationsInput | number | null
    act_fundicion?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_explotacion?: NullableIntFieldUpdateOperationsInput | number | null
    denominacion_area?: NullableStringFieldUpdateOperationsInput | string | null
    nro_codigo_unico?: NullableStringFieldUpdateOperationsInput | string | null
    nro_cuadricula?: NullableStringFieldUpdateOperationsInput | string | null
    municipio_origen?: NullableStringFieldUpdateOperationsInput | string | null
    nro_ruex?: NullableStringFieldUpdateOperationsInput | string | null
    verif_cert_liberacion?: NullableIntFieldUpdateOperationsInput | number | null
    nro_res_ministerial?: NullableIntFieldUpdateOperationsInput | number | null
    nombre_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    ci_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    celular_resp_for101?: NullableIntFieldUpdateOperationsInput | number | null
    correo_resp_for101?: NullableStringFieldUpdateOperationsInput | string | null
    nombre_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
    ci_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
    celular_resp_tmuestra?: NullableIntFieldUpdateOperationsInput | number | null
    correo_resp_tmuestra?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SampleMineralUpsertWithWhereUniqueWithoutSampleInput = {
    where: SampleMineralWhereUniqueInput
    update: XOR<SampleMineralUpdateWithoutSampleInput, SampleMineralUncheckedUpdateWithoutSampleInput>
    create: XOR<SampleMineralCreateWithoutSampleInput, SampleMineralUncheckedCreateWithoutSampleInput>
  }

  export type SampleMineralUpdateWithWhereUniqueWithoutSampleInput = {
    where: SampleMineralWhereUniqueInput
    data: XOR<SampleMineralUpdateWithoutSampleInput, SampleMineralUncheckedUpdateWithoutSampleInput>
  }

  export type SampleMineralUpdateManyWithWhereWithoutSampleInput = {
    where: SampleMineralScalarWhereInput
    data: XOR<SampleMineralUpdateManyMutationInput, SampleMineralUncheckedUpdateManyWithoutSampleInput>
  }

  export type SampleMineralScalarWhereInput = {
    AND?: SampleMineralScalarWhereInput | SampleMineralScalarWhereInput[]
    OR?: SampleMineralScalarWhereInput[]
    NOT?: SampleMineralScalarWhereInput | SampleMineralScalarWhereInput[]
    sampleId?: IntFilter<"SampleMineral"> | number
    mineralId?: IntFilter<"SampleMineral"> | number
    ley?: IntFilter<"SampleMineral"> | number
    unidad?: StringFilter<"SampleMineral"> | string
  }

  export type FormExtUpsertWithoutSampleInput = {
    update: XOR<FormExtUpdateWithoutSampleInput, FormExtUncheckedUpdateWithoutSampleInput>
    create: XOR<FormExtCreateWithoutSampleInput, FormExtUncheckedCreateWithoutSampleInput>
    where?: FormExtWhereInput
  }

  export type FormExtUpdateToOneWithWhereWithoutSampleInput = {
    where?: FormExtWhereInput
    data: XOR<FormExtUpdateWithoutSampleInput, FormExtUncheckedUpdateWithoutSampleInput>
  }

  export type FormExtUpdateWithoutSampleInput = {
    m03?: StringFieldUpdateOperationsInput | string
    nro_factura_exportacion?: IntFieldUpdateOperationsInput | number
    laboratorio?: StringFieldUpdateOperationsInput | string
    cod_analisis?: IntFieldUpdateOperationsInput | number
    des_comprador?: StringFieldUpdateOperationsInput | string
    des_aduana?: StringFieldUpdateOperationsInput | string
    des_pais?: StringFieldUpdateOperationsInput | string
    tipo_transporte?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    nom_conductor?: StringFieldUpdateOperationsInput | string
    licencia?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FormExtUncheckedUpdateWithoutSampleInput = {
    id?: IntFieldUpdateOperationsInput | number
    m03?: StringFieldUpdateOperationsInput | string
    nro_factura_exportacion?: IntFieldUpdateOperationsInput | number
    laboratorio?: StringFieldUpdateOperationsInput | string
    cod_analisis?: IntFieldUpdateOperationsInput | number
    des_comprador?: StringFieldUpdateOperationsInput | string
    des_aduana?: StringFieldUpdateOperationsInput | string
    des_pais?: StringFieldUpdateOperationsInput | string
    tipo_transporte?: StringFieldUpdateOperationsInput | string
    placa?: StringFieldUpdateOperationsInput | string
    nom_conductor?: StringFieldUpdateOperationsInput | string
    licencia?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SampleMineralCreateWithoutMineralInput = {
    ley: number
    unidad: string
    sample: SampleCreateNestedOneWithoutMineralesInput
  }

  export type SampleMineralUncheckedCreateWithoutMineralInput = {
    sampleId: number
    ley: number
    unidad: string
  }

  export type SampleMineralCreateOrConnectWithoutMineralInput = {
    where: SampleMineralWhereUniqueInput
    create: XOR<SampleMineralCreateWithoutMineralInput, SampleMineralUncheckedCreateWithoutMineralInput>
  }

  export type SampleMineralCreateManyMineralInputEnvelope = {
    data: SampleMineralCreateManyMineralInput | SampleMineralCreateManyMineralInput[]
    skipDuplicates?: boolean
  }

  export type SampleMineralUpsertWithWhereUniqueWithoutMineralInput = {
    where: SampleMineralWhereUniqueInput
    update: XOR<SampleMineralUpdateWithoutMineralInput, SampleMineralUncheckedUpdateWithoutMineralInput>
    create: XOR<SampleMineralCreateWithoutMineralInput, SampleMineralUncheckedCreateWithoutMineralInput>
  }

  export type SampleMineralUpdateWithWhereUniqueWithoutMineralInput = {
    where: SampleMineralWhereUniqueInput
    data: XOR<SampleMineralUpdateWithoutMineralInput, SampleMineralUncheckedUpdateWithoutMineralInput>
  }

  export type SampleMineralUpdateManyWithWhereWithoutMineralInput = {
    where: SampleMineralScalarWhereInput
    data: XOR<SampleMineralUpdateManyMutationInput, SampleMineralUncheckedUpdateManyWithoutMineralInput>
  }

  export type SampleCreateWithoutMineralesInput = {
    fecha_emision?: Date | string
    ubi_geografica: string
    lugar_verificacion: string
    responsable: string
    lotes: string
    tipo_muestra: number
    presentacion: number
    sacos: number
    camiones: number
    peso_neto: Decimal | DecimalJsLike | number | string
    peso_parcial: Decimal | DecimalJsLike | number | string
    id_municipio: number
    senerecom: string
    tipo_agranel?: number | null
    tipo_emsacado?: number | null
    tipo_lingotes?: number | null
    tipo_sal?: number | null
    tipo_otr?: number | null
    observaciones?: string | null
    estado: number
    formExtId?: number | null
    operador: OperatorCreateNestedOneWithoutSamplesInput
    formExt?: FormExtCreateNestedOneWithoutSampleInput
  }

  export type SampleUncheckedCreateWithoutMineralesInput = {
    id?: number
    fecha_emision?: Date | string
    ubi_geografica: string
    lugar_verificacion: string
    id_operador: number
    responsable: string
    lotes: string
    tipo_muestra: number
    presentacion: number
    sacos: number
    camiones: number
    peso_neto: Decimal | DecimalJsLike | number | string
    peso_parcial: Decimal | DecimalJsLike | number | string
    id_municipio: number
    senerecom: string
    tipo_agranel?: number | null
    tipo_emsacado?: number | null
    tipo_lingotes?: number | null
    tipo_sal?: number | null
    tipo_otr?: number | null
    observaciones?: string | null
    estado: number
    formExtId?: number | null
    formExt?: FormExtUncheckedCreateNestedOneWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutMineralesInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutMineralesInput, SampleUncheckedCreateWithoutMineralesInput>
  }

  export type MineralCreateWithoutSampleInput = {
    nombre: string
    sigla: string
    descripcion: string
    estado: number
  }

  export type MineralUncheckedCreateWithoutSampleInput = {
    id?: number
    nombre: string
    sigla: string
    descripcion: string
    estado: number
  }

  export type MineralCreateOrConnectWithoutSampleInput = {
    where: MineralWhereUniqueInput
    create: XOR<MineralCreateWithoutSampleInput, MineralUncheckedCreateWithoutSampleInput>
  }

  export type SampleUpsertWithoutMineralesInput = {
    update: XOR<SampleUpdateWithoutMineralesInput, SampleUncheckedUpdateWithoutMineralesInput>
    create: XOR<SampleCreateWithoutMineralesInput, SampleUncheckedCreateWithoutMineralesInput>
    where?: SampleWhereInput
  }

  export type SampleUpdateToOneWithWhereWithoutMineralesInput = {
    where?: SampleWhereInput
    data: XOR<SampleUpdateWithoutMineralesInput, SampleUncheckedUpdateWithoutMineralesInput>
  }

  export type SampleUpdateWithoutMineralesInput = {
    fecha_emision?: DateTimeFieldUpdateOperationsInput | Date | string
    ubi_geografica?: StringFieldUpdateOperationsInput | string
    lugar_verificacion?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    lotes?: StringFieldUpdateOperationsInput | string
    tipo_muestra?: IntFieldUpdateOperationsInput | number
    presentacion?: IntFieldUpdateOperationsInput | number
    sacos?: IntFieldUpdateOperationsInput | number
    camiones?: IntFieldUpdateOperationsInput | number
    peso_neto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_municipio?: IntFieldUpdateOperationsInput | number
    senerecom?: StringFieldUpdateOperationsInput | string
    tipo_agranel?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_emsacado?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_lingotes?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_sal?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_otr?: NullableIntFieldUpdateOperationsInput | number | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: IntFieldUpdateOperationsInput | number
    formExtId?: NullableIntFieldUpdateOperationsInput | number | null
    operador?: OperatorUpdateOneRequiredWithoutSamplesNestedInput
    formExt?: FormExtUpdateOneWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateWithoutMineralesInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha_emision?: DateTimeFieldUpdateOperationsInput | Date | string
    ubi_geografica?: StringFieldUpdateOperationsInput | string
    lugar_verificacion?: StringFieldUpdateOperationsInput | string
    id_operador?: IntFieldUpdateOperationsInput | number
    responsable?: StringFieldUpdateOperationsInput | string
    lotes?: StringFieldUpdateOperationsInput | string
    tipo_muestra?: IntFieldUpdateOperationsInput | number
    presentacion?: IntFieldUpdateOperationsInput | number
    sacos?: IntFieldUpdateOperationsInput | number
    camiones?: IntFieldUpdateOperationsInput | number
    peso_neto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_municipio?: IntFieldUpdateOperationsInput | number
    senerecom?: StringFieldUpdateOperationsInput | string
    tipo_agranel?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_emsacado?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_lingotes?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_sal?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_otr?: NullableIntFieldUpdateOperationsInput | number | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: IntFieldUpdateOperationsInput | number
    formExtId?: NullableIntFieldUpdateOperationsInput | number | null
    formExt?: FormExtUncheckedUpdateOneWithoutSampleNestedInput
  }

  export type MineralUpsertWithoutSampleInput = {
    update: XOR<MineralUpdateWithoutSampleInput, MineralUncheckedUpdateWithoutSampleInput>
    create: XOR<MineralCreateWithoutSampleInput, MineralUncheckedCreateWithoutSampleInput>
    where?: MineralWhereInput
  }

  export type MineralUpdateToOneWithWhereWithoutSampleInput = {
    where?: MineralWhereInput
    data: XOR<MineralUpdateWithoutSampleInput, MineralUncheckedUpdateWithoutSampleInput>
  }

  export type MineralUpdateWithoutSampleInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    estado?: IntFieldUpdateOperationsInput | number
  }

  export type MineralUncheckedUpdateWithoutSampleInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    estado?: IntFieldUpdateOperationsInput | number
  }

  export type SampleCreateWithoutFormExtInput = {
    fecha_emision?: Date | string
    ubi_geografica: string
    lugar_verificacion: string
    responsable: string
    lotes: string
    tipo_muestra: number
    presentacion: number
    sacos: number
    camiones: number
    peso_neto: Decimal | DecimalJsLike | number | string
    peso_parcial: Decimal | DecimalJsLike | number | string
    id_municipio: number
    senerecom: string
    tipo_agranel?: number | null
    tipo_emsacado?: number | null
    tipo_lingotes?: number | null
    tipo_sal?: number | null
    tipo_otr?: number | null
    observaciones?: string | null
    estado: number
    formExtId?: number | null
    operador: OperatorCreateNestedOneWithoutSamplesInput
    minerales?: SampleMineralCreateNestedManyWithoutSampleInput
  }

  export type SampleUncheckedCreateWithoutFormExtInput = {
    id?: number
    fecha_emision?: Date | string
    ubi_geografica: string
    lugar_verificacion: string
    id_operador: number
    responsable: string
    lotes: string
    tipo_muestra: number
    presentacion: number
    sacos: number
    camiones: number
    peso_neto: Decimal | DecimalJsLike | number | string
    peso_parcial: Decimal | DecimalJsLike | number | string
    id_municipio: number
    senerecom: string
    tipo_agranel?: number | null
    tipo_emsacado?: number | null
    tipo_lingotes?: number | null
    tipo_sal?: number | null
    tipo_otr?: number | null
    observaciones?: string | null
    estado: number
    formExtId?: number | null
    minerales?: SampleMineralUncheckedCreateNestedManyWithoutSampleInput
  }

  export type SampleCreateOrConnectWithoutFormExtInput = {
    where: SampleWhereUniqueInput
    create: XOR<SampleCreateWithoutFormExtInput, SampleUncheckedCreateWithoutFormExtInput>
  }

  export type SampleUpsertWithoutFormExtInput = {
    update: XOR<SampleUpdateWithoutFormExtInput, SampleUncheckedUpdateWithoutFormExtInput>
    create: XOR<SampleCreateWithoutFormExtInput, SampleUncheckedCreateWithoutFormExtInput>
    where?: SampleWhereInput
  }

  export type SampleUpdateToOneWithWhereWithoutFormExtInput = {
    where?: SampleWhereInput
    data: XOR<SampleUpdateWithoutFormExtInput, SampleUncheckedUpdateWithoutFormExtInput>
  }

  export type SampleUpdateWithoutFormExtInput = {
    fecha_emision?: DateTimeFieldUpdateOperationsInput | Date | string
    ubi_geografica?: StringFieldUpdateOperationsInput | string
    lugar_verificacion?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    lotes?: StringFieldUpdateOperationsInput | string
    tipo_muestra?: IntFieldUpdateOperationsInput | number
    presentacion?: IntFieldUpdateOperationsInput | number
    sacos?: IntFieldUpdateOperationsInput | number
    camiones?: IntFieldUpdateOperationsInput | number
    peso_neto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_municipio?: IntFieldUpdateOperationsInput | number
    senerecom?: StringFieldUpdateOperationsInput | string
    tipo_agranel?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_emsacado?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_lingotes?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_sal?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_otr?: NullableIntFieldUpdateOperationsInput | number | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: IntFieldUpdateOperationsInput | number
    formExtId?: NullableIntFieldUpdateOperationsInput | number | null
    operador?: OperatorUpdateOneRequiredWithoutSamplesNestedInput
    minerales?: SampleMineralUpdateManyWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateWithoutFormExtInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha_emision?: DateTimeFieldUpdateOperationsInput | Date | string
    ubi_geografica?: StringFieldUpdateOperationsInput | string
    lugar_verificacion?: StringFieldUpdateOperationsInput | string
    id_operador?: IntFieldUpdateOperationsInput | number
    responsable?: StringFieldUpdateOperationsInput | string
    lotes?: StringFieldUpdateOperationsInput | string
    tipo_muestra?: IntFieldUpdateOperationsInput | number
    presentacion?: IntFieldUpdateOperationsInput | number
    sacos?: IntFieldUpdateOperationsInput | number
    camiones?: IntFieldUpdateOperationsInput | number
    peso_neto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_municipio?: IntFieldUpdateOperationsInput | number
    senerecom?: StringFieldUpdateOperationsInput | string
    tipo_agranel?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_emsacado?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_lingotes?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_sal?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_otr?: NullableIntFieldUpdateOperationsInput | number | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: IntFieldUpdateOperationsInput | number
    formExtId?: NullableIntFieldUpdateOperationsInput | number | null
    minerales?: SampleMineralUncheckedUpdateManyWithoutSampleNestedInput
  }

  export type SampleCreateManyOperadorInput = {
    id?: number
    fecha_emision?: Date | string
    ubi_geografica: string
    lugar_verificacion: string
    responsable: string
    lotes: string
    tipo_muestra: number
    presentacion: number
    sacos: number
    camiones: number
    peso_neto: Decimal | DecimalJsLike | number | string
    peso_parcial: Decimal | DecimalJsLike | number | string
    id_municipio: number
    senerecom: string
    tipo_agranel?: number | null
    tipo_emsacado?: number | null
    tipo_lingotes?: number | null
    tipo_sal?: number | null
    tipo_otr?: number | null
    observaciones?: string | null
    estado: number
    formExtId?: number | null
  }

  export type SampleUpdateWithoutOperadorInput = {
    fecha_emision?: DateTimeFieldUpdateOperationsInput | Date | string
    ubi_geografica?: StringFieldUpdateOperationsInput | string
    lugar_verificacion?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    lotes?: StringFieldUpdateOperationsInput | string
    tipo_muestra?: IntFieldUpdateOperationsInput | number
    presentacion?: IntFieldUpdateOperationsInput | number
    sacos?: IntFieldUpdateOperationsInput | number
    camiones?: IntFieldUpdateOperationsInput | number
    peso_neto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_municipio?: IntFieldUpdateOperationsInput | number
    senerecom?: StringFieldUpdateOperationsInput | string
    tipo_agranel?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_emsacado?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_lingotes?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_sal?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_otr?: NullableIntFieldUpdateOperationsInput | number | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: IntFieldUpdateOperationsInput | number
    formExtId?: NullableIntFieldUpdateOperationsInput | number | null
    minerales?: SampleMineralUpdateManyWithoutSampleNestedInput
    formExt?: FormExtUpdateOneWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateWithoutOperadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha_emision?: DateTimeFieldUpdateOperationsInput | Date | string
    ubi_geografica?: StringFieldUpdateOperationsInput | string
    lugar_verificacion?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    lotes?: StringFieldUpdateOperationsInput | string
    tipo_muestra?: IntFieldUpdateOperationsInput | number
    presentacion?: IntFieldUpdateOperationsInput | number
    sacos?: IntFieldUpdateOperationsInput | number
    camiones?: IntFieldUpdateOperationsInput | number
    peso_neto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_municipio?: IntFieldUpdateOperationsInput | number
    senerecom?: StringFieldUpdateOperationsInput | string
    tipo_agranel?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_emsacado?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_lingotes?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_sal?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_otr?: NullableIntFieldUpdateOperationsInput | number | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: IntFieldUpdateOperationsInput | number
    formExtId?: NullableIntFieldUpdateOperationsInput | number | null
    minerales?: SampleMineralUncheckedUpdateManyWithoutSampleNestedInput
    formExt?: FormExtUncheckedUpdateOneWithoutSampleNestedInput
  }

  export type SampleUncheckedUpdateManyWithoutOperadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha_emision?: DateTimeFieldUpdateOperationsInput | Date | string
    ubi_geografica?: StringFieldUpdateOperationsInput | string
    lugar_verificacion?: StringFieldUpdateOperationsInput | string
    responsable?: StringFieldUpdateOperationsInput | string
    lotes?: StringFieldUpdateOperationsInput | string
    tipo_muestra?: IntFieldUpdateOperationsInput | number
    presentacion?: IntFieldUpdateOperationsInput | number
    sacos?: IntFieldUpdateOperationsInput | number
    camiones?: IntFieldUpdateOperationsInput | number
    peso_neto?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso_parcial?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    id_municipio?: IntFieldUpdateOperationsInput | number
    senerecom?: StringFieldUpdateOperationsInput | string
    tipo_agranel?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_emsacado?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_lingotes?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_sal?: NullableIntFieldUpdateOperationsInput | number | null
    tipo_otr?: NullableIntFieldUpdateOperationsInput | number | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: IntFieldUpdateOperationsInput | number
    formExtId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SampleMineralCreateManySampleInput = {
    mineralId: number
    ley: number
    unidad: string
  }

  export type SampleMineralUpdateWithoutSampleInput = {
    ley?: IntFieldUpdateOperationsInput | number
    unidad?: StringFieldUpdateOperationsInput | string
    mineral?: MineralUpdateOneRequiredWithoutSampleNestedInput
  }

  export type SampleMineralUncheckedUpdateWithoutSampleInput = {
    mineralId?: IntFieldUpdateOperationsInput | number
    ley?: IntFieldUpdateOperationsInput | number
    unidad?: StringFieldUpdateOperationsInput | string
  }

  export type SampleMineralUncheckedUpdateManyWithoutSampleInput = {
    mineralId?: IntFieldUpdateOperationsInput | number
    ley?: IntFieldUpdateOperationsInput | number
    unidad?: StringFieldUpdateOperationsInput | string
  }

  export type SampleMineralCreateManyMineralInput = {
    sampleId: number
    ley: number
    unidad: string
  }

  export type SampleMineralUpdateWithoutMineralInput = {
    ley?: IntFieldUpdateOperationsInput | number
    unidad?: StringFieldUpdateOperationsInput | string
    sample?: SampleUpdateOneRequiredWithoutMineralesNestedInput
  }

  export type SampleMineralUncheckedUpdateWithoutMineralInput = {
    sampleId?: IntFieldUpdateOperationsInput | number
    ley?: IntFieldUpdateOperationsInput | number
    unidad?: StringFieldUpdateOperationsInput | string
  }

  export type SampleMineralUncheckedUpdateManyWithoutMineralInput = {
    sampleId?: IntFieldUpdateOperationsInput | number
    ley?: IntFieldUpdateOperationsInput | number
    unidad?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use OperatorCountOutputTypeDefaultArgs instead
     */
    export type OperatorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OperatorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SampleCountOutputTypeDefaultArgs instead
     */
    export type SampleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SampleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MineralCountOutputTypeDefaultArgs instead
     */
    export type MineralCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MineralCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OperatorDefaultArgs instead
     */
    export type OperatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OperatorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SampleDefaultArgs instead
     */
    export type SampleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SampleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MineralDefaultArgs instead
     */
    export type MineralArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MineralDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SampleMineralDefaultArgs instead
     */
    export type SampleMineralArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SampleMineralDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FormExtDefaultArgs instead
     */
    export type FormExtArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FormExtDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}